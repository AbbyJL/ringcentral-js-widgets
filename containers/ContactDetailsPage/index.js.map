{"version":3,"sources":["containers/ContactDetailsPage/index.js"],"names":["mapToProps","_","locale","contactDetails","contactSearch","currentLocale","contactItem","contact","showSpinner","ready","mapToFunctions","router","regionSettings","params","call","composeText","dialerRoute","composeTextRoute","getContact","find","id","contactId","type","contactType","clearContact","clear","formatNumber","phoneNumber","areaCode","countryCode","getAvatar","getProfileImage","getPresence","onBackClick","goBack","onClickToDial","isIdle","push","onToNumberChange","onCall","undefined","onClickToSMS","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","ContactDetailsPage"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAIG;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,cAEC,QAFDA,cAEC;AAAA,MADDC,aACC,QADDA,aACC;;AACD,SAAO;AACLC,mBAAeH,OAAOG,aADjB;AAELC,iBAAaH,eAAeI,OAFvB;AAGLC,iBAAa,EACXN,OAAOO,KAAP,IACAL,cAAcK,KADd,IAEAN,eAAeM,KAHJ;AAHR,GAAP;AASD;;AAED,SAASC,cAAT,CAAwBT,CAAxB,SAUG;AAAA;;AAAA,MATDU,MASC,SATDA,MASC;AAAA,MARDR,cAQC,SARDA,cAQC;AAAA,MAPDS,cAOC,SAPDA,cAOC;AAAA,MANDC,MAMC,SANDA,MAMC;AAAA,MALDC,IAKC,SALDA,IAKC;AAAA,MAJDC,WAIC,SAJDA,WAIC;AAAA,MAHDX,aAGC,SAHDA,aAGC;AAAA,gCAFDY,WAEC;AAAA,MAFDA,WAEC,qCAFa,SAEb;AAAA,oCADDC,gBACC;AAAA,MADDA,gBACC,yCADkB,cAClB;;AACD,SAAO;AACLC,gBAAY,sBAAM;AAChBf,qBAAegB,IAAf,CAAoB;AAClBC,YAAIP,OAAOQ,SADO;AAElBC,cAAMT,OAAOU;AAFK,OAApB;AAID,KANI;AAOLC,kBAAc,wBAAM;AAClBrB,qBAAesB,KAAf;AACD,KATI;AAULC,kBAAc;AAAA,aAAe,4BAAa;AACxCC,gCADwC;AAExCC,kBAAUhB,eAAegB,QAFe;AAGxCC,qBAAajB,eAAeiB;AAHY,OAAb,CAAf;AAAA,KAVT;AAeLC,eAAW;AAAA,aAAW3B,eAAe4B,eAAf,CAA+BxB,OAA/B,CAAX;AAAA,KAfN;AAgBLyB,iBAAa;AAAA,aAAW7B,eAAe6B,WAAf,CAA2BzB,OAA3B,CAAX;AAAA,KAhBR;AAiBL0B,iBAAa,uBAAM;AACjBtB,aAAOuB,MAAP;AACD,KAnBI;AAoBLC,mBAAerB,OACb,UAACa,WAAD,EAAiB;AACf,UAAIb,KAAKsB,MAAT,EAAiB;AACfzB,eAAO0B,IAAP,CAAYrB,WAAZ;AACAF,aAAKwB,gBAAL,CAAsBX,WAAtB;AACAb,aAAKyB,MAAL;AACD;AACF,KAPY,GAQbC,SA5BG;AA6BLC,kBAAc1B;AAAA,6EACZ,iBAAOR,OAAP;AAAA,YAAgBmC,cAAhB,uEAAiC,KAAjC;AAAA;AAAA;AAAA;AAAA;AACE,oBAAI/B,MAAJ,EAAY;AACVA,yBAAO0B,IAAP,CAAYpB,gBAAZ;AACD;AACD;AACA,oBAAIV,QAAQoC,IAAR,IAAgBpC,QAAQoB,WAAxB,IAAuCe,cAA3C,EAA2D;AACzD3B,8BAAY6B,oBAAZ,CAAiCrC,QAAQoC,IAAzC;AACAvC,gCAAcyC,MAAd,CAAqB,EAAEC,cAAcvC,QAAQoC,IAAxB,EAArB;AACD,iBAHD,MAGO;AACL5B,8BAAYgC,WAAZ,CAAwBxC,OAAxB;AACA,sBAAIQ,YAAYiC,cAAZ,KAA+BzC,QAAQoB,WAA3C,EAAwD;AACtDZ,gCAAYkC,mBAAZ;AACD;AACF;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY;;AAAA;AAAA;AAAA;AAAA,UAgBZT;AA7CG,GAAP;AA+CD;;AAED,IAAMU,qBAAqB,yBAAQlD,UAAR,EAAoBU,cAApB,+BAA3B;;kBAEewC,kB","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ContactDetailsView from '../../components/ContactDetailsView';\n\nfunction mapToProps(_, {\n  locale,\n  contactDetails,\n  contactSearch,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    contactItem: contactDetails.contact,\n    showSpinner: !(\n      locale.ready &&\n      contactSearch.ready &&\n      contactDetails.ready\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  router,\n  contactDetails,\n  regionSettings,\n  params,\n  call,\n  composeText,\n  contactSearch,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    getContact: () => {\n      contactDetails.find({\n        id: params.contactId,\n        type: params.contactType\n      });\n    },\n    clearContact: () => {\n      contactDetails.clear();\n    },\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getAvatar: contact => contactDetails.getProfileImage(contact),\n    getPresence: contact => contactDetails.getPresence(contact),\n    onBackClick: () => {\n      router.goBack();\n    },\n    onClickToDial: call ?\n      (phoneNumber) => {\n        if (call.isIdle) {\n          router.push(dialerRoute);\n          call.onToNumberChange(phoneNumber);\n          call.onCall();\n        }\n      } :\n      undefined,\n    onClickToSMS: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n  };\n}\n\nconst ContactDetailsPage = connect(mapToProps, mapToFunctions)(ContactDetailsView);\n\nexport default ContactDetailsPage;\n"]}