{"version":3,"sources":["containers/ContactDetailsPage/index.js"],"names":["mapToProps","_","locale","contactDetails","contactSearch","currentLocale","contactItem","contact","showSpinner","ready","mapToFunctions","router","regionSettings","params","call","composeText","dialerRoute","composeTextRoute","onClickMailTo","getContact","find","id","contactId","type","contactType","clearContact","clear","formatNumber","phoneNumber","areaCode","countryCode","getAvatar","getProfileImage","getPresence","onBackClick","goBack","onClickToDial","isIdle","push","onToNumberChange","onCall","undefined","onClickToSMS","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","email","win","window","open","setTimeout","close","ContactDetailsPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ContactDetailsView from '../../components/ContactDetailsView';\n\nfunction mapToProps(_, {\n  locale,\n  contactDetails,\n  contactSearch,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    contactItem: contactDetails.contact,\n    showSpinner: !(\n      locale.ready &&\n      contactSearch.ready &&\n      contactDetails.ready\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  router,\n  contactDetails,\n  regionSettings,\n  params,\n  call,\n  composeText,\n  contactSearch,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  onClickMailTo\n}) {\n  return {\n    getContact: () => {\n      contactDetails.find({\n        id: params.contactId,\n        type: params.contactType\n      });\n    },\n    clearContact: () => {\n      contactDetails.clear();\n    },\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getAvatar: contact => contactDetails.getProfileImage(contact),\n    getPresence: contact => contactDetails.getPresence(contact),\n    onBackClick: () => {\n      router.goBack();\n    },\n    onClickToDial: call ?\n      (phoneNumber) => {\n        if (call.isIdle) {\n          router.push(dialerRoute);\n          call.onToNumberChange(phoneNumber);\n          call.onCall();\n        }\n      } :\n      undefined,\n    onClickToSMS: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    onClickMailTo: (email, contactType) => {\n      if (onClickMailTo) {\n        onClickMailTo(email, contactType);\n        return;\n      }\n      const win = window.open(`mailto:${email}`);\n      setTimeout(() => {\n        win.close();\n      }, 300);\n    }\n  };\n}\n\nconst ContactDetailsPage = connect(mapToProps, mapToFunctions)(ContactDetailsView);\n\nexport default ContactDetailsPage;\n"]}