{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","showContactDisplayPlaceholder","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","fullName","autoLog","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","webphone","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","onViewContact","contact","id","type","onClickToSms","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","ActiveCallsPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport withPhone from '../../lib/withPhone';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n  },\n  showContactDisplayPlaceholder = false,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneToVoicemail: (...args) => (webphone && webphone.toVoiceMail(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: async (...args) => {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onViewContact: ({ contact }) => {\n      const id = contact.id;\n      const type = contact.type;\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    },\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onCallsEmpty,\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(mapToProps, mapToFunctions)(ActiveCallsPanel));\n\nexport default ActiveCallsPage;\n"]}