{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","callMonitor","locale","regionSettings","rolesAndPermissions","brand","showContactDisplayPlaceholder","callLogger","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","fullName","autoLog","mapToFunctions","webphone","composeTextRoute","callCtrlRoute","onCreateContact","composeText","onLogCall","contactMatcher","router","contactSearch","isLoggedContact","onCallsEmpty","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","onViewContact","contact","id","type","onClickToSms","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","ActiveCallsPage"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAQG;AAAA,MAPDC,WAOC,QAPDA,WAOC;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,cAKC,QALDA,cAKC;AAAA,MAJDC,mBAIC,QAJDA,mBAIC;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,mCAFDC,6BAEC;AAAA,MAFDA,6BAEC,yCAF+B,KAE/B;AAAA,MADDC,UACC,QADDA,UACC;;AACD,SAAO;AACLC,mBAAeN,OAAOM,aADjB;AAELC,qBAAiBR,YAAYQ,eAFxB;AAGLC,uBAAmBT,YAAYS,iBAH1B;AAILC,wBAAoBV,YAAYU,kBAJ3B;AAKLC,sBAAkBX,YAAYW,gBALzB;AAMLC,cAAUV,eAAeU,QANpB;AAOLC,iBAAaX,eAAeW,WAPvB;AAQLC,2BAAuB,CAAC,EACtBX,oBAAoBY,WAApB,IACAZ,oBAAoBY,WAApB,CAAgCC,WAFV,CARnB;AAYLC,2BAAuB,CAAC,EACtBd,oBAAoBY,WAApB,IACAZ,oBAAoBY,WAApB,CAAgCG,WAFV,CAZnB;AAgBLC,iBAAa,KAhBR;AAiBLf,WAAOA,MAAMgB,QAjBR;AAkBLf,gEAlBK;AAmBLgB,aAAS,CAAC,EAAEf,cAAcA,WAAWe,OAA3B;AAnBL,GAAP;AAqBD;;AAED,SAASC,cAAT,CAAwBvB,CAAxB,SAcG;AAAA;;AAAA,MAbDwB,QAaC,SAbDA,QAaC;AAAA,MAZDrB,cAYC,SAZDA,cAYC;AAAA,oCAXDsB,gBAWC;AAAA,MAXDA,gBAWC,yCAXkB,cAWlB;AAAA,kCAVDC,aAUC;AAAA,MAVDA,aAUC,uCAVe,eAUf;AAAA,MATDC,eASC,SATDA,eASC;AAAA,MARDC,WAQC,SARDA,WAQC;AAAA,MAPDrB,UAOC,SAPDA,UAOC;AAAA,MANDsB,SAMC,SANDA,SAMC;AAAA,MALDC,cAKC,SALDA,cAKC;AAAA,MAJDC,MAIC,SAJDA,MAIC;AAAA,MAHDC,aAGC,SAHDA,aAGC;AAAA,MAFDC,eAEC,SAFDA,eAEC;AAAA,MADDC,YACC,SADDA,YACC;;AACD,SAAO;AACLC,iBAAa;AAAA,aAAe,4BAAa;AACvCC,gCADuC;AAEvCvB,kBAAUV,eAAeU,QAFc;AAGvCC,qBAAaX,eAAeW;AAHW,OAAb,CAAf;AAAA,KADR;AAMLuB,oBAAgB;AAAA,aAAcb,YAAYA,SAASc,MAAT,2BAA1B;AAAA,KANX;AAOLC,yBAAqB;AAAA,aAAcf,YAAYA,SAASgB,WAAT,2BAA1B;AAAA,KAPhB;AAQLC,oBAAgB;AAAA,aAAcjB,YAAYA,SAASkB,MAAT,2BAA1B;AAAA,KARX;AASLC,oBAAgB;AAAA,aAAcnB,YAAYA,SAASoB,MAAT,2BAA1B;AAAA,KATX;AAULC;AAAA,6EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACTrB,QADS;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAIRA,SAASsB,MAAT,uBAJQ;;AAAA;AAKd,oBAAIf,OAAOgB,WAAP,KAAuBrB,aAA3B,EAA0C;AACxCK,yBAAOiB,IAAP,CAAYtB,aAAZ;AACD;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;;AAAA;AAAA;AAAA;AAAA,OAVK;AAmBLuB,mBAAe,8BAAiB;AAAA,UAAdC,OAAc,SAAdA,OAAc;;AAC9B,UAAMC,KAAKD,QAAQC,EAAnB;AACA,UAAMC,OAAOF,QAAQE,IAArB;AACArB,aAAOiB,IAAP,gBAAyBI,IAAzB,SAAiCD,EAAjC;AACD,KAvBI;AAwBLE,kBAAczB;AAAA,6EACZ,kBAAOsB,OAAP;AAAA,YAAgBI,cAAhB,uEAAiC,KAAjC;AAAA;AAAA;AAAA;AAAA;AACE,oBAAIvB,MAAJ,EAAY;AACVA,yBAAOiB,IAAP,CAAYvB,gBAAZ;AACD;AACD,oBAAIyB,QAAQK,IAAR,IAAgBL,QAAQd,WAAxB,IAAuCkB,cAA3C,EAA2D;AACzD1B,8BAAY4B,oBAAZ,CAAiCN,QAAQK,IAAzC;AACAvB,gCAAcyB,MAAd,CAAqB,EAAEC,cAAcR,QAAQK,IAAxB,EAArB;AACD,iBAHD,MAGO;AACL3B,8BAAY+B,WAAZ,CAAwBT,OAAxB;AACA,sBAAItB,YAAYgC,cAAZ,KAA+BV,QAAQd,WAA3C,EAAwD;AACtDR,gCAAYiC,mBAAZ;AACD;AACF;;AAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY;;AAAA;AAAA;AAAA;AAAA,UAeZC,SAvCG;AAwCLnC,qBAAiBA;AAAA,6EACf;AAAA,YAASS,WAAT,SAASA,WAAT;AAAA,YAAsBmB,IAAtB,SAAsBA,IAAtB;AAAA,YAA4BQ,UAA5B,SAA4BA,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC+BjC,eAAekC,cAAf,CAA8B;AACzD5B,0CADyD;AAEzD6B,+BAAa;AAF4C,iBAA9B,CAD/B;;AAAA;AACQD,8BADR;;AAAA,oBAKOA,cALP;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAMUrC,gBAAgB,EAAES,wBAAF,EAAemB,UAAf,EAAqBQ,sBAArB,EAAhB,CANV;;AAAA;AAAA;AAAA,uBAOUjC,eAAeoC,gBAAf,CAAgC,EAAE9B,wBAAF,EAAhC,CAPV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADe;;AAAA;AAAA;AAAA;AAAA,UAWf0B,SAnDG;AAoDL7B,oCApDK;AAqDLJ,eAAWA,aACVtB;AAAA,6EAAe;AAAA,YAAS4D,IAAT,SAASA,IAAT;AAAA,YAAejB,OAAf,SAAeA,OAAf;AAAA,mCAAwBkB,QAAxB;AAAA,YAAwBA,QAAxB,kCAAmC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACR7D,WAAW8D,OAAX,CAAmB;AACvBF,4BADuB;AAEvBjB,kCAFuB;AAGvBkB;AAHuB,iBAAnB,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAf;;AAAA;AAAA;AAAA;AAAA,OAtDI;AA6DLlC;AA7DK,GAAP;AA+DD;;AAED,IAAMoC,kBAAkB,yBAAQvE,UAAR,EAAoBwB,cAApB,6BAAxB;;kBAEe+C,e","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  callMonitor,\n  locale,\n  regionSettings,\n  rolesAndPermissions,\n  brand,\n  showContactDisplayPlaceholder = false,\n  callLogger,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\n\nfunction mapToFunctions(_, {\n  webphone,\n  regionSettings,\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  composeText,\n  callLogger,\n  onLogCall,\n  contactMatcher,\n  router,\n  contactSearch,\n  isLoggedContact,\n  onCallsEmpty,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneToVoicemail: (...args) => (webphone && webphone.toVoiceMail(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: async (...args) => {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (router.currentPath !== callCtrlRoute) {\n        router.push(callCtrlRoute);\n      }\n    },\n    onViewContact: ({ contact }) => {\n      const id = contact.id;\n      const type = contact.type;\n      router.push(`/contacts/${type}/${id}?direct=true`);\n    },\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onCallsEmpty,\n  };\n}\n\nconst ActiveCallsPage = connect(mapToProps, mapToFunctions)(ActiveCallsPanel);\n\nexport default ActiveCallsPage;\n"]}