{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","callMonitor","locale","regionSettings","rolesAndPermissions","brand","showContactDisplayPlaceholder","callLogger","hasCalls","calls","length","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","fullName","autoLog","mapToFunctions","webphone","composeTextRoute","callCtrlRoute","onViewContact","onCreateContact","composeText","onLogCall","contactMatcher","router","contactSearch","isLoggedContact","onCallsEmpty","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","contact","hasMatchNumber","ignoreCache","undefined","onClickToSms","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","entityType","forceMatchNumber","call","redirect","logCall","ActiveCallsPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  callMonitor,\n  locale,\n  regionSettings,\n  rolesAndPermissions,\n  brand,\n  showContactDisplayPlaceholder = false,\n  callLogger,\n}) {\n  return {\n    hasCalls: (callMonitor.calls.length !== 0),\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\n\nfunction mapToFunctions(_, {\n  webphone,\n  regionSettings,\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onViewContact,\n  onCreateContact,\n  composeText,\n  callLogger,\n  onLogCall,\n  contactMatcher,\n  router,\n  contactSearch,\n  isLoggedContact,\n  onCallsEmpty,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneToVoicemail: (...args) => (webphone && webphone.toVoiceMail(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: async (...args) => {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (router.currentPath !== callCtrlRoute) {\n        router.push(callCtrlRoute);\n      }\n    },\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onCallsEmpty,\n  };\n}\n\nconst ActiveCallsPage = connect(mapToProps, mapToFunctions)(ActiveCallsPanel);\n\nexport default ActiveCallsPage;\n"]}