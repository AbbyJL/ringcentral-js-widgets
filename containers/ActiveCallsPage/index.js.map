{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","showContactDisplayPlaceholder","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","fullName","autoLog","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","webphone","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","contact","id","type","onClickToSms","isDummyContact","clean","name","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","ActiveCallsPage","ActiveCallsPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport withPhone from '../../lib/withPhone';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n  },\n  showContactDisplayPlaceholder = false,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n  onViewContact,\n  showViewContact = true,\n}) {\n  return {\n    formatPhone(phoneNumber) {\n      return formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      });\n    },\n    async webphoneAnswer(...args) {\n      return (webphone && webphone.answer(...args));\n    },\n    async webphoneToVoicemail(...args) {\n      return (webphone && webphone.toVoiceMail(...args));\n    },\n    async webphoneReject(...args) {\n      return (webphone && webphone.reject(...args));\n    },\n    async webphoneHangup(...args) {\n      return (webphone && webphone.hangup(...args));\n    },\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onViewContact: showViewContact ?\n      (onViewContact || (({ contact }) => {\n        const { id, type } = contact;\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      })) : null,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        composeText.clean();\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToRecipients(contact);\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n    onCallsEmpty,\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(mapToProps, mapToFunctions)(ActiveCallsPanel));\n\nexport default ActiveCallsPage;\n"]}