{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","formatPhone","props","formatNumber","changeDefaultRecipient","changeMatchedNames","getRecipientName","recipient","getMatcherContactList","getMatcherContactNameList","loadConversation","unloadConversation","phoneNumber","extensionNumber","getMatcherContactName","matcherName","name","id","conversationId","loadConversationById","brand","countryCode","areaCode","disableLinks","currentLocale","messages","messageText","updateMessageText","conversation","onLogConversation","isLoggedContact","recipients","showSpinner","replyToReceivers","sendButtonDisabled","autoLog","dateTimeFormatter","showContactDisplayPlaceholder","goBack","sourceIcons","showGroupNumberName","propTypes","string","isRequired","bool","func","object","defaultProps","undefined","childContextTypes","mapToProps","_","phone","locale","conversationLogger","dateTimeFormat","contactMatcher","regionSettings","rateLimiter","connectivityMonitor","params","enableContactFallback","fullName","pushing","ready","allConversations","find","item","isThrottling","connectivity","mapToFunctions","routerInteraction","formatDateTime","matcherNames","dataMapping","length","map","matcher","phoneNumbers","phoneType","join","text","redirect","options","logConversation","push","updateTypeFilter"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport messageTypes from 'ringcentral-integration/enums/messageTypes';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\nimport withPhone from '../../lib/withPhone';\n\nclass ConversationPage extends Component {\n  getChildContext() {\n    return {\n      formatPhone: this.props.formatNumber,\n      changeDefaultRecipient: this.props.changeDefaultRecipient,\n      changeMatchedNames: this.props.changeMatchedNames,\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n      getMatcherContactList: this.props.getMatcherContactList,\n      getMatcherContactNameList: this.props.getMatcherContactNameList,\n    };\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n  }\n\n  componentWillUnmount() {\n    this.props.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.getMatcherContactName) {\n      const matcherName = this.props.getMatcherContactName(phoneNumber);\n      if (matcherName) {\n        return matcherName;\n      }\n      return this.props.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.props.formatNumber(phoneNumber);\n  }\n\n  loadConversation() {\n    const id = this.props.conversationId;\n    this.props.loadConversationById(id);\n  }\n\n  render() {\n    return (\n      <ConversationPanel\n        brand={this.props.brand}\n        countryCode={this.props.countryCode}\n        areaCode={this.props.areaCode}\n        disableLinks={this.props.disableLinks}\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        messageText={this.props.messageText}\n        updateMessageText={this.props.updateMessageText}\n        conversation={this.props.conversation}\n        onLogConversation={this.props.onLogConversation}\n        isLoggedContact={this.props.isLoggedContact}\n        recipients={this.props.recipients}\n        showSpinner={this.props.showSpinner}\n        replyToReceivers={this.props.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n        autoLog={this.props.autoLog}\n        dateTimeFormatter={this.props.dateTimeFormatter}\n        showContactDisplayPlaceholder={this.props.showContactDisplayPlaceholder}\n        goBack={this.props.goBack}\n        sourceIcons={this.props.sourceIcons}\n        showGroupNumberName={this.props.showGroupNumberName}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  messageText: PropTypes.string,\n  updateMessageText: PropTypes.func,\n  recipients: ConversationPanel.propTypes.recipients,\n  replyToReceivers: PropTypes.func.isRequired,\n  unloadConversation: PropTypes.func.isRequired,\n  loadConversationById: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  formatNumber: PropTypes.func.isRequired,\n  getMatcherContactName: PropTypes.func,\n  getMatcherContactList: PropTypes.func,\n  getMatcherContactNameList: PropTypes.func,\n  changeMatchedNames: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  sourceIcons: PropTypes.object,\n  showGroupNumberName: PropTypes.bool.isRequired,\n};\n\nConversationPage.defaultProps = {\n  messageText: '',\n  getMatcherContactName: null,\n  getMatcherContactList: () => [],\n  getMatcherContactNameList: () => [],\n  updateMessageText: () => {},\n  sourceIcons: undefined,\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  changeMatchedNames: PropTypes.func.isRequired,\n  getMatcherContactList: PropTypes.func.isRequired,\n  getMatcherContactNameList: PropTypes.func.isRequired,\n};\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    conversation,\n    conversationLogger,\n    dateTimeFormat,\n    contactMatcher,\n    regionSettings,\n    messages,\n    rateLimiter,\n    connectivityMonitor,\n  },\n  params,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n}) {\n  return ({\n    brand: brand.fullName,\n    enableContactFallback,\n    showGroupNumberName,\n    currentLocale: locale.currentLocale,\n    conversationId: params.conversationId,\n    sendButtonDisabled: conversation.pushing,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    showSpinner: !(\n      dateTimeFormat.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      conversation.ready &&\n      regionSettings.ready &&\n      messages.ready &&\n      rateLimiter.ready &&\n      connectivityMonitor.ready &&\n      (!conversationLogger || conversationLogger.ready)\n    ),\n    recipients: conversation.recipients,\n    messages: conversation.messages,\n    messageText: conversation.messageText,\n    conversation: messages.allConversations.find(item => (\n      item.conversationId === params.conversationId\n    )),\n    disableLinks: (\n      rateLimiter.isThrottling || !connectivityMonitor.connectivity\n    ),\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n  });\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    contactMatcher,\n    conversation,\n    dateTimeFormat,\n    routerInteraction,\n    conversationLogger,\n    regionSettings,\n    messages,\n  },\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  isLoggedContact,\n  onLogConversation,\n}) {\n  let getMatcherContactName;\n  let getMatcherContactList;\n  let getMatcherContactNameList;\n  if (contactMatcher && contactMatcher.ready) {\n    getMatcherContactList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher =>\n          `${matcher.name} | ${matcher.phoneNumbers[0].phoneType}`\n        );\n      }\n      return [];\n    };\n    getMatcherContactNameList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name);\n      }\n      return [];\n    };\n    getMatcherContactName = (phoneNumber) => {\n      const matcherNames = getMatcherContactNameList(phoneNumber);\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.join('&');\n      }\n      return null;\n    };\n  }\n\n  return {\n    replyToReceivers: (...args) => conversation.replyToReceivers(...args),\n    changeDefaultRecipient: (...args) => conversation.changeDefaultRecipient(...args),\n    changeMatchedNames: (...args) => conversation.changeMatchedNames(...args),\n    unloadConversation: () => conversation.unloadConversation(),\n    loadConversationById: id => conversation.loadConversationById(id),\n    updateMessageText: text => conversation.updateMessageText(text),\n    dateTimeFormatter,\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getMatcherContactName,\n    getMatcherContactList,\n    getMatcherContactNameList,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    goBack: () => {\n      routerInteraction.push('/messages');\n      messages.updateTypeFilter(messageTypes.text);\n    },\n  };\n}\n\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ConversationPage));\n"]}