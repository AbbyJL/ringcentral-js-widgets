{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","props","state","loading","replyToReceivers","text","conversation","formatPhone","formatNumber","phoneNumber","getRecipientName","recipient","formatDateTime","utcString","changeDefaultRecipient","id","conversationId","messageStore","syncConversation","then","loadConversationById","setState","unloadConversation","extensionNumber","contactMatcher","ready","matcherNames","dataMapping","name","regionSettings","areaCode","countryCode","dateTimeIntl","showSpinner","currentLocale","messages","recipients","sendButtonDisabled","propTypes","string","isRequired","instanceOf","bool","defaultProps","childContextTypes","func","mapStateToProps","locale","params","pushing"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport Conversation from 'ringcentral-integration/modules/Conversation';\nimport MessageStore from 'ringcentral-integration/modules/MessageStore';\nimport DateTimeIntl from 'ringcentral-integration/modules/DateTimeIntl';\nimport ContactMatcher from 'ringcentral-integration/modules/ContactMatcher';\n\nimport ConversationPanel from '../../components/ConversationPanel';\n\nclass ConversationPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n    this.replyToReceivers = (text) => {\n      this.props.conversation.replyToReceivers(text);\n    };\n  }\n\n  getChildContext() {\n    return {\n      formatPhone: phoneNumber => (this.formatNumber(phoneNumber)),\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n      formatDateTime: utcString => (this.formatDateTime(utcString)),\n      changeDefaultRecipient: phoneNumber => (this.changeDefaultRecipient(phoneNumber)),\n    };\n  }\n\n  componentDidMount() {\n    const id = this.props.conversationId;\n    this.props.messageStore.syncConversation(id).then(() => {\n      this.props.conversation.loadConversationById(id);\n      this.setState({\n        loading: false,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.conversation.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.contactMatcher && this.props.contactMatcher.ready) {\n      const matcherNames = this.props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames[0] && matcherNames[0].name) {\n        return matcherNames[0].name;\n      }\n      return this.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.formatNumber(phoneNumber);\n  }\n\n  changeDefaultRecipient(phoneNumber) {\n    this.props.conversation.changeDefaultRecipient(phoneNumber);\n  }\n\n  formatNumber(phoneNumber) {\n    const regionSettings = this.props.regionSettings;\n    return formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    });\n  }\n\n  formatDateTime(utcString) {\n    return this.props.dateTimeIntl.formatDateTime({\n      utcString,\n    });\n  }\n\n  render() {\n    const showSpinner = (\n      this.props.showSpinner ||\n      this.state.loading\n    );\n    return (\n      <ConversationPanel\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        recipients={this.props.recipients}\n        showSpinner={showSpinner}\n        replyToReceivers={this.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  conversation: PropTypes.instanceOf(Conversation).isRequired,\n  messageStore: PropTypes.instanceOf(MessageStore).isRequired,\n  dateTimeIntl: PropTypes.instanceOf(DateTimeIntl).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  recipients: ConversationPanel.propTypes.recipients,\n  contactMatcher: PropTypes.instanceOf(ContactMatcher),\n};\n\nConversationPage.defaultProps = {\n  contactMatcher: null,\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    conversationId: props.params.conversationId,\n    conversation: props.conversation,\n    regionSettings: props.regionSettings,\n    messageStore: props.messageStore,\n    sendButtonDisabled: props.conversation.pushing,\n    showSpinner: (\n      !props.dateTimeIntl.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.conversation.ready ||\n      !props.regionSettings.ready\n    ),\n    recipients: props.conversation.recipients,\n    messages: props.conversation.messages,\n  });\n}\n\nexport default connect(mapStateToProps)(ConversationPage);\n"]}