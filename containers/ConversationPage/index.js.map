{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","props","replyToReceivers","text","conversation","formatPhone","formatNumber","phoneNumber","getRecipientName","recipient","formatDateTime","utcString","changeDefaultRecipient","loadConversation","unloadConversation","extensionNumber","contactMatcher","ready","matcherNames","dataMapping","name","id","conversationId","loadConversationById","regionSettings","areaCode","countryCode","dateTimeIntl","currentLocale","messages","recipients","showSpinner","sendButtonDisabled","propTypes","string","isRequired","instanceOf","messageStore","bool","defaultProps","childContextTypes","func","mapStateToProps","state","locale","params","pushing"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport Conversation from 'ringcentral-integration/modules/Conversation';\nimport MessageStore from 'ringcentral-integration/modules/MessageStore';\nimport DateTimeIntl from 'ringcentral-integration/modules/DateTimeIntl';\nimport ContactMatcher from 'ringcentral-integration/modules/ContactMatcher';\n\nimport ConversationPanel from '../../components/ConversationPanel';\n\nclass ConversationPage extends Component {\n  constructor(props) {\n    super(props);\n    this.replyToReceivers = (text) => {\n      this.props.conversation.replyToReceivers(text);\n    };\n  }\n\n  getChildContext() {\n    return {\n      formatPhone: phoneNumber => (this.formatNumber(phoneNumber)),\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n      formatDateTime: utcString => (this.formatDateTime(utcString)),\n      changeDefaultRecipient: phoneNumber => (this.changeDefaultRecipient(phoneNumber)),\n    };\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n  }\n\n  componentWillUnmount() {\n    this.props.conversation.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.contactMatcher && this.props.contactMatcher.ready) {\n      const matcherNames = this.props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames[0] && matcherNames[0].name) {\n        return matcherNames[0].name;\n      }\n      return this.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.formatNumber(phoneNumber);\n  }\n\n  loadConversation() {\n    const id = this.props.conversationId;\n    this.props.conversation.loadConversationById(id);\n  }\n\n  changeDefaultRecipient(phoneNumber) {\n    this.props.conversation.changeDefaultRecipient(phoneNumber);\n  }\n\n  formatNumber(phoneNumber) {\n    const regionSettings = this.props.regionSettings;\n    return formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    });\n  }\n\n  formatDateTime(utcString) {\n    return this.props.dateTimeIntl.formatDateTime({\n      utcString,\n    });\n  }\n\n  render() {\n    return (\n      <ConversationPanel\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        recipients={this.props.recipients}\n        showSpinner={this.props.showSpinner}\n        replyToReceivers={this.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  conversation: PropTypes.instanceOf(Conversation).isRequired,\n  messageStore: PropTypes.instanceOf(MessageStore).isRequired,\n  dateTimeIntl: PropTypes.instanceOf(DateTimeIntl).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  recipients: ConversationPanel.propTypes.recipients,\n  contactMatcher: PropTypes.instanceOf(ContactMatcher),\n};\n\nConversationPage.defaultProps = {\n  contactMatcher: null,\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    conversationId: props.params.conversationId,\n    conversation: props.conversation,\n    regionSettings: props.regionSettings,\n    messageStore: props.messageStore,\n    sendButtonDisabled: props.conversation.pushing,\n    showSpinner: (\n      !props.dateTimeIntl.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.conversation.ready ||\n      !props.regionSettings.ready\n    ),\n    recipients: props.conversation.recipients,\n    messages: props.conversation.messages,\n  });\n}\n\nexport default connect(mapStateToProps)(ConversationPage);\n"]}