{"version":3,"sources":["containers/MessagesPage/index.js"],"names":["mapToProps","_","phone","brand","locale","messages","contactMatcher","dateTimeFormat","regionSettings","rolesAndPermissions","call","conversationLogger","connectivityMonitor","rateLimiter","messageStore","showTitle","enableContactFallback","showGroupNumberName","serviceFeatures","permissions","fullName","currentLocale","conversations","filteredConversations","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","searchInput","autoLog","typeFilter","textUnreadCounts","voiceUnreadCounts","readTextPermission","PagerReceiving","enabled","SMSReceiving","readVoicemailPermission","Voicemail","mapToFunctions","dialerUI","routerInteraction","composeText","contactSearch","showViewContact","dateTimeFormatter","formatDateTime","dialerRoute","onCreateContact","onLogConversation","isLoggedContact","onViewContact","conversationDetailRoute","composeTextRoute","contact","id","type","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","recipient","onClickToCall","fromType","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","options","logConversation","onSearchInputChange","e","updateSearchInput","currentTarget","value","showConversationDetail","conversationId","replace","readVoicemail","readMessages","markVoicemail","unreadMessage","unmarkVoicemail","unmarkMessages","updateTypeFilter","deleteMessage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport withPhone from '../../lib/withPhone';\nimport MessagesPanel from '../../components/MessagesPanel';\n\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    messages,\n    contactMatcher,\n    dateTimeFormat,\n    regionSettings,\n    rolesAndPermissions,\n    call,\n    conversationLogger,\n    connectivityMonitor,\n    rateLimiter,\n    messageStore,\n  },\n  showTitle = false,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n}) {\n  const { serviceFeatures, permissions } = rolesAndPermissions;\n  return ({\n    showTitle,\n    enableContactFallback,\n    showGroupNumberName,\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    conversations: messages.filteredConversations,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: (\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      permissions &&\n      permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      permissions &&\n      permissions.InternalSMS\n    ),\n    loggingMap: (conversationLogger && conversationLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      messages.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      dateTimeFormat.ready &&\n      regionSettings.ready &&\n      rolesAndPermissions.ready &&\n      connectivityMonitor.ready &&\n      rateLimiter.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!conversationLogger || conversationLogger.ready)\n    ),\n    searchInput: messages.searchInput,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n    typeFilter: messages.typeFilter,\n    textUnreadCounts: messageStore.textUnreadCounts,\n    voiceUnreadCounts: messageStore.voiceUnreadCounts,\n    readTextPermission: !!(\n      serviceFeatures && (\n        (\n          serviceFeatures.PagerReceiving &&\n          serviceFeatures.PagerReceiving.enabled\n        ) ||\n        (\n          serviceFeatures.SMSReceiving &&\n          serviceFeatures.SMSReceiving.enabled\n        )\n      )\n    ),\n    readVoicemailPermission: !!(\n      serviceFeatures && (\n        serviceFeatures.Voicemail &&\n        serviceFeatures.Voicemail.enabled\n      )\n    ),\n  });\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    messages,\n    messageStore,\n    conversationLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    routerInteraction,\n    composeText,\n    contactSearch,\n  },\n  showViewContact = true,\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  dialerRoute = '/dialer',\n  onCreateContact,\n  onLogConversation,\n  isLoggedContact,\n  onViewContact,\n  conversationDetailRoute = '/conversations/{conversationId}',\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: showViewContact ? (onViewContact || (({ contact: { id, type } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    })) : null,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          // for track router\n          messageStore.onClickToCall({ fromType: recipient.fromType });\n          dialerUI.call({ recipient });\n        }\n      } :\n      undefined,\n    onClickToSms: (contact, isDummyContact = false) => {\n      if (routerInteraction) {\n        routerInteraction.push(composeTextRoute);\n      }\n      // if contact autocomplete, if no match fill the number only\n      if (contact.name && contact.phoneNumber && isDummyContact) {\n        composeText.updateTypingToNumber(contact.name);\n        contactSearch.search({ searchString: contact.name });\n      } else {\n        composeText.addToNumber(contact);\n        if (composeText.typingToNumber === contact.phoneNumber) {\n          composeText.cleanTypingToNumber();\n        }\n      }\n      // for track\n      messageStore.onClickToSMS();\n    },\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    onSearchInputChange: (e) => {\n      messages.updateSearchInput(e.currentTarget.value);\n    },\n    showConversationDetail: (conversationId) => {\n      routerInteraction.push(\n        conversationDetailRoute.replace('{conversationId}', conversationId)\n      );\n    },\n    readVoicemail: conversationId =>\n      messageStore.readMessages(conversationId),\n    markVoicemail: conversationId =>\n      messageStore.unreadMessage(conversationId),\n    unmarkVoicemail: (conversationId) => {\n      messageStore.readMessages(conversationId);\n      messageStore.unmarkMessages();\n    },\n    composeText: () => routerInteraction.push(composeTextRoute),\n    updateTypeFilter: type => messages.updateTypeFilter(type),\n    deleteMessage: (conversationId) => {\n      messageStore.deleteMessage(conversationId);\n    },\n  };\n}\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(MessagesPanel));\n"]}