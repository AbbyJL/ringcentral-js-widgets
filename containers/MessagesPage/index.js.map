{"version":3,"sources":["containers/MessagesPage/index.js"],"names":["mapToProps","_","phone","brand","locale","messages","contactMatcher","dateTimeFormat","regionSettings","rolesAndPermissions","call","conversationLogger","connectivityMonitor","rateLimiter","showTitle","enableContactFallback","fullName","currentLocale","conversations","filteredConversations","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","searchInput","autoLog","mapToFunctions","routerInteraction","dateTimeFormatter","formatDateTime","dialerRoute","onCreateContact","onLogConversation","isLoggedContact","onViewContact","conversationDetailRoute","composeTextRoute","contact","id","type","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","onToNumberChange","onCall","redirect","options","logConversation","onSearchInputChange","e","updateSearchInput","currentTarget","value","showConversationDetail","conversationId","replace","composeText"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport withPhone from '../../lib/withPhone';\nimport MessagesPanel from '../../components/MessagesPanel';\n\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    messages,\n    contactMatcher,\n    dateTimeFormat,\n    regionSettings,\n    rolesAndPermissions,\n    call,\n    conversationLogger,\n    connectivityMonitor,\n    rateLimiter,\n  },\n  showTitle = false,\n  enableContactFallback = false,\n}) {\n  return ({\n    showTitle,\n    enableContactFallback,\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    conversations: messages.filteredConversations,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: (\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (conversationLogger && conversationLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      messages.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      dateTimeFormat.ready &&\n      regionSettings.ready &&\n      rolesAndPermissions.ready &&\n      connectivityMonitor.ready &&\n      rateLimiter.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!conversationLogger || conversationLogger.ready)\n    ),\n    searchInput: messages.searchInput,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n  });\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    messages,\n    conversationLogger,\n    contactMatcher,\n    call,\n    routerInteraction,\n  },\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  dialerRoute = '/dialer',\n  onCreateContact,\n  onLogConversation,\n  isLoggedContact,\n  onViewContact,\n  conversationDetailRoute = '/conversations/{conversationId}',\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact }) => {\n      const id = contact.id;\n      const type = contact.type;\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onCreateContact: onCreateContact ?\n    async ({ phoneNumber, name, entityType }) => {\n      const hasMatchNumber = await contactMatcher.hasMatchNumber({\n        phoneNumber,\n        ignoreCache: true\n      });\n      // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n      if (!hasMatchNumber) {\n        await onCreateContact({ phoneNumber, name, entityType });\n        await contactMatcher.forceMatchNumber({ phoneNumber });\n      }\n    } :\n    undefined,\n    onClickToDial: call ?\n    (phoneNumber) => {\n      if (call.isIdle) {\n        routerInteraction.push(dialerRoute);\n        call.onToNumberChange(phoneNumber);\n        call.onCall();\n      }\n    } :\n    undefined,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    onSearchInputChange: (e) => {\n      messages.updateSearchInput(e.currentTarget.value);\n    },\n    showConversationDetail(conversationId) {\n      routerInteraction.push(\n        conversationDetailRoute.replace('{conversationId}', conversationId)\n      );\n    },\n    composeText: () => routerInteraction.push(composeTextRoute),\n  };\n}\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(MessagesPanel));\n"]}