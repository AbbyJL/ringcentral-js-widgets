{"version":3,"sources":["containers/MessagesPage/index.js"],"names":["MessageSpiner","spinerContainer","MessagesPage","props","onSearchChange","e","value","currentTarget","updateSearchingString","searchMessage","bind","getMessageRecipientNames","message","recipients","length","getRecipientsList","map","recipient","phoneNumber","extensionNumber","contactMatcher","ready","matcherNames","dataMapping","name","formatPhone","searchText","searchNumber","recipientName","indexOf","toLowerCase","searchString","searchingString","updateSearchResults","trim","replace","searchTextResults","searchMessagesText","reverse","searchContactresults","allMessages","filter","isMatchRecipients","results","searchMap","addSearchResultToResult","conversationId","push","forEach","searchingResults","getString","formatDateTime","messages","loadNextPageMessages","isLoadingNextPage","content","renderMessageList","showSpinner","root","renderContent","propTypes","func","isRequired","bool","string","instanceOf","defaultProps","mapStateToProps","state","currentLocale","locale","messageStore","conversations","extensionInfo","dateTimeIntl","loading","lastUpdatedAt","mapDispatchToProps","dispatch","utcString","areaCode","regionSettings","countryCode","myExtensionNumber"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { getRecipients } from 'ringcentral-integration/lib/messageHelper';\n\nimport ContactMatcher from 'ringcentral-integration/modules/ContactMatcher';\n\nimport Spinner from '../../components/Spinner';\nimport Panel from '../../components/Panel';\nimport Header from '../../components/Header';\n\nimport MessageList from '../../components/MessageList';\nimport SearchInput from '../../components/SearchInput';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction MessageSpiner() {\n  return (\n    <div className={styles.spinerContainer}>\n      <Spinner />\n    </div>\n  );\n}\n\nclass MessagesPage extends Component {\n  constructor(props) {\n    super(props);\n    this.onSearchChange = (e) => {\n      const value = e.currentTarget.value;\n      this.props.updateSearchingString(value);\n    };\n\n    this.searchMessage = this.searchMessage.bind(this);\n    this.getMessageRecipientNames = this.getMessageRecipientNames.bind(this);\n  }\n\n  getMessageRecipientNames(message) {\n    let recipients = message.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this.props.getRecipientsList(message);\n    }\n    return recipients.map((recipient) => {\n      const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n      if (phoneNumber && this.props.contactMatcher && this.props.contactMatcher.ready) {\n        const matcherNames = this.props.contactMatcher.dataMapping[phoneNumber];\n        if (matcherNames && matcherNames[0]) {\n          return matcherNames[0].name;\n        }\n        return this.props.formatPhone(phoneNumber);\n      }\n      if (recipient.name) {\n        return recipient.name;\n      }\n      return this.props.formatPhone(phoneNumber);\n    });\n  }\n\n  isMatchRecipients(message, searchText, searchNumber) {\n    const recipients = this.props.getRecipientsList(message);\n    for (const recipient of recipients) {\n      const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n      let recipientName = null;\n      if (phoneNumber) {\n        if (searchNumber && searchNumber.length > 0 && phoneNumber.indexOf(searchNumber) >= 0) {\n          return true;\n        }\n        if (this.props.contactMatcher && this.props.contactMatcher.ready) {\n          const matcherNames = this.props.contactMatcher.dataMapping[phoneNumber];\n          if (\n            matcherNames && matcherNames[0] && matcherNames[0].name\n          ) {\n            recipientName = matcherNames[0].name;\n          } else {\n            recipientName = phoneNumber;\n          }\n        }\n      }\n      if (!recipientName && recipient.name) {\n        recipientName = recipient.name;\n      }\n      if (recipientName && recipientName.toLowerCase().indexOf(searchText) >= 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  searchMessage() {\n    const searchString = this.props.searchingString;\n    if (searchString.length < 3) {\n      this.props.updateSearchResults([]);\n      return;\n    }\n    const searchText = searchString.toLowerCase().trim();\n    let searchNumber = searchString.replace(/[^\\d]/g, '');\n    if (searchString.length !== searchNumber.length && searchNumber.length < 2) {\n      searchNumber = null;\n    }\n    const searchTextResults = this.props.searchMessagesText(searchText).reverse();\n    const searchContactresults = this.props.allMessages.filter(message =>\n      this.isMatchRecipients(message, searchText, searchNumber)\n    ).reverse();\n    const results = [];\n    const searchMap = {};\n    const addSearchResultToResult = (message) => {\n      if (searchMap[message.conversationId]) {\n        return;\n      }\n      searchMap[message.conversationId] = 1;\n      results.push(message);\n    };\n    searchContactresults.forEach(addSearchResultToResult);\n    searchTextResults.forEach(addSearchResultToResult);\n    this.props.updateSearchResults(results);\n  }\n\n  renderMessageList() {\n    if (this.props.searchingString.length >= 3) {\n      return (\n        <MessageList\n          messages={this.props.searchingResults}\n          loadNextPageMessages={() => null}\n          loading={false}\n          placeholder={i18n.getString('noSearchResults')}\n          formatDateTime={this.props.formatDateTime}\n          getMessageRecipientNames={this.getMessageRecipientNames}\n        />\n      );\n    }\n    return (\n      <MessageList\n        messages={this.props.messages}\n        loadNextPageMessages={this.props.loadNextPageMessages}\n        loading={this.props.isLoadingNextPage}\n        placeholder={i18n.getString('noMessages')}\n        formatDateTime={this.props.formatDateTime}\n        getMessageRecipientNames={this.getMessageRecipientNames}\n      />\n    );\n  }\n\n  renderContent() {\n    return (\n      <div className={styles.content}>\n        <SearchInput\n          value={this.props.searchingString}\n          onChange={this.onSearchChange}\n          onKeyUp={this.searchMessage}\n          maxLength={30}\n          placeholder={i18n.getString('search')}\n        />\n        <Panel>\n          {this.renderMessageList()}\n        </Panel>\n      </div>\n    );\n  }\n\n  render() {\n    const showSpinner = this.props.showSpinner;\n    return (\n      <div className={styles.root}>\n        <Header>\n          {i18n.getString('title')}\n        </Header>\n        {\n          showSpinner ? <MessageSpiner /> : this.renderContent()\n        }\n      </div>\n    );\n  }\n}\n\nMessagesPage.propTypes = {\n  messages: MessageList.propTypes.messages,\n  allMessages: MessageList.propTypes.messages,\n  searchingResults: MessageList.propTypes.messages,\n  loadNextPageMessages: PropTypes.func.isRequired,\n  updateSearchingString: PropTypes.func.isRequired,\n  isLoadingNextPage: PropTypes.bool,\n  showSpinner: PropTypes.bool.isRequired,\n  searchingString: PropTypes.string.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  getRecipientsList: PropTypes.func.isRequired,\n  searchMessagesText: PropTypes.func.isRequired,\n  updateSearchResults: PropTypes.func.isRequired,\n  contactMatcher: PropTypes.instanceOf(ContactMatcher),\n};\n\nMessagesPage.defaultProps = {\n  contactMatcher: null,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    messages: props.messages.messages,\n    allMessages: props.messageStore.conversations,\n    showSpinner: (\n      !props.messages.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.extensionInfo.ready ||\n      !props.dateTimeIntl.ready\n    ),\n    isLoadingNextPage: props.messages.loading,\n    lastUpdatedAt: props.messages.lastUpdatedAt,\n    searchingString: props.messages.searchingString,\n    searchingResults: props.messages.searchingResults,\n  });\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    loadNextPageMessages: props.messages.loadNextPageMessages,\n    updateSearchingString: props.messages.updateSearchingString,\n    updateSearchResults: props.messages.updateSearchResults,\n    formatDateTime: utcString => props.dateTimeIntl.formatDateTime({\n      utcString\n    }),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: props.regionSettings.areaCode,\n      countryCode: props.regionSettings.countryCode,\n    }),\n    getRecipientsList: message => getRecipients({\n      message,\n      myExtensionNumber: props.extensionInfo.extensionNumber,\n    }),\n    searchMessagesText: searchText =>\n      props.messageStore.searchMessagesText(searchText),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesPage);\n"]}