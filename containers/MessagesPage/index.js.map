{"version":3,"sources":["containers/MessagesPage/index.js"],"names":["mapToProps","_","phone","brand","locale","messages","contactMatcher","dateTimeFormat","regionSettings","rolesAndPermissions","call","conversationLogger","connectivityMonitor","rateLimiter","messageStore","showTitle","enableContactFallback","showGroupNumberName","fullName","currentLocale","conversations","filteredConversations","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","searchInput","autoLog","typeFilter","textUnreadCounts","voiceUnreadCounts","mapToFunctions","dialerUI","routerInteraction","dateTimeFormatter","formatDateTime","dialerRoute","onCreateContact","onLogConversation","isLoggedContact","onViewContact","conversationDetailRoute","composeTextRoute","contact","id","type","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","recipient","redirect","options","logConversation","onSearchInputChange","e","updateSearchInput","currentTarget","value","showConversationDetail","conversationId","replace","readVoicemail","readMessages","composeText","updateTypeFilter","deleteMessage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport withPhone from '../../lib/withPhone';\nimport MessagesPanel from '../../components/MessagesPanel';\n\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    messages,\n    contactMatcher,\n    dateTimeFormat,\n    regionSettings,\n    rolesAndPermissions,\n    call,\n    conversationLogger,\n    connectivityMonitor,\n    rateLimiter,\n    messageStore,\n  },\n  showTitle = false,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n}) {\n  return ({\n    showTitle,\n    enableContactFallback,\n    showGroupNumberName,\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    conversations: messages.filteredConversations,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: (\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (conversationLogger && conversationLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      messages.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      dateTimeFormat.ready &&\n      regionSettings.ready &&\n      rolesAndPermissions.ready &&\n      connectivityMonitor.ready &&\n      rateLimiter.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!conversationLogger || conversationLogger.ready)\n    ),\n    searchInput: messages.searchInput,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n    typeFilter: messages.typeFilter,\n    textUnreadCounts: messageStore.textUnreadCounts,\n    voiceUnreadCounts: messageStore.voiceUnreadCounts,\n  });\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    messages,\n    messageStore,\n    conversationLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    routerInteraction,\n  },\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  dialerRoute = '/dialer',\n  onCreateContact,\n  onLogConversation,\n  isLoggedContact,\n  onViewContact,\n  conversationDetailRoute = '/conversations/{conversationId}',\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact: { id, type } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    onSearchInputChange: (e) => {\n      messages.updateSearchInput(e.currentTarget.value);\n    },\n    showConversationDetail: (conversationId) => {\n      routerInteraction.push(\n        conversationDetailRoute.replace('{conversationId}', conversationId)\n      );\n    },\n    readVoicemail: (conversationId) => {\n      messageStore.readMessages(conversationId);\n    },\n    composeText: () => routerInteraction.push(composeTextRoute),\n    updateTypeFilter: type => messages.updateTypeFilter(type),\n    deleteMessage: (conversationId) => {\n      messageStore.deleteMessage(conversationId);\n    },\n  };\n}\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(MessagesPanel));\n"]}