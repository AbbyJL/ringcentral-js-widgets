{"version":3,"sources":["containers/DialerPage/index.js"],"names":["mapToProps","_","phone","call","dialerUI","callingSettings","contactSearch","connectivityMonitor","locale","rateLimiter","webphone","audioSettings","dialButtonMuted","isWebphoneMode","callingMode","waitingWebphoneConnected","connecting","webphoneDisconnected","connected","audioNotEnabled","userMedia","currentLocale","callButtonDisabled","isIdle","connectivity","throttling","toNumber","toNumberField","recipient","searchContactList","sortedResult","fromNumbers","fromNumber","showSpinner","ready","dialButtonVolume","mapToFunctions","regionSettings","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","onToNumberChange","setToNumberField","value","clearToNumber","clearToNumberField","onCallButtonClick","changeFromNumber","updateFromNumber","formatPhone","phoneNumber","areaCode","countryCode","setRecipient","clearRecipient","searchContact","searchString","debouncedSearch","DialerPage","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\n\nimport DialerPanel from '../../components/DialerPanel';\nimport withPhone from '../../lib/withPhone';\n\nfunction mapToProps(_, {\n  phone: {\n    call,\n    dialerUI,\n    callingSettings,\n    contactSearch,\n    connectivityMonitor,\n    locale,\n    rateLimiter,\n    webphone,\n    audioSettings,\n  },\n  dialButtonMuted = false,\n}) {\n  const isWebphoneMode = (callingSettings.callingMode === callingModes.webphone);\n  const waitingWebphoneConnected = (isWebphoneMode && webphone && webphone.connecting);\n  const webphoneDisconnected = (isWebphoneMode && webphone && !webphone.connected);\n  const audioNotEnabled = isWebphoneMode && audioSettings && !audioSettings.userMedia;\n  return {\n    currentLocale: locale.currentLocale,\n    callingMode: callingSettings.callingMode,\n    isWebphoneMode,\n    callButtonDisabled: (\n      !call.isIdle\n      || !connectivityMonitor.connectivity\n      || rateLimiter.throttling\n      || webphoneDisconnected\n      || audioNotEnabled\n    ),\n    toNumber: dialerUI.toNumberField,\n    recipient: dialerUI.recipient,\n    searchContactList: contactSearch ? contactSearch.sortedResult : [],\n    fromNumbers: callingSettings.fromNumbers,\n    fromNumber: callingSettings.fromNumber,\n    showSpinner: !(\n      call.ready &&\n      callingSettings.ready &&\n      locale.ready &&\n      connectivityMonitor.ready &&\n      (!audioSettings || audioSettings.ready) &&\n      (!isWebphoneMode || !webphone || !waitingWebphoneConnected)\n    ),\n    dialButtonVolume: audioSettings ? audioSettings.dialButtonVolume : 1,\n    // If audioSettings is used, then use values from audioSettings module\n    dialButtonMuted: audioSettings ? audioSettings.dialButtonMuted : dialButtonMuted,\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    callingSettings,\n    regionSettings,\n    contactSearch,\n    dialerUI,\n  },\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    onToNumberChange: value => (\n      dialerUI.setToNumberField(value)\n    ),\n    clearToNumber: () => dialerUI.clearToNumberField(),\n    onCallButtonClick: () => {\n      dialerUI.onCallButtonClick();\n    },\n    changeFromNumber: (...args) => callingSettings.updateFromNumber(...args),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings && regionSettings.areaCode,\n      countryCode: regionSettings && regionSettings.countryCode,\n    }),\n    setRecipient: recipient => dialerUI.setRecipient(recipient),\n    clearRecipient: () => dialerUI.clearRecipient(),\n    searchContact: (searchString) => {\n      if (!contactSearch) {\n        return;\n      }\n      contactSearch.debouncedSearch({ searchString });\n    },\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  };\n}\n\nconst DialerPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(DialerPanel));\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  DialerPage as default,\n};\n"]}