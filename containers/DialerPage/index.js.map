{"version":3,"sources":["containers/DialerPage/index.js"],"names":["mapToProps","_","phone","call","dialerUI","callingSettings","contactSearch","connectivityMonitor","locale","rateLimiter","webphone","audioSettings","isWebphoneMode","callingMode","waitingWebphoneConnected","connecting","webphoneDisconnected","connected","currentLocale","callButtonDisabled","isIdle","connectivity","throttling","toNumber","toNumberField","recipient","searchContactList","sortedResult","fromNumbers","fromNumber","showSpinner","ready","dialButtonVolume","dialButtonMuted","mapToFunctions","regionSettings","phoneTypeRenderer","onToNumberChange","setToNumberField","value","clearToNumber","clearToNumberField","onCallButtonClick","changeFromNumber","updateFromNumber","formatPhone","phoneNumber","areaCode","countryCode","setRecipient","clearRecipient","searchContact","searchString","debouncedSearch","DialerPage","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\n\nimport DialerPanel from '../../components/DialerPanel';\nimport withPhone from '../../lib/withPhone';\n\nfunction mapToProps(_, {\n  phone: {\n    call,\n    dialerUI,\n    callingSettings,\n    contactSearch,\n    connectivityMonitor,\n    locale,\n    rateLimiter,\n    webphone,\n    audioSettings,\n  }\n}) {\n  const isWebphoneMode = (callingSettings.callingMode === callingModes.webphone);\n  const waitingWebphoneConnected = (isWebphoneMode && webphone && webphone.connecting);\n  const webphoneDisconnected = (isWebphoneMode && webphone && !webphone.connected);\n  return {\n    currentLocale: locale.currentLocale,\n    callingMode: callingSettings.callingMode,\n    isWebphoneMode,\n    callButtonDisabled: (\n      !call.isIdle\n      || !connectivityMonitor.connectivity\n      || rateLimiter.throttling\n      || webphoneDisconnected\n    ),\n    toNumber: dialerUI.toNumberField,\n    recipient: dialerUI.recipient,\n    searchContactList: contactSearch ? contactSearch.sortedResult : [],\n    fromNumbers: callingSettings.fromNumbers,\n    fromNumber: callingSettings.fromNumber,\n    showSpinner: !(\n      call.ready &&\n      callingSettings.ready &&\n      locale.ready &&\n      connectivityMonitor.ready &&\n      (!isWebphoneMode || !webphone || !waitingWebphoneConnected)\n    ),\n    dialButtonVolume: audioSettings ? audioSettings.dialButtonVolume : 1,\n    dialButtonMuted: audioSettings ? audioSettings.dialButtonMuted : 1,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callingSettings,\n    regionSettings,\n    contactSearch,\n    dialerUI,\n  },\n  phoneTypeRenderer,\n}) {\n  return {\n    onToNumberChange: value => (\n      dialerUI.setToNumberField(value)\n    ),\n    clearToNumber: () => dialerUI.clearToNumberField(),\n    onCallButtonClick: () => {\n      dialerUI.onCallButtonClick();\n    },\n    changeFromNumber: (...args) => callingSettings.updateFromNumber(...args),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings && regionSettings.areaCode,\n      countryCode: regionSettings && regionSettings.countryCode,\n    }),\n    setRecipient: recipient => dialerUI.setRecipient(recipient),\n    clearRecipient: () => dialerUI.clearRecipient(),\n    searchContact: (searchString) => {\n      if (!contactSearch) {\n        return;\n      }\n      contactSearch.debouncedSearch({ searchString });\n    },\n    phoneTypeRenderer,\n  };\n}\n\nconst DialerPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(DialerPanel));\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  DialerPage as default,\n};\n"]}