{"version":3,"sources":["containers/CallHistoryPage/index.js"],"names":["mapToProps","_","phone","locale","brand","callHistory","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","call","composeText","rolesAndPermissions","enableContactFallback","fullName","title","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","contactMatcher","dialerUI","routerInteraction","contactSearch","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","onLogCall","isLoggedContact","dialerRoute","composeTextRoute","onViewContact","contact","type","id","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","logCall","CallsPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport withPhone from '../../lib/withPhone';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    brand,\n    callHistory,\n    regionSettings,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    callLogger,\n    call,\n    composeText,\n    rolesAndPermissions,\n  },\n  enableContactFallback = false,\n}) {\n  return {\n    enableContactFallback,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callHistory.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    callLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    composeText,\n    routerInteraction,\n    contactSearch,\n    callHistory,\n  },\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  onLogCall,\n  isLoggedContact,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  onViewContact,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact: { type, id } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n          callHistory.onClickToCall();\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n        callHistory.onClickToSMS();\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n  };\n}\n\nconst CallsPage = withPhone(connect(mapToProps, mapToFunctions)(CallsPanel));\n\nexport default CallsPage;\n"]}