{"version":3,"sources":["containers/CallHistoryPage/index.js"],"names":["mapToProps","_","locale","brand","callHistory","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","call","composeText","rolesAndPermissions","enableContactFallback","fullName","title","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","onViewContact","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","contactMatcher","onLogCall","isLoggedContact","router","dialerRoute","composeTextRoute","contactSearch","phoneNumber","contact","hasMatchNumber","ignoreCache","undefined","name","entityType","forceMatchNumber","onClickToDial","push","onToNumberChange","onCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","redirect","logCall","CallsPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  locale,\n  brand,\n  callHistory,\n  regionSettings,\n  connectivityMonitor,\n  rateLimiter,\n  dateTimeFormat,\n  callLogger,\n  call,\n  composeText,\n  rolesAndPermissions,\n  enableContactFallback = false,\n}) {\n  return {\n    enableContactFallback,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callHistory.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\nfunction mapToFunctions(_, {\n  dateTimeFormat,\n  onViewContact,\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  callLogger,\n  contactMatcher,\n  onLogCall,\n  isLoggedContact,\n  call,\n  composeText,\n  router,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  contactSearch,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: call ?\n      (phoneNumber) => {\n        if (call.isIdle) {\n          router.push(dialerRoute);\n          call.onToNumberChange(phoneNumber);\n          call.onCall();\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n  };\n}\n\nconst CallsPage = connect(mapToProps, mapToFunctions)(CallsPanel);\n\nexport default CallsPage;\n"]}