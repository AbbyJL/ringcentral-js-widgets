{"version":3,"sources":["containers/CallMonitorPage/index.js"],"names":["mapToProps","_","locale","callMonitor","regionSettings","connectivityMonitor","dateTimeFormat","callLogger","active","title","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","loggingMap","showSpinner","ready","mapToFunctions","onViewContact","dateTimeFormatter","formatDateTime","utcTimestamp","onLogCall","isLoggedContact","router","composeTextRoute","composeText","call","contact","redirect","logCall","onClickToSms","history","push","addToNumber","typingToNumber","phoneNumber","cleanTypingToNumber","undefined","CallMonitorPage"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAOG;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,WAKC,QALDA,WAKC;AAAA,MAJDC,cAIC,QAJDA,cAIC;AAAA,MAHDC,mBAGC,QAHDA,mBAGC;AAAA,MAFDC,cAEC,QAFDA,cAEC;AAAA,MADDC,UACC,QADDA,UACC;;AACD,SAAO;AACLC,YAAQ,IADH;AAELC,WAAO,eAAKC,SAAL,CAAe,OAAf,EAAwBR,OAAOS,aAA/B,CAFF;AAGLA,mBAAeT,OAAOS,aAHjB;AAILC,WAAOT,YAAYS,KAJd;AAKLC,cAAUT,eAAeS,QALpB;AAMLC,iBAAaV,eAAeU,WANvB;AAOLC,kBAAc,CAACV,oBAAoBW,YAP9B;AAQLC,gBAAaV,cAAcA,WAAWU,UARjC;AASLC,iBAAa,EACXhB,OAAOiB,KAAP,IACAhB,YAAYgB,KADZ,IAEAf,eAAee,KAFf,IAGAd,oBAAoBc,KAHpB,IAIAb,eAAea,KAJf,KAKC,CAACZ,UAAD,IAAeA,WAAWY,KAL3B,CADW;AATR,GAAP;AAkBD;AACD,SAASC,cAAT,CAAwBnB,CAAxB,SAYG;AAAA;;AAAA,MAXDK,cAWC,SAXDA,cAWC;AAAA,MAVDe,aAUC,SAVDA,aAUC;AAAA,oCATDC,iBASC;AAAA,MATDA,iBASC,yCATmB;AAAA,WAAgBhB,eAAeiB,cAAf,CAA8B;AAChEC;AADgE,KAA9B,CAAhB;AAAA,GASnB;AAAA,MANDjB,UAMC,SANDA,UAMC;AAAA,MALDkB,SAKC,SALDA,SAKC;AAAA,MAJDC,eAIC,SAJDA,eAIC;AAAA,MAHDC,MAGC,SAHDA,MAGC;AAAA,oCAFDC,gBAEC;AAAA,MAFDA,gBAEC,yCAFkB,cAElB;AAAA,MADDC,WACC,SADDA,WACC;;AACD,SAAO;AACLP,wCADK;AAELD,gCAFK;AAGLK,oCAHK;AAILD,eAAWA,aACVlB;AAAA,6EAAe;AAAA,YAASuB,IAAT,SAASA,IAAT;AAAA,YAAeC,OAAf,SAAeA,OAAf;AAAA,mCAAwBC,QAAxB;AAAA,YAAwBA,QAAxB,kCAAmC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACRzB,WAAW0B,OAAX,CAAmB;AACvBH,4BADuB;AAEvBC,kCAFuB;AAGvBC;AAHuB,iBAAnB,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAf;;AAAA;AAAA;AAAA;AAAA,OALI;AAYLE,kBAAcL;AAAA,6EACZ,kBAAOE,OAAP;AAAA;AAAA;AAAA;AAAA;AACE,oBAAIJ,MAAJ,EAAY;AACVA,yBAAOQ,OAAP,CAAeC,IAAf,CAAoBR,gBAApB;AACD;AACDC,4BAAYQ,WAAZ,CAAwBN,OAAxB;AACA,oBAAIF,YAAYS,cAAZ,KAA+BP,QAAQQ,WAA3C,EAAwD;AACtDV,8BAAYW,mBAAZ;AACD;;AAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY;;AAAA;AAAA;AAAA;AAAA,UAUZC;AAtBG,GAAP;AAwBD;;AAED,IAAMC,kBAAkB,yBAAQ1C,UAAR,EAAoBoB,cAApB,uBAAxB;;kBAEesB,e","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  locale,\n  callMonitor,\n  regionSettings,\n  connectivityMonitor,\n  dateTimeFormat,\n  callLogger,\n}) {\n  return {\n    active: true,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callMonitor.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity,\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      callMonitor.ready &&\n      regionSettings.ready &&\n      connectivityMonitor.ready &&\n      dateTimeFormat.ready &&\n      (!callLogger || callLogger.ready)\n    ),\n  };\n}\nfunction mapToFunctions(_, {\n  dateTimeFormat,\n  onViewContact,\n  dateTimeFormatter = utcTimestamp => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  callLogger,\n  onLogCall,\n  isLoggedContact,\n  router,\n  composeTextRoute = '/composeText',\n  composeText,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onClickToSms: composeText ?\n      async (contact) => {\n        if (router) {\n          router.history.push(composeTextRoute);\n        }\n        composeText.addToNumber(contact);\n        if (composeText.typingToNumber === contact.phoneNumber) {\n          composeText.cleanTypingToNumber();\n        }\n      } :\n      undefined,\n  };\n}\n\nconst CallMonitorPage = connect(mapToProps, mapToFunctions)(CallsPanel);\n\nexport default CallMonitorPage;\n"]}