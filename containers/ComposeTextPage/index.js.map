{"version":3,"sources":["containers/ComposeTextPage/index.js"],"names":["mapToProps","_","phone","composeText","connectivityMonitor","contactSearch","locale","messageSender","rateLimiter","rolesAndPermissions","brand","fullName","currentLocale","sendButtonDisabled","ready","idle","messageText","length","toNumbers","typingToNumber","connectivity","throttling","senderNumbers","senderNumbersList","senderNumber","outboundSMS","permissions","OutboundSMS","searchContactList","sortedResult","showSpinner","mapToFunctions","messageStore","regionSettings","routerInteraction","formatContactPhone","phoneNumber","areaCode","countryCode","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","send","timeout","setTimeout","currentPath","alertMessageSending","clearTimeout","then","responses","dismissMessageSending","pushMessages","conversationId","conversation","id","push","clean","formatPhone","searchContact","debouncedSearch","searchString","updateSenderNumber","updateTypingToNumber","cleanTypingToNumber","addToNumber","removeToNumber","updateMessageText","ComposeTextPage","ComposeTextPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ComposeTextPanel from '../../components/ComposeTextPanel';\nimport withPhone from '../../lib/withPhone';\n\nfunction mapToProps(_, {\n  phone: {\n    composeText,\n    connectivityMonitor,\n    contactSearch,\n    locale,\n    messageSender,\n    rateLimiter,\n    rolesAndPermissions,\n    brand\n  },\n}) {\n  return {\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    sendButtonDisabled: (\n      !(composeText.ready && messageSender.idle) ||\n      (composeText.messageText.length === 0) ||\n      (\n        composeText.toNumbers.length === 0 &&\n        composeText.typingToNumber.length === 0\n      ) ||\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    senderNumbers: messageSender.senderNumbersList,\n    senderNumber: composeText.senderNumber,\n    typingToNumber: composeText.typingToNumber,\n    toNumbers: composeText.toNumbers,\n    messageText: composeText.messageText,\n    outboundSMS: rolesAndPermissions.permissions.OutboundSMS,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: !(\n      composeText.ready &&\n      locale.ready &&\n      messageSender.ready &&\n      rolesAndPermissions.ready &&\n      contactSearch.ready\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    composeText,\n    contactSearch,\n    messageStore,\n    regionSettings,\n    routerInteraction,\n  },\n  formatContactPhone = phoneNumber => formatNumber({\n    phoneNumber,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n  }),\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    send: () => {\n      this.timeout = setTimeout(() => {\n        if (routerInteraction.currentPath === '/composeText') {\n          composeText.alertMessageSending();\n        }\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n      }, 10000);\n      composeText.send().then((responses) => {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n        composeText.dismissMessageSending();\n        if (!responses || responses.length === 0) {\n          return null;\n        }\n        messageStore.pushMessages(responses);\n        if (responses.length === 1) {\n          const conversationId =\n            responses[0] && responses[0].conversation && responses[0].conversation.id;\n          if (!conversationId) {\n            return null;\n          }\n          routerInteraction.push(`/conversations/${conversationId}`);\n        } else {\n          routerInteraction.push('/messages');\n        }\n        composeText.clean();\n        return null;\n      });\n    },\n    formatPhone: formatContactPhone,\n    formatContactPhone,\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    updateSenderNumber: ({ phoneNumber }) => composeText.updateSenderNumber(phoneNumber),\n    updateTypingToNumber: (...args) => composeText.updateTypingToNumber(...args),\n    cleanTypingToNumber: (...args) => composeText.cleanTypingToNumber(...args),\n    addToNumber: (...args) => composeText.addToNumber(...args),\n    removeToNumber: (...args) => composeText.removeToNumber(...args),\n    updateMessageText: (...args) => composeText.updateMessageText(...args),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  };\n}\n\nconst ComposeTextPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(ComposeTextPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ComposeTextPage as default,\n};\n"]}