{"version":3,"sources":["containers/IncomingCallPage/index.js"],"names":["IncomingCallPage","props","answer","session","id","reject","toVoiceMail","replyWithMessage","message","toggleMinimized","answerAndEnd","hangup","activeSessionId","answerAndHold","onHold","state","selectedMatcherIndex","avatarUrl","hasOtherActiveCall","onSelectMatcherName","option","nameMatches","findIndex","match","setState","contact","updateSessionMatchedContact","getAvatarUrl","then","_mounted","_updateAvatarAndMatchIndex","nextProps","contactMatch","active","minimized","phoneNumber","direction","outbound","to","from","fallbackUserName","inbound","getString","currentLocale","formatPhone","areaCode","countryCode","forwardingNumbers","onForward","brand","showContactDisplayPlaceholder","sourceIcons","children","propTypes","shape","string","startTime","number","isOnMute","bool","isOnHold","isOnRecord","object","isRequired","func","node","array","defaultProps","undefined","mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","forwardingNumber","currentSession","ringSession","contactMapping","dataMapping","fromMatches","toMatches","fullName","mapToFunctions","sessionId","forwardNumber","forward","hold","IncomingCallContainer"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport callDirections from 'ringcentral-integration/enums/callDirections';\n\nimport IncomingCallPanel from '../../components/IncomingCallPanel';\nimport withPhone from '../../lib/withPhone';\n\nimport i18n from './i18n';\n\nclass IncomingCallPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMatcherIndex: 0,\n      avatarUrl: null,\n      hasOtherActiveCall: false,\n    };\n\n    this.onSelectMatcherName = (option) => {\n      const nameMatches = this.props.nameMatches || [];\n      let selectedMatcherIndex = nameMatches.findIndex(\n        match => match.id === option.id\n      );\n      if (selectedMatcherIndex < 0) {\n        selectedMatcherIndex = 0;\n      }\n      this.setState({\n        selectedMatcherIndex,\n        avatarUrl: null,\n      });\n      const contact = nameMatches[selectedMatcherIndex];\n      if (contact) {\n        this.props.updateSessionMatchedContact(this.props.session.id, contact);\n        this.props.getAvatarUrl(contact).then((avatarUrl) => {\n          this.setState({ avatarUrl });\n        });\n      }\n    };\n  }\n\n  answer = () => this.props.answer(this.props.session.id)\n  reject = () => this.props.reject(this.props.session.id);\n  toVoiceMail = () => this.props.toVoiceMail(this.props.session.id);\n  replyWithMessage = message =>\n    this.props.replyWithMessage(this.props.session.id, message);\n  toggleMinimized = () =>\n    this.props.toggleMinimized(this.props.session.id);\n  answerAndEnd = async () => {\n    this.props.hangup(this.props.activeSessionId);\n    await this.props.answer(this.props.session.id);\n  };\n  answerAndHold = async () => {\n    await this.props.onHold(this.props.activeSessionId);\n    await this.props.answer(this.props.session.id);\n  };\n\n  componentDidMount() {\n    this._mounted = true;\n    this._updateAvatarAndMatchIndex(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.session.id !== nextProps.session.id) {\n      this._updateAvatarAndMatchIndex(nextProps);\n      this.setState({\n        hasOtherActiveCall: !!nextProps.activeSessionId,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  _updateAvatarAndMatchIndex(props) {\n    let selectedMatcherIndex = 0;\n    let contact = props.session.contactMatch;\n    if (!contact) {\n      contact = props.nameMatches && props.nameMatches[0];\n    } else {\n      selectedMatcherIndex = props.nameMatches.findIndex(match =>\n        match.id === contact.id\n      );\n    }\n    this.setState({\n      selectedMatcherIndex,\n      avatarUrl: null,\n    });\n    if (contact) {\n      props.getAvatarUrl(contact).then((avatarUrl) => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({ avatarUrl });\n      });\n    }\n  }\n\n  render() {\n    const { session } = this.props;\n    const active = !!session.id;\n    if (!active) {\n      return null;\n    }\n    if (session.minimized) {\n      return null;\n    }\n    const phoneNumber = session.direction === callDirections.outbound ?\n      session.to : session.from;\n    let fallbackUserName;\n    if (session.direction === callDirections.inbound && session.from === 'anonymous') {\n      fallbackUserName = i18n.getString('anonymous', this.props.currentLocale);\n    }\n    if (!fallbackUserName) {\n      fallbackUserName = i18n.getString('unknown', this.props.currentLocale);\n    }\n    return (\n      <IncomingCallPanel\n        currentLocale={this.props.currentLocale}\n        nameMatches={this.props.nameMatches}\n        fallBackName={fallbackUserName}\n        phoneNumber={phoneNumber}\n        answer={this.answer}\n        reject={this.reject}\n        replyWithMessage={this.replyWithMessage}\n        toVoiceMail={this.toVoiceMail}\n        formatPhone={this.props.formatPhone}\n        areaCode={this.props.areaCode}\n        countryCode={this.props.countryCode}\n        selectedMatcherIndex={this.state.selectedMatcherIndex}\n        onSelectMatcherName={this.onSelectMatcherName}\n        avatarUrl={this.state.avatarUrl}\n        onBackButtonClick={this.toggleMinimized}\n        forwardingNumbers={this.props.forwardingNumbers}\n        onForward={this.onForward}\n        brand={this.props.brand}\n        showContactDisplayPlaceholder={this.props.showContactDisplayPlaceholder}\n        hasOtherActiveCall={this.state.hasOtherActiveCall}\n        answerAndEnd={this.answerAndEnd}\n        answerAndHold={this.answerAndHold}\n        sessionId={this.props.session.id}\n        sourceIcons={this.props.sourceIcons}\n      >\n        {this.props.children}\n      </IncomingCallPanel>\n    );\n  }\n}\n\nIncomingCallPage.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnRecord: PropTypes.bool,\n    to: PropTypes.string,\n    from: PropTypes.string,\n    contactMatch: PropTypes.object,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  toggleMinimized: PropTypes.func.isRequired,\n  answer: PropTypes.func.isRequired,\n  reject: PropTypes.func.isRequired,\n  toVoiceMail: PropTypes.func.isRequired,\n  replyWithMessage: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  children: PropTypes.node,\n  nameMatches: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  forwardingNumbers: PropTypes.array.isRequired,\n  updateSessionMatchedContact: PropTypes.func.isRequired,\n  showContactDisplayPlaceholder: PropTypes.bool.isRequired,\n  brand: PropTypes.string.isRequired,\n  activeSessionId: PropTypes.string,\n  sourceIcons: PropTypes.object,\n  hangup: PropTypes.func.isRequired,\n  onHold: PropTypes.func.isRequired\n};\n\nIncomingCallPage.defaultProps = {\n  children: undefined,\n  activeSessionId: null,\n  sourceIcons: undefined,\n};\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    forwardingNumber,\n    brand,\n  },\n  showContactDisplayPlaceholder = false,\n}) {\n  const currentSession = webphone.ringSession || {};\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    activeSessionId: webphone.activeSessionId,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    forwardingNumbers: forwardingNumber.forwardingNumbers,\n    showContactDisplayPlaceholder,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n  },\n  getAvatarUrl = () => null,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    answer: sessionId => webphone.answer(sessionId),\n    reject: sessionId => webphone.reject(sessionId),\n    toVoiceMail: sessionId => webphone.toVoiceMail(sessionId),\n    onForward: (sessionId, forwardNumber) => webphone.forward(sessionId, forwardNumber),\n    replyWithMessage: (sessionId, message) => webphone.replyWithMessage(sessionId, message),\n    toggleMinimized: sessionId => webphone.toggleMinimized(sessionId),\n    updateSessionMatchedContact: (sessionId, contact) =>\n      webphone.updateSessionMatchedContact(sessionId, contact),\n    getAvatarUrl,\n    hangup: sessionId => webphone.hangup(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n  };\n}\n\nconst IncomingCallContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(IncomingCallPage));\n\nexport default IncomingCallContainer;\n\n"]}