{"version":3,"sources":["containers/SettingsPage/index.js"],"names":["mapToProps","_","phone","accountInfo","auth","brand","extensionInfo","locale","localeSettings","regionSettings","callingSettings","version","rolesAndPermissions","detailedPresence","params","loginNumber","loggedIn","loginStatus","ready","extensionNumber","phoneNumber","mainCompanyNumber","join","countryCode","areaCode","showSpinner","showCalling","callingEnabled","showAudio","showRegion","id","availableCountries","length","find","c","isoCode","currentLocale","brandId","ringoutEnabled","outboundSMS","permissions","OutboundSMS","InternalSMS","isCallQueueMember","dndStatus","userStatus","showPresenceSettings","supportedLocales","savedLocale","mapToFunctions","routerInteraction","regionSettingsUrl","callingSettingsUrl","audioSettingsUrl","feedbackSettingsUrl","onLogoutButtonClick","logout","onRegionSettingsLinkClick","push","onCallingSettingsLinkClick","onAudioSettingsLinkClick","onFeedbackSettingsLinkClick","setAvailable","setBusy","setDoNotDisturb","setInvisible","toggleAcceptCallQueueCalls","saveLocale","SettingsPage","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport loginStatus from 'ringcentral-integration/modules/Auth/loginStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport SettingsPanel from '../../components/SettingsPanel';\nimport withPhone from '../../lib/withPhone';\n\nfunction mapToProps(_, {\n  phone: {\n    accountInfo,\n    auth,\n    brand,\n    extensionInfo,\n    locale,\n    localeSettings,\n    regionSettings,\n    callingSettings,\n    version,\n    rolesAndPermissions,\n    detailedPresence,\n  },\n  params,\n}) {\n  let loginNumber = '';\n  const loggedIn = auth.loginStatus === loginStatus.loggedIn;\n  if (\n    loggedIn &&\n    accountInfo.ready &&\n    extensionInfo.ready\n  ) {\n    // If no extensionNumber, extensionNumber field needs to be omitted\n    const extensionNumber = extensionInfo.extensionNumber &&\n      extensionInfo.extensionNumber !== '0' ? extensionInfo.extensionNumber : null;\n    const phoneNumber = [accountInfo.mainCompanyNumber, extensionNumber].join('*');\n    loginNumber = formatNumber({\n      phoneNumber,\n      countryCode: regionSettings.countryCode,\n      areaCode: regionSettings.areaCode,\n    });\n  }\n  return {\n    showSpinner: !(\n      accountInfo.ready &&\n      auth.ready &&\n      loggedIn &&\n      extensionInfo.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      callingSettings.ready &&\n      rolesAndPermissions.ready &&\n      (!detailedPresence || detailedPresence.ready) &&\n      (!localeSettings || localeSettings.ready)\n    ),\n    showCalling: rolesAndPermissions.callingEnabled,\n    showAudio: rolesAndPermissions.callingEnabled,\n    showRegion: loggedIn && brand.id === '1210' && (\n      regionSettings.availableCountries.length > 1 ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'US') ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'CA')\n    ) && rolesAndPermissions.callingEnabled,\n    loginNumber,\n    version,\n    currentLocale: locale.currentLocale,\n    brandId: brand.id,\n    ringoutEnabled: rolesAndPermissions.ringoutEnabled,\n    outboundSMS: !!rolesAndPermissions.permissions.OutboundSMS ||\n    !!rolesAndPermissions.permissions.InternalSMS,\n    isCallQueueMember: extensionInfo.isCallQueueMember,\n    dndStatus: detailedPresence && detailedPresence.dndStatus,\n    userStatus: detailedPresence && detailedPresence.userStatus,\n    showPresenceSettings: !!(detailedPresence && params && params.showPresenceSettings),\n    supportedLocales: localeSettings && localeSettings.supportedLocales,\n    savedLocale: localeSettings && localeSettings.savedLocale,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    auth,\n    detailedPresence,\n    routerInteraction,\n    localeSettings,\n  },\n  regionSettingsUrl = '/settings/region',\n  callingSettingsUrl = '/settings/calling',\n  audioSettingsUrl = '/settings/audio',\n  feedbackSettingsUrl = '/settings/feedback',\n}) {\n  return {\n    onLogoutButtonClick: async () => {\n      await auth.logout();\n    },\n    onRegionSettingsLinkClick: () => {\n      routerInteraction.push(regionSettingsUrl);\n    },\n    onCallingSettingsLinkClick: () => {\n      routerInteraction.push(callingSettingsUrl);\n    },\n    onAudioSettingsLinkClick: () => {\n      routerInteraction.push(audioSettingsUrl);\n    },\n    onFeedbackSettingsLinkClick: () => {\n      routerInteraction.push(feedbackSettingsUrl);\n    },\n    setAvailable: (...args) => (detailedPresence && detailedPresence.setAvailable(...args)),\n    setBusy: (...args) => (detailedPresence && detailedPresence.setBusy(...args)),\n    setDoNotDisturb: (...args) => (detailedPresence && detailedPresence.setDoNotDisturb(...args)),\n    setInvisible: (...args) => (detailedPresence && detailedPresence.setInvisible(...args)),\n    toggleAcceptCallQueueCalls: (...args) => (\n      detailedPresence && detailedPresence.toggleAcceptCallQueueCalls(...args)\n    ),\n    saveLocale: localeSettings && (locale => localeSettings.saveLocale(locale)),\n  };\n}\nconst SettingsPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(SettingsPanel));\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  SettingsPage as default,\n};\n"]}