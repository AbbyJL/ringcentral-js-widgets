{"version":3,"sources":["modules/GlipPosts/index.js"],"names":["glipPostsRegExp","subscriptionFilter","GlipPosts","deps","dep","optional","client","auth","subscription","options","actionTypes","_reducer","_client","_auth","_subscription","_fetchPromises","_lastMessage","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","_shouldSubscribe","_processSubscription","loggedIn","ready","pending","message","test","event","body","eventType","post","createSuccess","groupId","record","oldRecordId","id","isSendByMe","creatorId","ownerId","recordCount","fetch","glip","groups","posts","list","response","fetchSuccess","records","fetchError","promise","text","postInputs","fakeId","Date","now","fakeRecord","sendStatus","status","creating","creationTime","create","updatePostInput","createError","fileName","rawFile","platform","service","name","headers","json","console","error","textValue","state","glipPostsStore","moduleStatuses","RcModule"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport isBlank from '../../lib/isBlank';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport status from './status';\n\nconst glipPostsRegExp = /glip\\/posts$/;\nconst subscriptionFilter = '/glip/posts';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    { dep: 'GlipPostsOptions', optional: true }\n  ]\n})\nexport default class GlipPosts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   */\n  constructor({\n    client,\n    auth,\n    subscription,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getReducer(this.actionTypes);\n\n    this._client = client;\n    this._auth = auth;\n    this._subscription = subscription;\n    this._fetchPromises = {};\n    this._lastMessage = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._subscription.subscribe(subscriptionFilter);\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n      this._fetchPromises = {};\n    } else if (this._shouldSubscribe()) {\n      this._processSubscription();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldSubscribe() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  _processSubscription() {\n    const { message } = this._subscription;\n    this._lastMessage = message;\n    if (\n      message &&\n      glipPostsRegExp.test(message.event) &&\n      message.body\n    ) {\n      const {\n        eventType,\n        ...post,\n      } = message.body;\n      if (eventType === 'PostRemoved') {\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId: post.groupId,\n        record: post,\n        oldRecordId: post.id,\n        isSendByMe: (post.creatorId === this._auth.ownerId && eventType === 'PostAdded')\n      });\n    }\n  }\n\n  async loadPosts(groupId, recordCount = 20) {\n    if (!groupId) {\n      return;\n    }\n    if (!this._fetchPromises[groupId]) {\n      this._fetchPromises[groupId] = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.fetch,\n          });\n          const response = await this._client.glip().groups(groupId).posts().list({ recordCount });\n          this.store.dispatch({\n            type: this.actionTypes.fetchSuccess,\n            groupId,\n            records: response.records,\n          });\n        } catch (e) {\n          this.store.dispatch({\n            type: this.actionTypes.fetchError,\n          });\n        }\n        this._fetchPromises[groupId] = null;\n      })();\n    }\n    const promise = this._fetchPromises[groupId];\n    await promise;\n  }\n\n  async create({ groupId }) {\n    const text = this.postInputs[groupId] && this.postInputs[groupId].text;\n    if (isBlank(text) || !groupId) {\n      return;\n    }\n    const fakeId = `${Date.now()}`;\n    const fakeRecord = {\n      id: fakeId,\n      groupId,\n      creatorId: this._auth.ownerId,\n      sendStatus: status.creating,\n      creationTime: `${new Date(Date.now())}`,\n      text,\n      type: 'TextMessage',\n    };\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.create,\n        groupId,\n        record: fakeRecord,\n      });\n      this.updatePostInput({ text: '', groupId });\n      const record = await this._client.glip().groups(groupId).posts().post({\n        text,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId,\n        record,\n        oldRecordId: fakeId,\n      });\n    } catch (e) {\n      fakeRecord.sendStatus = status.createError;\n      this.store.dispatch({\n        type: this.actionTypes.createError,\n        record: fakeRecord,\n        groupId,\n        oldRecordId: fakeId,\n      });\n      this.updatePostInput({ text, groupId });\n    }\n  }\n\n  async sendFile({ fileName, groupId, rawFile }) {\n    try {\n      const platform = this._client.service.platform();\n      const body = rawFile;\n      const response = await platform.post(\n        '/glip/files',\n        body,\n        { groupId, name: fileName },\n        {\n          headers: {\n            'Content-Type': 'application/octet-stream',\n          }\n        }\n      );\n      return response.json();\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  updatePostInput({ text, groupId }) {\n    this.store.dispatch({\n      type: this.actionTypes.updatePostInput,\n      groupId,\n      textValue: text,\n    });\n  }\n\n  get postsMap() {\n    return this.state.glipPostsStore;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get postInputs() {\n    return this.state.postInputs;\n  }\n}\n"]}