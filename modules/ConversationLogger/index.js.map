{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationLogIdentityFunction","conversationId","date","conversation","conversationLogId","ConversationLogger","deps","dep","optional","auth","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","formatDateTime","options","name","actionTypes","identityFunction","_auth","ensureExist","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_storageKey","_name","registerReducer","key","reducer","addSelector","messages","extensionNumber","dataMapping","conversationLogMapping","mapping","slice","sort","sortByDate","forEach","message","type","utcTimestamp","creationTime","createTime","conversationLogMatches","push","_selectors","conversationLogMap","logIds","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","_autoLogQueue","_autoLogPromise","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","ownerId","all","splice","map","_processConversationLog","length","_processQueue","reduce","result","concat","conversationLog","lastRecord","find","item","lastActivity","correspondentMatches","_getCorrespondentMatches","match","queries","_autoLogConversation","autoLog","messageTypes","sms","numbers","selfNumber","selfMatches","selfEntity","correspondentEntity","getLastMatchedCorrespondentEntity","triggerMatch","oldMap","active","id","_queueAutoLogConversation","_processConversationLogMap","log","redirect","idx","queueIndex","store","dispatch","setAutoLog","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem","LoggerBase","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\n/**\n * @class\n * @description Conversation logger module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'ConversationLoggerOptions', optional: false }\n  ]\n})\nexport default class ConversationLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {DateTimeFormat} params.dateTimeFormat - dateTimeFormat module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {Function} params.isLoggedContact - get if contact is logged\n   * @param {Function} params.formatDateTime - data time format\n   */\n  constructor({\n    auth,\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this::ensureExist(conversationMatcher, 'conversationMatcher');\n    this._dateTimeFormat = this::ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = this::ensureExist(storage, 'storage');\n    this._tabManager = tabManager;\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.messages,\n      () => this._extensionInfo.extensionNumber,\n      () => this._conversationMatcher.dataMapping,\n      (messages, extensionNumber, conversationLogMapping = {}) => {\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const { conversationId } = message;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              const conversationLogId = getLogId({ conversationId, date });\n              mapping[conversationId][date] = {\n                conversationLogId,\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                conversationLogMatches: conversationLogMapping[conversationLogId] || [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n    this._autoLogQueue = [];\n    this._autoLogPromise = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._auth;\n    await sleep(300);\n    if (ownerId !== this._auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue.splice(0, 10)\n        .map(conversation => this._processConversationLog({ conversation }))\n    );\n    if (\n      ownerId === this._auth.ownerId &&\n      this._autoLogQueue.length > 0\n    ) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n  _queueAutoLogConversation({\n    conversation,\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation) {\n    return (conversation.correspondents &&\n      conversation.correspondents.reduce((result, contact) => {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        return number && this._contactMatcher.dataMapping[number] ?\n          result.concat(this._contactMatcher.dataMapping[number]) :\n          result;\n      }, [])) || [];\n  }\n  getLastMatchedCorrespondentEntity(conversation) {\n    const conversationLog = this.conversationLogMap[conversation.conversationId];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map(date => (\n        this.conversationLogMap[conversation.conversationId][date]\n      )).sort(sortByDate).find(item => (\n        item.conversationLogMatches.length > 0\n      ));\n    if (\n      lastRecord &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n    ) {\n      const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find(item => (\n        this._isLoggedContact(conversation, lastActivity, item)\n      ));\n    }\n    return null;\n  }\n  async _processConversationLog({\n    conversation,\n  }) {\n    // await this._conversationMatcher.triggerMatch();\n    await this._conversationMatcher.match({ queries: [conversation.conversationLogId] });\n    if (\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers = [];\n      const numberMap = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self);\n      conversation.correspondents.forEach(addIfNotExist);\n      await this._contactMatcher.match({ queries: numbers });\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      let correspondentEntity = this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._tabManager || this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              this._queueAutoLogConversation({\n                conversation,\n              });\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processConversationLogMap();\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation({\n    conversationId, correspondentEntity, redirect, ...options\n  }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => {\n          const queueIndex = this._autoLogQueue\n            .find(item => item.conversationLogId === conversation.conversationLogId);\n          if (queueIndex > -1) {\n            this._autoLogQueue.splice(queueIndex, 1);\n          }\n          return this.log({\n            ...options,\n            conversation,\n            correspondentEntity,\n            redirect: redirect && idx === 0, // only direct on the first item\n          });\n        }));\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    const { conversationId } = message;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"]}