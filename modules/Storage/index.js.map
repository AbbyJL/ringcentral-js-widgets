{"version":3,"sources":["modules/Storage/index.js"],"names":["DEFAULT_ALLOW_INACTIVE_TABS_WRITE","Storage","deps","dep","optional","disableAllowInactiveTabsWrite","auth","tabManager","options","name","_disableAllowInactiveTabsWrite","_auth","_tabManager","storedData","store","subscribe","loginStatus","loggedIn","ready","storageKey","prefix","ownerId","_storage","_StorageProvider","getData","key","_reducers","removeItem","dispatch","type","actionTypes","initSuccess","data","_storageHandler","value","sync","on","notLoggedIn","reset","off","destroy","resetSuccess","status","moduleStatuses","active","currentData","setItem","StorageBase"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport StorageBase from '../../lib/StorageBase';\nimport loginStatus from '../Auth/loginStatus';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nconst DEFAULT_ALLOW_INACTIVE_TABS_WRITE = false;\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'TabManager', optional: true },\n    { dep: 'StorageOptions', optional: true },\n  ]\n})\nexport default class Storage extends StorageBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {disableAllowInactiveTabsWrite} params.disableAllowInactiveTabsWrite - disable Allow Inactive Tabs Write\n   * @param {Auth} params.auth - auth module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   */\n  constructor({\n    disableAllowInactiveTabsWrite = DEFAULT_ALLOW_INACTIVE_TABS_WRITE,\n    auth,\n    tabManager,\n    ...options\n  }) {\n    super({\n      name: 'storage',\n      ...options,\n    });\n    this._disableAllowInactiveTabsWrite = disableAllowInactiveTabsWrite;\n    this._auth = auth;\n    this._tabManager = tabManager;\n  }\n  initialize() {\n    let storedData = null;\n    this.store.subscribe(() => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        !this.ready\n      ) {\n        const storageKey =\n          `${this.prefix ? `${this.prefix}-` : ''}storage-${this._auth.ownerId}`;\n        this._storage = new this._StorageProvider({\n          storageKey,\n        });\n        storedData = this._storage.getData();\n        for (const key in storedData) {\n          if (!this._reducers[key]) {\n            delete storedData[key];\n            this._storage.removeItem(key);\n          }\n        }\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n          storageKey,\n          data: storedData,\n        });\n        this._storageHandler = ({ key, value }) => {\n          if (this.ready) {\n            storedData[key] = value;\n            this.store.dispatch({\n              type: this.actionTypes.sync,\n              key,\n              value,\n            });\n          }\n        };\n        this._storage.on('storage', this._storageHandler);\n      } else if (\n        this._auth.loginStatus === loginStatus.notLoggedIn &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.reset,\n        });\n        if (this._storageHandler) {\n          this._storage.off('storage', this._storageHandler);\n          this._storageHandler = null;\n        }\n        if (this._storage) {\n          this._storage.destroy();\n          this._storage = null;\n        }\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n      if (\n        this.status === moduleStatuses.ready && (\n          !this._disableAllowInactiveTabsWrite ||\n          !this._tabManager ||\n          this._tabManager.active\n        )\n      ) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"]}