{"version":3,"sources":["modules/CallLogger/index.js"],"names":["callIdentityFunction","call","sessionId","CallLogger","deps","dep","optional","storage","activityMatcher","callHistory","callMonitor","contactMatcher","tabManager","initialState","options","name","actionTypes","getDataReducer","identityFunction","_storage","ensureExist","_callMonitor","_contactMatcher","_activityMatcher","_callHistory","_tabManager","_storageKey","_name","registerReducer","key","reducer","_lastProcessedCalls","_lastProcessedEndedCalls","pending","ready","_readyCheckFunction","item","ensureActive","isActive","_ensureActive","autoLog","logOnRinging","contact","inbound","fromEntity","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","triggerType","_shouldLogNewCall","triggerMatch","dataMapping","length","toNumberEntity","fromMatches","from","phoneNumber","toMatches","to","find","match","id","_autoLogCall","activityMatches","_shouldLogUpdatedCall","calls","oldCalls","slice","forEach","oldCallIndex","findIndex","_onNewCall","callLoggerTriggerTypes","presenceUpdate","oldCall","splice","_onCallUpdated","recentlyEndedCalls","currentSessions","callInfo","callLogSync","_processCalls","store","dispatch","type","setAutoLog","setLogOnRinging","getItem","LoggerBase","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport {\n  isRinging,\n  isInbound,\n  removeDuplicateSelfCalls,\n} from '../../lib/callLogHelpers';\nimport callLoggerTriggerTypes from '../../enums/callLoggerTriggerTYpes';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @function\n * @description Identity function for calls.\n * @param {Object} call - call object\n * @return {String} sessionId\n */\nexport function callIdentityFunction(call) {\n  return call.sessionId;\n}\n\n/**\n * @class\n * @description call logger module\n */\n@Module({\n  deps: [\n    'Storage',\n    { dep: 'ActivityMatcher', optional: true },\n    'CallHistory',\n    'CallMonitor',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'CallLoggerOptions', optional: true }\n  ]\n})\nexport default class CallLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Storage} params.storage - storage module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {CallHistory} params.callHistory - callHistory module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   */\n  constructor({\n    storage,\n    activityMatcher,\n    callHistory,\n    callMonitor,\n    contactMatcher,\n    tabManager,\n    initialState,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'callLogger',\n      actionTypes,\n      getDataReducer,\n      identityFunction: callIdentityFunction,\n    });\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._activityMatcher = this::ensureExist(activityMatcher, 'activityMatcher');\n    this._callHistory = callHistory;\n    this._tabManager = tabManager;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes, initialState),\n    });\n\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _onReset() {\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._callMonitor.ready &&\n      (!this._callHistory || this._callHistory.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._contactMatcher.ready &&\n      this._activityMatcher.ready &&\n      this._readyCheckFunction() &&\n      this._storage.ready;\n  }\n\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._callMonitor.ready ||\n        !this._callMonitor.ready ||\n        (this._callHistory && !this._callHistory.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._contactMatcher.ready ||\n        !this._activityMatcher.ready ||\n        !this._readyCheckFunction() ||\n        !this._storage.ready\n      );\n  }\n\n  @proxify\n  async log({ call, ...options }) {\n    return super.log({ item: call, ...options });\n  }\n  async _ensureActive() {\n    const isActive = (\n      !this._tabManager ||\n      (await this._tabManager.ensureActive())\n    );\n    return isActive;\n  }\n  async _shouldLogNewCall(call) {\n    const isActive = await this._ensureActive();\n    return isActive &&\n      this.autoLog &&\n      (this.logOnRinging || !isRinging(call));\n  }\n\n  @proxify\n  async logCall({\n    call,\n    contact,\n    ...options\n  }) {\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) ||\n      null;\n    const toEntity = (!inbound && contact) ||\n      null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n    });\n  }\n  async _autoLogCall({ call, fromEntity, toEntity, triggerType }) {\n    await this.log({\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n      triggerType\n    });\n  }\n  async _onNewCall(call, triggerType) {\n    if (await this._shouldLogNewCall(call)) {\n      // RCINT-3857 check activity in case instance was reloaded when call is still active\n      await this._activityMatcher.triggerMatch();\n      if (\n        !this._activityMatcher.dataMapping[call.sessionId] ||\n        !this._activityMatcher.dataMapping[call.sessionId].length\n      ) {\n        // is completely new, need entity information\n        await this._contactMatcher.triggerMatch();\n\n        const toNumberEntity = (call.toNumberEntity) || '';\n\n        const fromMatches = (call.from && call.from.phoneNumber &&\n          this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n        const toMatches = (call.to && call.to.phoneNumber &&\n          this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n        const fromEntity = (fromMatches &&\n          fromMatches.length === 1 &&\n          fromMatches[0]) ||\n          null;\n\n        let toEntity = null;\n        if (toMatches && toMatches.length === 1) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          toEntity = toMatches[0];\n        } else if (toMatches && toMatches.length > 1 && toNumberEntity !== '') {\n          toEntity = toMatches.find(match =>\n            toNumberEntity === match.id\n          );\n        }\n\n        await this._autoLogCall({\n          call,\n          fromEntity,\n          toEntity,\n          triggerType\n        });\n      } else {\n        // only update call information if call has been logged\n        await this._autoLogCall({ \n          call,  \n          triggerType\n        });\n      }\n    }\n  }\n  async _shouldLogUpdatedCall(call) {\n    const isActive = await this._ensureActive();\n    if (isActive && (this.logOnRinging || !isRinging(call))) {\n      if (this.autoLog) return true;\n      await this._activityMatcher.triggerMatch();\n      const activityMatches = this._activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n  async _onCallUpdated(call, triggerType) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall({ call, triggerType });\n    }\n  }\n  _processCalls() {\n    if (this.ready) {\n      if (this._lastProcessedCalls !== this._callMonitor.calls) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n        this._lastProcessedCalls = this._callMonitor.calls;\n\n        removeDuplicateSelfCalls(this._lastProcessedCalls).forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n\n          if (oldCallIndex === -1) {\n            this._onNewCall(call, callLoggerTriggerTypes.presenceUpdate);\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (call.telephonyStatus !== oldCall.telephonyStatus) {\n              this._onCallUpdated(call, callLoggerTriggerTypes.presenceUpdate);\n            }\n          }\n        });\n        oldCalls.forEach((call) => {\n          this._onCallUpdated(call, callLoggerTriggerTypes.presenceUpdate);\n        });\n      }\n      if (\n        this._callHistory &&\n        this._lastProcessedEndedCalls !== this._callHistory.recentlyEndedCalls\n      ) {\n        const oldCalls = (\n          this._lastProcessedEndedCalls &&\n          this._lastProcessedEndedCalls.slice()\n        ) || [];\n        this._lastProcessedEndedCalls = this._callHistory.recentlyEndedCalls;\n        const currentSessions = {};\n        this._lastProcessedEndedCalls.forEach((call) => {\n          currentSessions[call.sessionId] = true;\n        });\n        oldCalls.forEach((call) => {\n          if (!currentSessions[call.sessionId]) {\n            // call log updated\n            const callInfo = this._callHistory.calls\n              .find(item => item.sessionId === call.sessionId);\n            if (callInfo) {\n              this._onCallUpdated(callInfo, callLoggerTriggerTypes.callLogSync);\n            }\n          }\n        });\n      }\n    }\n  }\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processCalls();\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setLogOnRinging(logOnRinging) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this.store.dispatch({\n        type: this.actionTypes.setLogOnRinging,\n        logOnRinging,\n      });\n    }\n  }\n\n  get logOnRinging() {\n    return this._storage.getItem(this._storageKey).logOnRinging;\n  }\n}\n"]}