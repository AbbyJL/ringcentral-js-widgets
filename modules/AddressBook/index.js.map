{"version":3,"sources":["modules/AddressBook/index.js"],"names":["CONTACTS_PER_PAGE","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","REGX_DECODE","DECODE","getSyncParams","syncToken","pageId","query","perPage","syncType","iSync","fSync","AddressBook","deps","dep","optional","client","auth","storage","tabManager","rolesAndPermissions","ttl","timeToRetry","polling","disableCache","options","actionTypes","_client","_storage","_auth","_tabManager","_ttl","_rolesAndPermissions","_timeToRetry","_polling","_promise","_syncTokenStorageKey","_syncTimestampStorageKey","_addressBookStorageKey","_reducer","registerReducer","key","reducer","contactList","syncTimestamp","addSelector","rawContacts","contactsList","forEach","rawContact","contact","type","sourceName","phoneNumbers","emails","id","name","firstName","lastName","email","push","email2","toLowerCase","indexOf","store","subscribe","_onStateChange","_shouldInit","dispatch","init","_shouleCleanCache","_cleanUp","_hasPermission","_initAddressBook","initSuccess","_isDataReady","_shouldReset","_resetModuleStatus","ready","loggedIn","pending","isFreshLogin","timestamp","Date","now","active","status","initializing","_shouldFetch","sync","console","error","_startPolling","_retry","reset","_clearTimeout","resetSuccess","_sync","response","syncSuccess","records","syncInfo","syncTime","_onSyncError","syncError","params","_syncAddressBookApi","nextPageId","lastResponse","concat","account","extension","addressBookSync","list","updateRequest","_decodeAddressBook","text","replace","$0","handleText","origin","Array","isArray","record","_decode","cleanUp","phoneNumber","contacts","entityType","permissions","ReadPersonalContacts","state","getItem","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport sleep from '../../lib/sleep';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport syncTypes from '../../enums/syncTypes';\nimport actionTypes from './actionTypes';\nimport proxify from '../../lib/proxy/proxify';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\n\nimport getAddressBookReducer, {\n  getSyncTokenReducer,\n  getContactListReducer,\n  getSyncTimestampReducer,\n} from './getAddressBookReducer';\n\nconst CONTACTS_PER_PAGE = 250;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst REGX_DECODE = /&\\w+;/g;\nconst DECODE = {\n  '&amp;': '&',\n  '&bsol;': '\\\\',\n  '&sol;': '/',\n  '&apos;': '\\''\n};\n\nfunction getSyncParams(syncToken, pageId) {\n  const query = {\n    perPage: CONTACTS_PER_PAGE,\n  };\n  if (syncToken) {\n    query.syncToken = syncToken;\n    query.syncType = syncTypes.iSync;\n  } else {\n    query.syncType = syncTypes.fSync;\n  }\n  if (pageId) {\n    query.pageId = pageId;\n  }\n  return query;\n}\n\n/**\n * @class\n * @description Accound book module to get user person contacts in RC\n */\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'RolesAndPermissions',\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'AddressBookOptions', optional: true }\n  ]\n})\nexport default class AddressBook extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - Auth module instance\n   * @param {TabManager} params.tabManage - TabManager module instance\n   * @param {Storage} params.storage - storage module instance, optional\n   * @param {Number} params.ttl - local cache timestamp, default 30 mins\n   * @param {Number} params.timeToRetry - timestamp to retry, default 62 seconds\n   * @param {Bool} params.polling - polling flag, default true\n   * @param {Bool} params.disableCache - polling flag, default false\n   */\n  constructor({\n    client,\n    auth,\n    storage,\n    tabManager,\n    rolesAndPermissions,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    polling = true,\n    disableCache = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._auth = auth;\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._promise = null;\n    this._syncTokenStorageKey = 'contactsSyncToken';\n    this._syncTimestampStorageKey = 'contactsSyncTimestamp';\n    this._addressBookStorageKey = 'addressBookContactsList';\n    if (this._storage) {\n      this._reducer = getAddressBookReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._syncTokenStorageKey,\n        reducer: getSyncTokenReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._syncTimestampStorageKey,\n        reducer: getSyncTimestampReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._addressBookStorageKey,\n        reducer: getContactListReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getAddressBookReducer(this.actionTypes, {\n        contactList: getContactListReducer(this.actionTypes),\n        syncToken: getSyncTokenReducer(this.actionTypes),\n        syncTimestamp: getSyncTimestampReducer(this.actionTypes),\n      });\n    }\n\n    this.addSelector(\n      'contacts',\n      () => this.rawContacts,\n      (rawContacts) => {\n        const contactsList = [];\n        rawContacts.forEach((rawContact) => {\n          const contact = {\n            type: this.sourceName,\n            phoneNumbers: [],\n            emails: [],\n            ...rawContact,\n          };\n          contact.id = `${contact.id}`;\n          contact.name = `${contact.firstName || ''} ${contact.lastName || ''}`;\n          if (contact.email) contact.emails.push(contact.email);\n          if (contact.email2) contact.emails.push(contact.email2);\n          Object.keys(contact).forEach((key) => {\n            if (key.toLowerCase().indexOf('phone') === -1) {\n              return;\n            }\n            if (typeof contact[key] !== 'string') {\n              return;\n            }\n            addPhoneToContact(contact, contact[key], key);\n          });\n          contactsList.push(contact);\n        });\n        return contactsList;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUp();\n      }\n      if (this._hasPermission) {\n        await this._initAddressBook();\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      }\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this._auth.loggedIn &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!!this._storage && !this._storage.ready) ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._rolesAndPermissions.ready ||\n        !this._auth.loggedIn\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      !this.timestamp ||\n      (Date.now() - this.timestamp) > this._ttl\n    );\n  }\n\n  _shouldFetch() {\n    return (\n      (!this._storage || !this._tabManager || this._tabManager.active) &&\n      this._shouleCleanCache()\n    );\n  }\n\n  _isDataReady() {\n    // only turns ready when data has been fetched\n    // (could be from other tabs)\n    return this.status === moduleStatuses.initializing &&\n      this.syncToken !== null;\n  }\n\n  async _initAddressBook() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.error('syncData error:', e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadPersonalContacts;\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._clearTimeout();\n    this._promise = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n  @proxify\n  async sync() {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.sync,\n          });\n          const response = await this._sync(this.syncToken);\n          this.store.dispatch({\n            type: this.actionTypes.syncSuccess,\n            records: response.records,\n            syncToken: response.syncInfo.syncToken,\n            syncTime: response.syncInfo.syncTime,\n          });\n          if (this._polling) {\n            this._startPolling();\n          }\n        } catch (error) {\n          this._onSyncError();\n          if (this._polling) {\n            this._startPolling(this.timeToRetry);\n          } else {\n            this._retry();\n          }\n          throw error;\n        }\n        this._promise = null;\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  @proxify\n  async _sync(syncToken, pageId) {\n    const params = getSyncParams(syncToken, pageId);\n    const response = await this._syncAddressBookApi(params);\n    if (!response.nextPageId) {\n      return response;\n    }\n    await sleep(1000);\n    const lastResponse = await this._sync(syncToken, response.nextPageId);\n    return {\n      ...lastResponse,\n      records: response.records.concat(lastResponse.records),\n    };\n  }\n  @proxify\n  async _syncAddressBookApi(params) {\n    const updateRequest = await this._client\n      .account()\n      .extension()\n      .addressBookSync()\n      .list(params);\n    this._decodeAddressBook(updateRequest);\n    return updateRequest;\n  }\n\n  _decode(text) {\n    return text.replace(REGX_DECODE, ($0) => {\n      let handleText = $0;\n      if (DECODE[$0]) {\n        handleText = DECODE[$0];\n      }\n      return handleText;\n    });\n  }\n\n  _decodeAddressBook(origin) {\n    if (origin && origin.records && Array.isArray(origin.records)) {\n      origin.records.forEach((record) => {\n        if (record.firstName) {\n          record.firstName = this._decode(record.firstName);\n        }\n        if (record.lastName) {\n          record.lastName = this._decode(record.lastName);\n        }\n      });\n    }\n  }\n\n  _cleanUp() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  @proxify\n  async fetchData() {\n    await this.sync();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get syncToken() {\n    if (this._storage) {\n      return this._storage.getItem(this._syncTokenStorageKey);\n    }\n    return this.state.syncToken;\n  }\n\n  get rawContacts() {\n    if (this._storage) {\n      return this._storage.getItem(this._addressBookStorageKey);\n    }\n    return this.state.contactList;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return this._storage.getItem(this._syncTimestampStorageKey);\n    }\n    return this.state.syncTimestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of contact source\n  get contacts() {\n    return this._selectors.contacts();\n  }\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"]}