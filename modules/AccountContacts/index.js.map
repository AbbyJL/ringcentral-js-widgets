{"version":3,"sources":["modules/AccountContacts/index.js"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","deps","dep","optional","client","accountExtension","accountPhoneNumber","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_accountExtension","_accountPhoneNumber","_client","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_reducer","addSelector","availableExtensions","extensionToPhoneNumberMap","profileImages","presences","extensions","newExtensions","forEach","extension","status","indexOf","type","id","contact","sourceName","firstName","lastName","emails","email","extensionNumber","ext","hasProfileImage","phoneNumbers","phoneNumber","phoneType","profileImageUrl","imageUrl","presence","name","phones","length","phone","push","store","subscribe","_onStateChange","_shouldInit","dispatch","initSuccess","_shouldReset","resetSuccess","ready","pending","useCache","imageId","Date","now","timestamp","image","account","profileImage","get","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","resolve","presenceId","_getPresenceContexts","clearTimeout","enqueueTimeoutId","_processQueryPresences","setTimeout","contacts","entityType","getPresenceContexts","map","x","_batchQueryPresences","responses","presenceMap","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","ids","join","platform","service","url","multipartResponse","json","item","state","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport ensureExist from '../../lib/ensureExist';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport proxify from '../../lib/proxy/proxify';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'AccountExtension',\n    'AccountPhoneNumber',\n    { dep: 'AccoundContactsOptions', optional: true }\n  ]\n})\nexport default class AccountContacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {AccountPhoneNumber} params.accountPhoneNumber - accountPhoneNumber module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    accountExtension,\n    accountPhoneNumber,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._accountExtension = this::ensureExist(accountExtension, 'accountExtension');\n    this._accountPhoneNumber = this::ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n    this._client = this::ensureExist(client, 'client');\n\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this.addSelector(\n      'contacts',\n      () => this._accountExtension.availableExtensions,\n      () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n      () => this.profileImages,\n      () => this.presences,\n      (extensions, extensionToPhoneNumberMap, profileImages, presences) => {\n        const newExtensions = [];\n        extensions.forEach((extension) => {\n          if (!(extension.status === 'Enabled' &&\n            ['DigitalUser', 'User', 'Department'].indexOf(extension.type) >= 0)) {\n            return;\n          }\n          const id = `${extension.id}`;\n          const contact = {\n            type: this.sourceName,\n            id,\n            firstName: extension.contact && extension.contact.firstName,\n            lastName: extension.contact && extension.contact.lastName,\n            emails: extension.contact ? [extension.contact.email] : [],\n            extensionNumber: extension.ext,\n            hasProfileImage: !!extension.hasProfileImage,\n            phoneNumbers: [{ phoneNumber: extension.ext, phoneType: 'extension' }],\n            profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n            presence: presences[id] && presences[id].presence,\n          };\n          contact.name = `${contact.firstName || ''} ${contact.lastName || ''}`;\n          if (isBlank(contact.extensionNumber)) {\n            return;\n          }\n          const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n          if (phones && phones.length > 0) {\n            phones.forEach((phone) => {\n              addPhoneToContact(contact, phone.phoneNumber, 'directPhone');\n            });\n          }\n          newExtensions.push(contact);\n        });\n        return newExtensions;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._accountExtension.ready ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  // interface of contact source\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    if (!contact || !contact.id || contact.type !== 'company' || !contact.hasProfileImage) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      (Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl)\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account()\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of contact source\n  @proxify\n  getPresence(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        (Date.now() - this.presences[presenceId].timestamp < this._presenceTtl)\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map(x => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus, presenceStatus, telephonyStatus, userStatus\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.batchFetchPresenceSuccess,\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      if (contacts.length === 1) {\n        const { id } = contacts[0];\n        const response = await this._client.account().extension(id).presence().get();\n        presenceSet[id] = response;\n      } else if (contacts.length > 1) {\n        const ids = contacts.map(x => x.id).join(',');\n        const multipartResponse = await batchGetApi({\n          platform: this._client.service.platform(),\n          url: `/account/~/extension/${ids}/presence?detailedTelephonyState=true&sipData=true`,\n        });\n        const responses = multipartResponse.map(x => x.json());\n        responses.forEach((item) => {\n          presenceSet[item.extension.id] = item;\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get presences() {\n    return this.state.presences;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of contact source\n  get contacts() {\n    return this._selectors.contacts();\n  }\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"]}