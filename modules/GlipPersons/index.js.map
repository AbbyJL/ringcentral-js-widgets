{"version":3,"sources":["modules/GlipPersons/index.js"],"names":["MaximumBatchGetPersons","DEFAULT_BATCH_FETCH_DELAY","GlipPersons","deps","dep","optional","client","auth","storage","tabManager","batchFetchDelay","options","actionTypes","_client","_auth","_tabManager","_storage","_fetchingIds","_batchFetchDelay","_dataStorageKey","_reducer","registerReducer","key","reducer","glipPersonStore","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","isFreshLogin","cleanUp","loadMe","initSuccess","_shouldReset","resetSuccess","loggedIn","ready","pending","loadPerson","ownerId","id","fetch","glip","persons","get","person","fetchSuccess","fetchError","personIds","newPersonIds","forEach","personsMap","push","length","ids","slice","_batchGetPersons","batchFetchSuccess","lastIds","loadPersons","response","join","platform","service","url","multipartResponse","responses","filter","r","ok","map","x","json","getItem","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport sleep from '../../lib/sleep';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport proxify from '../../lib/proxy/proxify';\n\nimport actionTypes from './actionTypes';\nimport getReducer, { getGlipPersonStoreReducer } from './getReducer';\n\nconst MaximumBatchGetPersons = 30;\nconst DEFAULT_BATCH_FETCH_DELAY = 500;\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'GlipPersonsOptions', optional: true }\n  ]\n})\nexport default class GlipPersons extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   */\n  constructor({\n    client,\n    auth,\n    storage,\n    tabManager,\n    batchFetchDelay = DEFAULT_BATCH_FETCH_DELAY,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n\n    this._client = client;\n    this._auth = auth;\n    this._tabManager = tabManager;\n    this._storage = storage;\n\n    this._fetchingIds = {};\n    this._batchFetchDelay = batchFetchDelay;\n\n    this._dataStorageKey = 'glipPersonsData';\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getGlipPersonStoreReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        glipPersonStore: getGlipPersonStoreReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._auth.isFreshLogin) {\n        this.store.dispatch({\n          type: this.actionTypes.cleanUp,\n        });\n      }\n      await this.loadMe();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (this._storage && !this._storage.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._auth.loggedIn\n      ) &&\n      this.ready\n    );\n  }\n\n  @proxify\n  async loadMe() {\n    await this.loadPerson(this._auth.ownerId);\n  }\n\n  @proxify\n  async loadPerson(id) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fetch,\n      });\n      const person = await this._client.glip().persons(id).get();\n      this.store.dispatch({\n        type: this.actionTypes.fetchSuccess,\n        person,\n      });\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n      });\n    }\n  }\n\n  @proxify\n  async loadPersons(personIds) {\n    if (!this._auth.loggedIn) {\n      return;\n    }\n    if (!personIds) {\n      return;\n    }\n    const { ownerId } = this._auth;\n    const newPersonIds = [];\n    personIds.forEach((id) => {\n      if (!this.personsMap[id] && !this._fetchingIds[id]) {\n        newPersonIds.push(id);\n      }\n    });\n    if (newPersonIds.length === 0) {\n      return;\n    }\n    const ids = newPersonIds.slice(0, MaximumBatchGetPersons);\n    ids.forEach((id) => {\n      this._fetchingIds[id] = 1;\n    });\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fetch,\n      });\n      const persons = await this._batchGetPersons(ids);\n      this.store.dispatch({\n        type: this.actionTypes.batchFetchSuccess,\n        persons,\n      });\n      ids.forEach((id) => {\n        delete this._fetchingIds[id];\n      });\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n      });\n      ids.forEach((id) => {\n        delete this._fetchingIds[id];\n      });\n    }\n    if (ownerId !== this._auth.ownerId) {\n      return;\n    }\n    const lastIds = newPersonIds.slice(MaximumBatchGetPersons);\n    if (lastIds.length > 0) {\n      await sleep(this._batchFetchDelay);\n      await this.loadPersons(lastIds);\n    }\n  }\n\n  async _batchGetPersons(personIds) {\n    if (!personIds || personIds.length === 0) {\n      return [];\n    }\n    if (personIds.length === 1) {\n      const response = await this._client.glip().persons(personIds[0]).get();\n      return [response];\n    }\n    const ids = personIds.join(',');\n    const multipartResponse = await batchGetApi({\n      platform: this._client.service.platform(),\n      url: `/glip/persons/${ids}`,\n    });\n    const responses = multipartResponse.filter(r => r.ok()).map(x => x.json());\n    return responses;\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  get personsMap() {\n    if (this._storage) {\n      return this._storage.getItem(this._dataStorageKey) || {};\n    }\n    return this.state.glipPersonStore;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get me() {\n    return this.personsMap[this._auth.ownerId];\n  }\n}\n"]}