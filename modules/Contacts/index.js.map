{"version":3,"sources":["modules/Contacts/index.js"],"names":["DefaultContactListPageSize","Contacts","deps","dep","optional","auth","listPageSize","contactSources","options","actionTypes","_auth","_reducer","_contactSources","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","_listPageSize","source","addSource","addSelector","size","_checkSourceUpdated","names","keys","sourceName","get","sourceReady","push","contacts","concat","filteredContacts","pageNumber","pageSize","count","items","slice","groups","searchFilter","sourceFilter","allContacts","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","_resetModuleStatus","loggedIn","sourceModuleReady","pending","ready","resetSuccess","updateFilter","Error","has","getPresence","getProfileImage","matchPhoneNumber","set","updated","lastStatus","data","phoneNumber","result","phoneNumbers","forEach","id","contactId","toString","find","x","contact","useCache","sync","state","status","_selectors","sourceNames","contactGroups"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport {\n  uniqueContactItems,\n  sortContactItemsByName,\n  groupByFirstLetterOfName,\n  filterContacts,\n  AllContactSourceName,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nexport const DefaultContactListPageSize = 20;\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true }\n  ]\n})\nexport default class Contacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   */\n  constructor({\n    auth,\n    listPageSize = DefaultContactListPageSize,\n    contactSources = [],\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._contactSources = new Map();\n    this._sourcesLastStatus = new Map();\n    this._sourcesUpdatedAt = Date.now();\n    this._listPageSize = listPageSize;\n\n    for (const source of contactSources) {\n      this.addSource(source);\n    }\n\n    this.addSelector(\n      'sourceNames',\n      () => this._contactSources.size,\n      () => this._checkSourceUpdated(),\n      () => {\n        const names = [AllContactSourceName];\n        for (const sourceName of Array.from(this._contactSources.keys())) {\n          const source = this._contactSources.get(sourceName);\n          if (source.sourceReady) {\n            names.push(sourceName);\n          }\n        }\n        return names;\n      }\n    );\n\n    this.addSelector(\n      'allContacts',\n      () => this._checkSourceUpdated(),\n      () => {\n        let contacts = [];\n        for (const sourceName of Array.from(this._contactSources.keys())) {\n          const source = this._contactSources.get(sourceName);\n          if (source.sourceReady) {\n            contacts = contacts.concat(source.contacts);\n          }\n        }\n        return contacts;\n      }\n    );\n\n    this.addSelector(\n      'contactGroups',\n      () => this.filteredContacts,\n      () => this.pageNumber,\n      (filteredContacts, pageNumber) => {\n        const pageSize = this._listPageSize;\n        const count = pageNumber * pageSize;\n        let items = uniqueContactItems(filteredContacts);\n        items = sortContactItemsByName(items);\n        items = items.slice(0, count);\n        const groups = groupByFirstLetterOfName(items);\n        return groups;\n      }\n    );\n\n    this.addSelector(\n      'filteredContacts',\n      () => this.searchFilter,\n      () => this.sourceFilter,\n      () => this._checkSourceUpdated(),\n      (searchFilter, sourceFilter) => {\n        let contacts;\n        if (\n          isBlank(searchFilter) &&\n          (sourceFilter === AllContactSourceName || isBlank(sourceFilter))\n        ) {\n          return this.allContacts;\n        }\n        if (sourceFilter !== AllContactSourceName && !isBlank(sourceFilter)) {\n          const source = this._contactSources.get(sourceFilter);\n          if (source && source.sourceReady) {\n            /* eslint { \"prefer-destructuring\": 0 } */\n            contacts = source.contacts;\n          } else {\n            contacts = [];\n          }\n        } else {\n          contacts = this.allContacts;\n        }\n        if (!isBlank(searchFilter)) {\n          contacts = filterContacts(contacts, searchFilter);\n        }\n        return contacts;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this.sourceModuleReady &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this.sourceModuleReady\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  updateFilter({ sourceFilter, searchFilter, pageNumber }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      sourceFilter,\n      searchFilter,\n      pageNumber,\n    });\n  }\n\n  /**\n   * @function\n   * @param {Object} source - source module object\n   * @param {String} params.sourceName - source name\n   * @param {Bool} params.ready - source module ready status\n   * @param {Bool} params.sourceReady - source ready status\n   * @param {Array} params.contacts - source contacts data\n   * @param {Function} params.getPresence - get source presence function, optional\n   * @param {Function} params.getProfileImage - get source profile image function, optional\n   * @param {Function} params.sync - sync source data function, optional\n   * @param {Function} params.matchPhoneNumber - get match phoneNumber function, optional\n   */\n  addSource(source) {\n    if (!source.sourceName) {\n      throw new Error('Contacts: \"sourceName\" is required in Contacts source.');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(`Contacts: A contact source named \"${source.sourceName}\" already exists`);\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error('Contacts: source\\' getPresence must be a function');\n    }\n    if (source.getProfileImage && typeof source.getProfileImage !== 'function') {\n      throw new Error('Contacts: source\\' getProfileImage must be a function');\n    }\n    if (source.matchPhoneNumber && typeof source.matchPhoneNumber !== 'function') {\n      throw new Error('Contacts: source\\' matchPhoneNumber must be a function');\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  _checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  matchPhoneNumber(phoneNumber) {\n    let result = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.matchPhoneNumber === 'function') {\n        result = result.concat(source.matchPhoneNumber(phoneNumber));\n      }\n    }\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.matchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  find({ type, id }) {\n    const contactId = (id || '').toString();\n    const source = this._contactSources.get(type);\n    if (source) {\n      return source.contacts.find(x => x.id.toString() === contactId);\n    }\n    return null;\n  }\n\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync() {\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        await source.sync();\n      }\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n      }\n    }\n    return ready;\n  }\n\n  get companyContacts() {\n    const source = this._contactSources.get('company');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get personalContacts() {\n    const source = this._contactSources.get('personal');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get sourceFilter() {\n    return this.state.sourceFilter;\n  }\n\n  get pageNumber() {\n    return this.state.pageNumber;\n  }\n\n  get allContacts() {\n    return this._selectors.allContacts();\n  }\n\n  get filteredContacts() {\n    return this._selectors.filteredContacts();\n  }\n\n  get sourceNames() {\n    return this._selectors.sourceNames();\n  }\n\n  get contactGroups() {\n    return this._selectors.contactGroups();\n  }\n}\n"]}