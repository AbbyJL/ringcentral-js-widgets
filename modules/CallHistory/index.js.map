{"version":3,"sources":["modules/CallHistory/index.js"],"names":["CallHistory","deps","dep","optional","accountInfo","callLog","callMonitor","storage","activityMatcher","contactMatcher","options","_accountInfo","_callLog","_storage","_activityMatcher","_contactMatcher","_callMonitor","_reducer","actionTypes","_endedCallsStorageKey","registerReducer","key","reducer","endedCalls","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_processCallHistory","pending","_lastProcessedNumbers","_lastProcessedIds","monitorCalls","calls","callLogCalls","_lastProcessedMonitorCalls","filter","find","call","sessionId","currentCall","currentCalls","_lastProcessedCalls","ids","forEach","recentlyEndedCalls","_shouldTriggerContactMatch","triggerMatch","_shouldTriggerActivityMatch","_getEndedCalls","length","_addEndedCalls","shouldRemove","_shouldRemoveEndedCalls","_removeEndedCalls","dispatch","type","init","initSuccess","reset","resetSuccess","map","result","addEndedCalls","timestamp","Date","now","sync","removeEndedCalls","clickToSMS","clickToCall","state","status","getItem","countryCode","callFrom","from","phoneNumber","callTo","to","sort","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromNumber","extensionNumber","toNumber","fromMatches","toMatches","activityMatches","matched","toNumberEntity","output","numberMap","addIfNotExist","number","push","addNumbersFromCall","concat"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;AAGA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAeqBA,W,WAXpB,gBAAO;AACNC,QAAM,CACJ,aADI,EAEJ,SAFI,EAGJ,aAHI,EAIJ,EAAEC,KAAK,SAAP,EAAkBC,UAAU,IAA5B,EAJI,EAKJ,EAAED,KAAK,iBAAP,EAA0BC,UAAU,IAApC,EALI,EAMJ,EAAED,KAAK,gBAAP,EAAyBC,UAAU,IAAnC,EANI,EAOJ,EAAED,KAAK,oBAAP,EAA6BC,UAAU,IAAvC,EAPI;AADA,CAAP,C;;;AAYC;;;;;;;;;AASA,6BAQG;AAAA,QAPDC,WAOC,QAPDA,WAOC;AAAA,QANDC,OAMC,QANDA,OAMC;AAAA,QALDC,WAKC,QALDA,WAKC;AAAA,QAJDC,OAIC,QAJDA,OAIC;AAAA,QAHDC,eAGC,QAHDA,eAGC;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADEC,OACF;AAAA;;AAAA,2KAEIA,OAFJ;;AAAA;;AAAA;;AAAA;;AAAA;;AAID,UAAKC,YAAL,GAAoB,kCAAkBP,WAAlB,EAA+B,aAA/B,CAApB;AACA,UAAKQ,QAAL,GAAgB,kCAAkBP,OAAlB,EAA2B,SAA3B,CAAhB;AACA,UAAKQ,QAAL,GAAgBN,OAAhB;AACA,UAAKO,gBAAL,GAAwBN,eAAxB;AACA,UAAKO,eAAL,GAAuBN,cAAvB;AACA,UAAKO,YAAL,GAAoBV,WAApB;AACA,QAAI,MAAKO,QAAT,EAAmB;AACjB,YAAKI,QAAL,GAAgB,qCAAsB,MAAKC,WAA3B,CAAhB;AACA,YAAKC,qBAAL,GAA6B,uBAA7B;AACA,YAAKN,QAAL,CAAcO,eAAd,CAA8B;AAC5BC,aAAK,MAAKF,qBADkB;AAE5BG,iBAAS,iDAAqB,MAAKJ,WAA1B;AAFmB,OAA9B;AAID,KAPD,MAOO;AACL,YAAKD,QAAL,GAAgB,qCAAsB,MAAKC,WAA3B,EAAwC;AACtDK,oBAAY,iDAAqB,MAAKL,WAA1B;AAD0C,OAAxC,CAAhB;AAGD;AACD,QAAI,MAAKH,eAAT,EAA0B;AACxB,YAAKA,eAAL,CAAqBS,cAArB,CAAoC;AAClCC,sBAAc;AAAA,iBAAM,MAAKC,aAAX;AAAA,SADoB;AAElCC,sBAAc;AAAA,iBACZ,CAAC,CAAC,MAAKX,YAAN,IAAsB,MAAKA,YAAL,CAAkBY,KAAzC,KACA,MAAKhB,QAAL,CAAcgB,KADd,IAEA,MAAKjB,YAAL,CAAkBiB,KAHN;AAAA;AAFoB,OAApC;AAQD;AACD,QAAI,MAAKd,gBAAT,EAA2B;AACzB,YAAKA,gBAAL,CAAsBU,cAAtB,CAAqC;AACnCC,sBAAc;AAAA,iBAAM,MAAKI,UAAX;AAAA,SADqB;AAEnCF,sBAAc;AAAA,iBACZ,CAAC,CAAC,MAAKX,YAAN,IAAsB,MAAKA,YAAL,CAAkBY,KAAzC,KACA,MAAKhB,QAAL,CAAcgB,KAFF;AAAA;AAFqB,OAArC;AAOD;AAxCA;AAyCF;;;;iCAMY;AAAA;;AACX,WAAKE,KAAL,CAAWC,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;;;;;;;;AAGC,oBAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,uBAAKC,iBAAL;AACD,iBAFD,MAEO,IAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,uBAAKC,kBAAL;AACD,iBAFM,MAEA,IACL,KAAKR,KADA,EAEL;AACA,uBAAKS,mBAAL;AACD;;;;;;;;;;;;;;;;;;kCAGW;AACZ,aACE,KAAKzB,QAAL,CAAcgB,KAAd,KACC,CAAC,KAAKZ,YAAN,IAAsB,KAAKA,YAAL,CAAkBY,KADzC,KAEA,KAAKjB,YAAL,CAAkBiB,KAFlB,KAGC,CAAC,KAAKb,eAAN,IAAyB,KAAKA,eAAL,CAAqBa,KAH/C,MAIC,CAAC,KAAKd,gBAAN,IAA0B,KAAKA,gBAAL,CAAsBc,KAJjD,KAKA,KAAKU,OANP;AAQD;;;mCAEc;AACb,aACE,CAAC,CAAC,KAAK1B,QAAL,CAAcgB,KAAf,IACE,KAAKZ,YAAL,IAAqB,CAAC,KAAKA,YAAL,CAAkBY,KAD1C,IAEC,CAAC,KAAKjB,YAAL,CAAkBiB,KAFpB,IAGE,KAAKb,eAAL,IAAwB,CAAC,KAAKA,eAAL,CAAqBa,KAHhD,IAIE,KAAKd,gBAAL,IAAyB,CAAC,KAAKA,gBAAL,CAAsBc,KAJnD,KAMA,KAAKA,KAPP;AASD;;;+CAE0BF,a,EAAe;AACxC,UAAI,KAAKa,qBAAL,KAA+Bb,aAAnC,EAAkD;AAChD,aAAKa,qBAAL,GAA6Bb,aAA7B;AACA,YAAI,KAAKX,eAAL,IAAwB,KAAKA,eAAL,CAAqBa,KAAjD,EAAwD;AACtD,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;gDAE2BC,U,EAAY;AACtC,UAAI,KAAKW,iBAAL,KAA2BX,UAA/B,EAA2C;AACzC,aAAKW,iBAAL,GAAyBX,UAAzB;AACA,YAAI,KAAKf,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBc,KAAnD,EAA0D;AACxD,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;qCAEgB;AACf,UAAI,KAAKZ,YAAT,EAAuB;AACrB,YAAMyB,eAAe,KAAKzB,YAAL,CAAkB0B,KAAvC;AACA,YAAMC,eAAe,KAAK/B,QAAL,CAAc8B,KAAnC;AACA,YAAI,KAAKE,0BAAL,KAAoCH,YAAxC,EAAsD;AACpD,cAAMlB,aAAa,CAAC,KAAKqB,0BAAL,IAAmC,EAApC,EAChBC,MADgB,CACT;AAAA,mBACN,CAACJ,aAAaK,IAAb,CAAkB;AAAA,qBAAeC,KAAKC,SAAL,KAAmBC,YAAYD,SAA9C;AAAA,aAAlB,CAAD;AACA;AACA,aAACL,aAAaG,IAAb,CAAkB;AAAA,qBAAeC,KAAKC,SAAL,KAAmBC,YAAYD,SAA9C;AAAA,aAAlB,CAHK;AAAA,WADS,CAAnB;AAMA,eAAKJ,0BAAL,GAAkCH,YAAlC;AACA,iBAAOlB,UAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;;8CAEyB;AACxB,UAAM2B,eAAe,KAAKtC,QAAL,CAAc8B,KAAnC;AACA,UAAIQ,iBAAiB,KAAKC,mBAA1B,EAA+C;AAC7C,aAAKA,mBAAL,GAA2BD,YAA3B;AACA,YAAME,MAAM,EAAZ;AACAF,qBAAaG,OAAb,CAAqB,UAACN,IAAD,EAAU;AAC7BK,cAAIL,KAAKC,SAAT,IAAsB,IAAtB;AACD,SAFD;AAGA,eAAO,KAAKM,kBAAL,CAAwBT,MAAxB,CAA+B;AAAA,iBAAQO,IAAIL,KAAKC,SAAT,CAAR;AAAA,SAA/B,CAAP;AACD;AACD,aAAO,IAAP;AACD;;;0CAEqB;AACpB,UAAMtB,gBAAgB,KAAKA,aAA3B;AACA,UAAI,KAAK6B,0BAAL,CAAgC7B,aAAhC,CAAJ,EAAoD;AAClD,aAAKX,eAAL,CAAqByC,YAArB;AACD;AACD,UAAM3B,aAAa,KAAKA,UAAxB;AACA,UAAI,KAAK4B,2BAAL,CAAiC5B,UAAjC,CAAJ,EAAkD;AAChD,aAAKf,gBAAL,CAAsB0C,YAAtB;AACD;;AAED,UAAMjC,aAAa,KAAKmC,cAAL,EAAnB;AACA,UAAInC,cAAcA,WAAWoC,MAA7B,EAAqC;AACnC,aAAKC,cAAL,CAAoBrC,UAApB;AACD;;AAED,UAAMsC,eAAe,KAAKC,uBAAL,EAArB;AACA,UAAID,gBAAgBA,aAAaF,MAAjC,EAAyC;AACvC,aAAKI,iBAAL,CAAuBF,YAAvB;AACD;AACF;;;wCAEmB;AAClB,WAAK/B,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiBgD;AADL,OAApB;AAGA,WAAKpC,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiBiD;AADL,OAApB;AAGD;;;yCAEoB;AACnB,WAAKrC,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiBkD;AADL,OAApB;AAGA,WAAKjB,mBAAL,GAA2B,IAA3B;AACA,WAAKX,iBAAL,GAAyB,IAAzB;AACA,WAAKI,0BAAL,GAAkC,IAAlC;AACA,WAAKL,qBAAL,GAA6B,IAA7B;AACA,WAAKT,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiBmD;AADL,OAApB;AAGD;;;mCAEc9C,U,EAAY;AACzBA,iBAAW+C,GAAX,CAAe,UAACvB,IAAD,EAAU;AACvBA,aAAKwB,MAAL,GAAc,cAAd;AACA,eAAOxB,IAAP;AACD,OAHD;AAIA,WAAKjB,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiBsD,aADL;AAElBjD,8BAFkB;AAGlBkD,mBAAWC,KAAKC,GAAL;AAHO,OAApB;AAKA,WAAK/D,QAAL,CAAcgE,IAAd;AACD;;;sCAEiBrD,U,EAAY;AAC5B,WAAKO,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiB2D,gBADL;AAElBtD;AAFkB,OAApB;AAID;;AAED;;;;mCAEe;AACb,WAAKO,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiB4D;AADL,OAApB;AAGD;AACD;;;;oCAEgB;AACd,WAAKhD,KAAL,CAAWkC,QAAX,CAAoB;AAClBC,cAAM,KAAK/C,WAAL,CAAiB6D;AADL,OAApB;AAGD;;;wBA1KkB;AACjB;AACD;;;wBA2KY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,yBAAerD,KAA5C;AACD;;;wBAEa;AACZ,aAAO,KAAKoD,KAAL,CAAWC,MAAX,KAAsB,yBAAe3C,OAA5C;AACD;;;wBAyHwB;AACvB,UAAI,KAAKzB,QAAT,EAAmB;AACjB,eAAO,KAAKA,QAAL,CAAcqE,OAAd,CAAsB,KAAK/D,qBAA3B,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAK6D,KAAL,CAAWzD,UAAlB;AACD;AACF;;;;;;;;WA5HiB,8BAChB;AAAA,aAAM,OAAKX,QAAL,CAAc8B,KAApB;AAAA,KADgB,EAEhB;AAAA,aAAM,OAAK/B,YAAL,CAAkBwE,WAAxB;AAAA,KAFgB,EAGhB,UAACzC,KAAD,EAAQyC,WAAR;AAAA,aACEzC,MAAM4B,GAAN,CAAU,UAACvB,IAAD,EAAU;AAClB,YAAMqC,sCACDrC,KAAKsC,IADJ,CAAN;AAGA,YAAID,SAASE,WAAb,EAA0B;AACxBF,mBAASE,WAAT,GAAuB,+BAAgB;AACrCA,yBAAaF,SAASE,WADe;AAErCH;AAFqC,WAAhB,CAAvB;AAID;AACD,YAAMI,oCACDxC,KAAKyC,EADJ,CAAN;AAGA,YAAID,OAAOD,WAAX,EAAwB;AACtBC,iBAAOD,WAAP,GAAqB,+BAAgB;AACnCA,yBAAaC,OAAOD,WADe;AAEnCH;AAFmC,WAAhB,CAArB;AAID;AACD,0CACKpC,IADL;AAEEsC,gBAAMD,QAFR;AAGEI,cAAID;AAHN;AAKD,OAxBD,EAwBGE,IAxBH,iCADF;AAAA,KAHgB,C;;;;;;;WAiCV,8BACN;AAAA,aAAM,OAAKC,eAAX;AAAA,KADM,EAEN;AAAA,aAAM,OAAKpC,kBAAX;AAAA,KAFM,EAGN;AAAA,aAAO,OAAKvC,eAAL,IAAwB,OAAKA,eAAL,CAAqB4E,WAApD;AAAA,KAHM,EAIN;AAAA,aAAO,OAAK7E,gBAAL,IAAyB,OAAKA,gBAAL,CAAsB6E,WAAtD;AAAA,KAJM,EAKN;AAAA,aAAO,OAAK3E,YAAL,IAAqB,OAAKA,YAAL,CAAkB4E,WAA9C;AAAA,KALM,EAMN,UACEF,eADF,EAEEnE,UAFF,EAMK;AAAA,UAHHsE,cAGG,uEAHc,EAGd;AAAA,UAFHC,eAEG,uEAFe,EAEf;AAAA,UADHF,WACG,uEADW,EACX;;AACH,UAAM/D,aAAa,EAAnB;AACA,UAAMa,QAAQgD,gBAAgBpB,GAAhB,CAAoB,UAACvB,IAAD,EAAU;AAC1ClB,mBAAWkB,KAAKC,SAAhB,IAA6B,IAA7B;AACA,YAAM+C,aAAahD,KAAKsC,IAAL,KAActC,KAAKsC,IAAL,CAAUC,WAAV,IAAyBvC,KAAKsC,IAAL,CAAUW,eAAjD,CAAnB;AACA,YAAMC,WAAWlD,KAAKyC,EAAL,KAAYzC,KAAKyC,EAAL,CAAQF,WAAR,IAAuBvC,KAAKyC,EAAL,CAAQQ,eAA3C,CAAjB;AACA,YAAME,cAAeH,cAAcF,eAAeE,UAAf,CAAf,IAA8C,EAAlE;AACA,YAAMI,YAAaF,YAAYJ,eAAeI,QAAf,CAAb,IAA0C,EAA5D;AACA,YAAMG,kBAAmBN,gBAAgB/C,KAAKC,SAArB,CAAD,IAAqC,EAA7D;AACA,YAAMqD,UAAUT,YAAY7C,KAAKC,SAAjB,CAAhB;AACA,0CACKD,IADL;AAEEmD,kCAFF;AAGEC,8BAHF;AAIEC,0CAJF;AAKEE,0BAAgBD;AALlB;AAOD,OAfa,CAAd;AAgBA,wDACK9E,WAAWsB,MAAX,CAAkB;AAAA,eAAQ,CAAChB,WAAWkB,KAAKC,SAAhB,CAAT;AAAA,OAAlB,EAAuDyC,IAAvD,iCADL,oCAEK/C,KAFL;AAID,KAlCK,C;;;;;;;WAsCQ,8BACd;AAAA,aAAM,OAAKgD,eAAX;AAAA,KADc,EAEd;AAAA,aAAM,OAAKpC,kBAAX;AAAA,KAFc,EAGd,UAACoC,eAAD,EAAkBnE,UAAlB,EAAiC;AAC/B,UAAMgF,SAAS,EAAf;AACA,UAAMC,YAAY,EAAlB;AACA,eAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,YAAI,CAACF,UAAUE,MAAV,CAAL,EAAwB;AACtBH,iBAAOI,IAAP,CAAYD,MAAZ;AACAF,oBAAUE,MAAV,IAAoB,IAApB;AACD;AACF;AACD,eAASE,kBAAT,CAA4B7D,IAA5B,EAAkC;AAChC,YAAIA,KAAKsC,IAAL,IAAatC,KAAKsC,IAAL,CAAUC,WAA3B,EAAwC;AACtCmB,wBAAc1D,KAAKsC,IAAL,CAAUC,WAAxB;AACD,SAFD,MAEO,IAAIvC,KAAKsC,IAAL,IAAatC,KAAKsC,IAAL,CAAUW,eAA3B,EAA4C;AACjDS,wBAAc1D,KAAKsC,IAAL,CAAUW,eAAxB;AACD;AACD,YAAIjD,KAAKyC,EAAL,IAAWzC,KAAKyC,EAAL,CAAQF,WAAvB,EAAoC;AAClCmB,wBAAc1D,KAAKyC,EAAL,CAAQF,WAAtB;AACD,SAFD,MAEO,IAAIvC,KAAKyC,EAAL,IAAWzC,KAAKyC,EAAL,CAAQQ,eAAvB,EAAwC;AAC7CS,wBAAc1D,KAAKyC,EAAL,CAAQQ,eAAtB;AACD;AACF;AACDN,sBAAgBrC,OAAhB,CAAwBuD,kBAAxB;AACArF,iBAAW8B,OAAX,CAAmBuD,kBAAnB;AACA,aAAOL,MAAP;AACD,KA3Ba,C;;;;;;;WA+BH,8BACX;AAAA,aAAM,OAAK3F,QAAL,CAAc8B,KAApB;AAAA,KADW,EAEX;AAAA,aAAM,OAAKY,kBAAX;AAAA,KAFW,EAGX,UAACZ,KAAD,EAAQnB,UAAR,EAAuB;AACrB,UAAMM,aAAa,EAAnB;AACA,aAAOa,MAAM4B,GAAN,CAAU,UAACvB,IAAD,EAAU;AACzBlB,mBAAWkB,KAAKC,SAAhB,IAA6B,IAA7B;AACA,eAAOD,KAAKC,SAAZ;AACD,OAHM,EAGJ6D,MAHI,CAILtF,WACGsB,MADH,CACU;AAAA,eAAQ,CAAChB,WAAWkB,KAAKC,SAAhB,CAAT;AAAA,OADV,EAEGsB,GAFH,CAEO;AAAA,eAAQvB,KAAKC,SAAb;AAAA,OAFP,CAJK,CAAP;AAQD,KAbU,C;;;kBA7VMhD,W","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport {\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getCallHistoryReducer, {\n  getEndedCallsReducer\n} from './getCallHistoryReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport getter from '../../lib/getter';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Call history managing module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'CallMonitor',\n    { dep: 'Storage', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'CallHistoryOptions', optional: true }\n  ]\n})\nexport default class CallHistory extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {CallLog} params.callLog - callLog module instance\n   * @param {CallMonitor} params.callMonitor - callMonitor module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   */\n  constructor({\n    accountInfo,\n    callLog,\n    callMonitor,\n    storage,\n    activityMatcher,\n    contactMatcher,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._callLog = this::ensureExist(callLog, 'callLog');\n    this._storage = storage;\n    this._activityMatcher = activityMatcher;\n    this._contactMatcher = contactMatcher;\n    this._callMonitor = callMonitor;\n    if (this._storage) {\n      this._reducer = getCallHistoryReducer(this.actionTypes);\n      this._endedCallsStorageKey = 'callHistoryEndedCalls';\n      this._storage.registerReducer({\n        key: this._endedCallsStorageKey,\n        reducer: getEndedCallsReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getCallHistoryReducer(this.actionTypes, {\n        endedCalls: getEndedCallsReducer(this.actionTypes),\n      });\n    }\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready &&\n          this._accountInfo.ready\n        ),\n      });\n    }\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready\n        ),\n      });\n    }\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._processCallHistory();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._callLog.ready &&\n      (!this._callMonitor || this._callMonitor.ready) &&\n      this._accountInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._callLog.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        !this._accountInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldTriggerContactMatch(uniqueNumbers) {\n    if (this._lastProcessedNumbers !== uniqueNumbers) {\n      this._lastProcessedNumbers = uniqueNumbers;\n      if (this._contactMatcher && this._contactMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _shouldTriggerActivityMatch(sessionIds) {\n    if (this._lastProcessedIds !== sessionIds) {\n      this._lastProcessedIds = sessionIds;\n      if (this._activityMatcher && this._activityMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _getEndedCalls() {\n    if (this._callMonitor) {\n      const monitorCalls = this._callMonitor.calls;\n      const callLogCalls = this._callLog.calls;\n      if (this._lastProcessedMonitorCalls !== monitorCalls) {\n        const endedCalls = (this._lastProcessedMonitorCalls || [])\n          .filter(call => (\n            !monitorCalls.find(currentCall => call.sessionId === currentCall.sessionId) &&\n            // if the call's callLog has been fetch, skip\n            !callLogCalls.find(currentCall => call.sessionId === currentCall.sessionId)\n          ));\n        this._lastProcessedMonitorCalls = monitorCalls;\n        return endedCalls;\n      }\n    }\n    return null;\n  }\n\n  _shouldRemoveEndedCalls() {\n    const currentCalls = this._callLog.calls;\n    if (currentCalls !== this._lastProcessedCalls) {\n      this._lastProcessedCalls = currentCalls;\n      const ids = {};\n      currentCalls.forEach((call) => {\n        ids[call.sessionId] = true;\n      });\n      return this.recentlyEndedCalls.filter(call => ids[call.sessionId]);\n    }\n    return null;\n  }\n\n  _processCallHistory() {\n    const uniqueNumbers = this.uniqueNumbers;\n    if (this._shouldTriggerContactMatch(uniqueNumbers)) {\n      this._contactMatcher.triggerMatch();\n    }\n    const sessionIds = this.sessionIds;\n    if (this._shouldTriggerActivityMatch(sessionIds)) {\n      this._activityMatcher.triggerMatch();\n    }\n\n    const endedCalls = this._getEndedCalls();\n    if (endedCalls && endedCalls.length) {\n      this._addEndedCalls(endedCalls);\n    }\n\n    const shouldRemove = this._shouldRemoveEndedCalls();\n    if (shouldRemove && shouldRemove.length) {\n      this._removeEndedCalls(shouldRemove);\n    }\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n    this._lastProcessedMonitorCalls = null;\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _addEndedCalls(endedCalls) {\n    endedCalls.map((call) => {\n      call.result = 'Disconnected';\n      return call;\n    });\n    this.store.dispatch({\n      type: this.actionTypes.addEndedCalls,\n      endedCalls,\n      timestamp: Date.now(),\n    });\n    this._callLog.sync();\n  }\n\n  _removeEndedCalls(endedCalls) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEndedCalls,\n      endedCalls,\n    });\n  }\n\n  // for track click to sms in call history\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n  // for track click to call in call history\n  @proxify\n  onClickToCall() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n    });\n  }\n\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  @getter\n  normalizedCalls = createSelector(\n    () => this._callLog.calls,\n    () => this._accountInfo.countryCode,\n    (calls, countryCode) => (\n      calls.map((call) => {\n        const callFrom = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode,\n          });\n        }\n        const callTo = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      }).sort(sortByStartTime)\n    ),\n  )\n\n  @getter\n  calls = createSelector(\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    () => (this._contactMatcher && this._contactMatcher.dataMapping),\n    () => (this._activityMatcher && this._activityMatcher.dataMapping),\n    () => (this._callMonitor && this._callMonitor.callMatched),\n    (\n      normalizedCalls,\n      endedCalls,\n      contactMapping = {},\n      activityMapping = {},\n      callMatched = {}\n    ) => {\n      const sessionIds = {};\n      const calls = normalizedCalls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        const activityMatches = (activityMapping[call.sessionId]) || [];\n        const matched = callMatched[call.sessionId];\n        return {\n          ...call,\n          fromMatches,\n          toMatches,\n          activityMatches,\n          toNumberEntity: matched,\n        };\n      });\n      return [\n        ...endedCalls.filter(call => !sessionIds[call.sessionId]).sort(sortByStartTime),\n        ...calls\n      ];\n    }\n  )\n\n  @getter\n  uniqueNumbers = createSelector(\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    (normalizedCalls, endedCalls) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (!numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      function addNumbersFromCall(call) {\n        if (call.from && call.from.phoneNumber) {\n          addIfNotExist(call.from.phoneNumber);\n        } else if (call.from && call.from.extensionNumber) {\n          addIfNotExist(call.from.extensionNumber);\n        }\n        if (call.to && call.to.phoneNumber) {\n          addIfNotExist(call.to.phoneNumber);\n        } else if (call.to && call.to.extensionNumber) {\n          addIfNotExist(call.to.extensionNumber);\n        }\n      }\n      normalizedCalls.forEach(addNumbersFromCall);\n      endedCalls.forEach(addNumbersFromCall);\n      return output;\n    },\n  )\n\n  @getter\n  sessionIds = createSelector(\n    () => this._callLog.calls,\n    () => this.recentlyEndedCalls,\n    (calls, endedCalls) => {\n      const sessionIds = {};\n      return calls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      }).concat(\n        endedCalls\n          .filter(call => !sessionIds[call.sessionId])\n          .map(call => call.sessionId)\n      );\n    },\n  )\n\n  get recentlyEndedCalls() {\n    if (this._storage) {\n      return this._storage.getItem(this._endedCallsStorageKey);\n    } else {\n      return this.state.endedCalls;\n    }\n  }\n}\n"]}