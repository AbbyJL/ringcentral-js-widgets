{"version":3,"sources":["modules/CallHistory/getCallHistoryReducer.js"],"names":["getEndedCallsReducer","getCallHistoryReducer","DEFAULT_CLEAN_TIME","types","state","type","endedCalls","timestamp","addEndedCalls","newState","slice","call","callWithDuration","duration","Math","floor","startTime","idx","item","sessionId","push","removeEndedCalls","filter","find","shouldRemove","Date","getTime","resetSuccess","reducers","status"],"mappings":";;;;;;;;;;QAMgBA,oB,GAAAA,oB;kBAqCQC,qB;;AA3CxB;;AACA;;AACA;;;;;;AAEA,IAAMC,qBAAqB,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1C,C,CAAgD;;AAEzC,SAASF,oBAAT,CAA8BG,KAA9B,EAAqC;AAC1C,SAAO,YAAiD;AAAA,QAAhDC,KAAgD,uEAAxC,EAAwC;AAAA;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AACtD,YAAQF,IAAR;AACE,WAAKF,MAAMK,aAAX;AAA0B;AACxB,cAAMC,WAAWL,MAAMM,KAAN,EAAjB;AACA,8BAAQ,UAACC,IAAD,EAAU;AAChB,gBAAMC,8CACDD,IADC;AAEJE,wBAAUC,KAAKC,KAAL,CAAW,CAACR,YAAYI,KAAKK,SAAlB,IAA+B,IAA1C;AAFN,cAAN;AAIA,gBAAMC,MAAM,sBAAU;AAAA,qBAAQC,KAAKC,SAAL,KAAmBR,KAAKQ,SAAhC;AAAA,aAAV,EAAqDV,QAArD,CAAZ;AACA,gBAAIQ,MAAM,CAAC,CAAX,EAAc;AACZ;AACAR,uBAASQ,GAAT,IAAgBL,gBAAhB;AACD,aAHD,MAGO;AACLH,uBAASW,IAAT,CAAcR,gBAAd;AACD;AACF,WAZD,EAYGN,UAZH;AAaA,iBAAOG,QAAP;AACD;AACD,WAAKN,MAAMkB,gBAAX;AACE,eAAOjB,MAAMkB,MAAN,CAAa;AAAA,iBAClB,CAAChB,WAAWiB,IAAX,CAAgB;AAAA,mBAAgBC,aAAaL,SAAb,KAA2BR,KAAKQ,SAAhD;AAAA,WAAhB,CAAD;AACE;AACC,cAAIM,IAAJ,EAAD,CAAaC,OAAb,KAAyBf,KAAKK,SAA9B,GAA0Cd,kBAH1B;AAAA,SAAb,CAAP;AAMF,WAAKC,MAAMwB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOvB,KAAP;AA5BJ;AA8BD,GA/BD;AAgCD;;AAGD;AACe,SAASH,qBAAT,CAA+BE,KAA/B,EAAsCyB,QAAtC,EAAgD;AAC7D,SAAO,uDACFA,QADE;AAELC,YAAQ,sCAAuB1B,KAAvB;AAFH,KAAP;AAID","file":"getCallHistoryReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { forEach, findIndex } from 'ramda';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1day\n\nexport function getEndedCallsReducer(types) {\n  return (state = [], { type, endedCalls, timestamp }) => {\n    switch (type) {\n      case types.addEndedCalls: {\n        const newState = state.slice();\n        forEach((call) => {\n          const callWithDuration = {\n            ...call,\n            duration: Math.floor((timestamp - call.startTime) / 1000),\n          };\n          const idx = findIndex(item => item.sessionId === call.sessionId, newState);\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = callWithDuration;\n          } else {\n            newState.push(callWithDuration);\n          }\n        }, endedCalls);\n        return newState;\n      }\n      case types.removeEndedCalls:\n        return state.filter(call => (\n          !endedCalls.find(shouldRemove => shouldRemove.sessionId === call.sessionId) || (\n            // clean current overdue ended call (default clean time: 1day).\n            (new Date()).getTime() - call.startTime > DEFAULT_CLEAN_TIME\n          )\n        ));\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallHistoryReducer(types, reducers) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}