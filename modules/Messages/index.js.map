{"version":3,"sources":["modules/Messages/index.js"],"names":["Messages","deps","dep","optional","auth","messageStore","extensionInfo","defaultPerPage","contactMatcher","conversationLogger","rolesAndPermissions","options","actionTypes","_contactMatcher","_conversationLogger","_auth","ensureExist","_messageStore","_extensionInfo","_rolesAndPermissions","_reducer","addSelector","conversations","messages","output","numberMap","addIfNotExist","number","push","forEach","message","from","phoneNumber","extensionNumber","to","length","toUser","state","searchInput","input","dataMapping","loggingMap","accessToken","contactMapping","conversationLogMapping","map","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","allConversations","typeFilter","messageTypes","all","filter","readTextPermissions","conversation","voicemailPermissions","readFaxPermissions","text","voiceMail","fax","_selectors","typeFilteredConversations","effectiveSearchString","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","find","indexOf","matchOrder","entity","name","subject","matchedMessage","item","conversationId","sort","sortSearchResults","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","_lastProcessedNumbers","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","triggerMatch","loggedIn","pending","dispatch","type","init","initSuccess","reset","resetSuccess","page","setPage","nextPage","updateSearchInput","updateTypeFilter","status","moduleStatuses","filteredConversations","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getMessagesReducer from './getMessagesReducer';\nimport {\n  getNumbersFromMessage,\n  sortSearchResults,\n  messageIsTextMessage,\n  messageIsVoicemail,\n  getVoicemailAttachment,\n  getFaxAttachment,\n  messageIsFax,\n} from '../../lib/messageHelper';\nimport cleanNumber from '../../lib/cleanNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport messageTypes from '../../enums/messageTypes';\n\n/**\n * @class\n * @description Conversation list managing module\n */\n@Module({\n  deps: [\n    'MessageStore',\n    'ExtensionInfo',\n    'Auth',\n    'RolesAndPermissions',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'MessagesOptions', optional: true }\n  ]\n})\nexport default class Messages extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationLogger} params.conversationLogger - conversationLogger module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Number} params.defaultPerPage - default numbers of perPage, default 20\n   */\n  constructor({\n    auth,\n    messageStore,\n    extensionInfo,\n    defaultPerPage = 20,\n    contactMatcher,\n    conversationLogger,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._auth = this::ensureExist(auth, 'auth');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._reducer = getMessagesReducer(this.actionTypes, defaultPerPage);\n\n    this.addSelector('uniqueNumbers',\n      () => this._messageStore.conversations,\n      (messages) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        messages.forEach((message) => {\n          if (message.from && message.from.phoneNumber) {\n            addIfNotExist(message.from.phoneNumber);\n          } else if (message.from && message.from.extensionNumber) {\n            addIfNotExist(message.from.extensionNumber);\n          }\n          if (message.to && message.to.length > 0) {\n            message.to.forEach((toUser) => {\n              if (toUser && toUser.phoneNumber) {\n                addIfNotExist(toUser.phoneNumber);\n              } else if (toUser && toUser.extensionNumber) {\n                addIfNotExist(toUser.extensionNumber);\n              }\n            });\n          }\n        });\n        return output;\n      },\n    );\n    this.addSelector('effectiveSearchString',\n      () => this.state.searchInput,\n      (input) => {\n        if (input.length >= 3) return input;\n        return '';\n      }\n    );\n\n    this.addSelector('allConversations',\n      () => this._messageStore.conversations,\n      () => this._extensionInfo.extensionNumber,\n      () => this._contactMatcher && this._contactMatcher.dataMapping,\n      () => this._conversationLogger && this._conversationLogger.loggingMap,\n      () => this._conversationLogger && this._conversationLogger.dataMapping,\n      () => this._auth.accessToken,\n      (\n        conversations,\n        extensionNumber,\n        contactMapping = {},\n        loggingMap = {},\n        conversationLogMapping = {},\n        accessToken,\n      ) => (\n        conversations.map((message) => {\n          const {\n            self,\n            correspondents,\n          } = getNumbersFromMessage({ extensionNumber, message });\n          const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n          const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n          const correspondentMatches = correspondents.reduce((matches, contact) => {\n            const number = contact && (contact.phoneNumber || contact.extensionNumber);\n            return number && contactMapping[number] && contactMapping[number].length ?\n              matches.concat(contactMapping[number]) :\n              matches;\n          }, []);\n          const conversationLogId = this._conversationLogger ?\n            this._conversationLogger.getConversationLogId(message) :\n            null;\n          const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n          const conversationMatches = conversationLogMapping[conversationLogId] || [];\n          let voicemailAttachment = null;\n          if (messageIsVoicemail(message)) {\n            voicemailAttachment = getVoicemailAttachment(message, accessToken);\n          }\n          let faxAttachment = null;\n          if (messageIsFax(message)) {\n            faxAttachment = getFaxAttachment(message, accessToken);\n          }\n          return {\n            ...message,\n            self,\n            selfMatches,\n            correspondents,\n            correspondentMatches,\n            conversationLogId,\n            isLogging,\n            conversationMatches,\n            voicemailAttachment,\n            faxAttachment,\n            lastMatchedCorrespondentEntity: (\n              this._conversationLogger &&\n                this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n            ) || null,\n          };\n        })\n      ),\n    );\n\n    this.addSelector('typeFilteredConversations',\n      () => this.allConversations,\n      () => this.typeFilter,\n      (allConversations, typeFilter) => {\n        switch (typeFilter) {\n          case messageTypes.all: {\n            return allConversations.filter(\n              conversation => (\n                (\n                  this._rolesAndPermissions.readTextPermissions ||\n                  !messageIsTextMessage(conversation)\n                )\n                &&\n                (\n                  this._rolesAndPermissions.voicemailPermissions ||\n                  !messageIsVoicemail(conversation)\n                )\n                &&\n                (\n                  this._rolesAndPermissions.readFaxPermissions ||\n                  !messageIsFax(conversation)\n                )\n              )\n            );\n          }\n          case messageTypes.text:\n            return allConversations.filter(\n              conversation => messageIsTextMessage(conversation)\n            );\n          case messageTypes.voiceMail:\n            return allConversations.filter(\n              conversation => messageIsVoicemail(conversation)\n            );\n          case messageTypes.fax:\n            return allConversations.filter(\n              conversation => messageIsFax(conversation)\n            );\n          default:\n            return allConversations;\n        }\n      }\n    );\n\n    this.addSelector('filteredConversations',\n      this._selectors.typeFilteredConversations,\n      () => this._selectors.effectiveSearchString(),\n      (allConversations, effectiveSearchString) => {\n        if (effectiveSearchString !== '') {\n          const searchResults = [];\n          const cleanRegex = /[^\\d*+#\\s]/g;\n          const searchString = effectiveSearchString.toLowerCase();\n          const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n          allConversations.forEach((message) => {\n            if (searchNumber === effectiveSearchString) {\n              const cleanedNumber = cleanNumber(effectiveSearchString);\n              if (\n                message.correspondents.find(\n                  contact => (\n                    cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                      .indexOf(cleanedNumber) > -1\n                  )\n                )\n              ) {\n                // match by phoneNumber or extensionNumber\n                searchResults.push({\n                  ...message,\n                  matchOrder: 0,\n                });\n                return;\n              }\n            }\n            if (message.correspondentMatches.length) {\n              if (\n                message.correspondentMatches.find(entity => (\n                  (entity.name || '').toLowerCase().indexOf(searchString) > -1\n                ))\n              ) {\n                // match by entity's name\n                searchResults.push({\n                  ...message,\n                  matchOrder: 0,\n                });\n                return;\n              }\n            } else if (message.correspondents.find(contact => (\n              (contact.name || '').toLowerCase().indexOf(searchString) > -1\n            ))) {\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n\n            // try match messages of the same conversation\n            if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n              searchResults.push({\n                ...message,\n                matchOrder: 1,\n              });\n              return;\n            }\n            const matchedMessage = this._messageStore.messages.find(item => (\n              item.conversationId === message.conversationId &&\n              (item.subject || '').toLowerCase().indexOf(searchString) > -1\n            ));\n            if (matchedMessage) {\n              searchResults.push({\n                ...message,\n                matchedMessage,\n                matchOrder: 1,\n              });\n            }\n          });\n          return searchResults.sort(sortSearchResults);\n        }\n        return allConversations.sort(sortSearchResults);\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (this._lastProcessedNumbers !== this.uniqueNumbers) {\n      this._lastProcessedNumbers = this.uniqueNumbers;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      this._messageStore.ready &&\n      this._extensionInfo.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        !this._messageStore.ready ||\n        !this._extensionInfo.ready ||\n        !this._rolesAndPermissions ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async _getCurrentPageMessages(page) {\n    this.store.dispatch({\n      type: this.actionTypes.setPage,\n      page,\n    });\n  }\n\n  @proxify\n  async loadNextPageMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.nextPage,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get allConversations() {\n    return this._selectors.allConversations();\n  }\n\n  get filteredConversations() {\n    return this._selectors.filteredConversations();\n  }\n\n  get uniqueNumbers() {\n    return this._selectors.uniqueNumbers();\n  }\n}\n"]}