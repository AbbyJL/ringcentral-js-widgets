{"version":3,"sources":["modules/GlipGroups/index.js"],"names":["glipGroupRegExp","subscriptionFilter","DEFAULT_PER_PAGE","DEFAULT_TTL","DEFAULT_RETRY","formatGroup","group","personsMap","postsMap","ownerId","id","detailMembers","members","forEach","memberId","push","isMe","newGroup","updatedTime","Date","lastModifiedTime","getTime","latestPost","creator","creatorId","postCreationTime","creationTime","GlipGroups","deps","dep","optional","auth","subscription","client","tabManager","glipPersons","glipPosts","storage","timeToRetry","ttl","polling","disableCache","perPage","options","actionTypes","_auth","ensureExist","_client","_subscription","_glipPersons","_glipPosts","_tabManager","_ttl","_timeToRetry","_polling","_perPage","_promise","_lastMessage","_subscriptionFilters","_storage","_dataStorageKey","_timestampStorageKey","_currentGroupIdStorageKey","_reducer","registerReducer","key","reducer","timestamp","data","currentGroupId","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_init","_isDataReady","initSuccess","loadPersons","uniqueMemberIds","currentGroup","updateCurrentGroupId","groups","_preloadGroupPosts","_shouldReset","_clearTimeout","resetSuccess","_shouldSubscribe","_processSubscription","loggedIn","ready","_readyCheckFn","pending","message","test","event","body","eventType","removeGroup","updateGroup","loadPosts","active","status","moduleStatuses","initializing","_shouldFetch","fetchData","console","error","_retry","_startPolling","_subscriptionHandleFn","searchFilter","pageNumber","updateFilter","groupId","glip","list","result","fetch","_fetchFunction","fetchSuccess","now","fetchError","_fetchData","personId","post","state","getItem","Pollable","proxify","getter","allGroups","filterString","toLowerCase","filter","name","indexOf","filteredGroups","count","sortedGroups","map","sort","a","b","slice","memberIds","memberIdsMap","find","g","undefined","posts","reversePosts","reverse"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport isBlank from '../../lib/isBlank';\nimport sleep from '../../lib/sleep';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\nimport proxify from '../../lib/proxy/proxify';\n\nimport getReducer, {\n  getDataReducer,\n  getCurrentGroupIdReducer,\n  getTimestampReducer,\n} from './getReducer';\nimport actionTypes from './actionTypes';\n\nconst glipGroupRegExp = /glip\\/groups$/;\nconst subscriptionFilter = '/glip/groups';\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\n\nfunction formatGroup(group, personsMap, postsMap = {}, ownerId) {\n  if (!group || !group.id) {\n    return {};\n  }\n  const detailMembers = [];\n  if (group.members) {\n    group.members.forEach((memberId) => {\n      if (personsMap[memberId]) {\n        detailMembers.push({\n          ...personsMap[memberId],\n          isMe: ownerId === memberId,\n        });\n      }\n    });\n  }\n  const newGroup = {\n    ...group,\n    detailMembers,\n    updatedTime: (new Date(group.lastModifiedTime)).getTime(),\n  };\n  const latestPost =\n    postsMap[group.id] && postsMap[group.id][0];\n  if (latestPost) {\n    newGroup.latestPost = {\n      ...latestPost,\n      creator: personsMap[latestPost.creatorId],\n    };\n    const postCreationTime = (new Date(latestPost.creationTime)).getTime();\n    if (postCreationTime > newGroup.updatedTime) {\n      newGroup.updatedTime = postCreationTime;\n    }\n  }\n  return newGroup;\n}\n\n/**\n * @class\n * @description Accound info managing module.\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    'Subscription',\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'GlipPersons', optional: true },\n    { dep: 'GlipPosts', optional: true },\n    { dep: 'GLipGroupsOptions', optional: true }\n  ]\n})\nexport default class GlipGroups extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {GlipPersons} params.glipPersons - glipPersons module instance\n   * @param {GlipPosts} params.glipPosts - glipPosts module instance\n   * @param {Storage} params.storage - storage module instance\n   */\n  constructor({\n    auth,\n    subscription,\n    client,\n    tabManager,\n    glipPersons,\n    glipPosts,\n    storage,\n    timeToRetry = DEFAULT_RETRY,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    perPage = DEFAULT_PER_PAGE,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._glipPersons = glipPersons;\n    this._glipPosts = glipPosts;\n    this._tabManager = tabManager;\n\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._perPage = perPage;\n\n    this._promise = null;\n    this._lastMessage = null;\n\n    this._subscriptionFilters = [subscriptionFilter];\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'glipGroupsData';\n    this._timestampStorageKey = 'glipGroupsTimestamp';\n    this._currentGroupIdStorageKey = 'glipGroupsCurrentGroupId';\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._timestampStorageKey,\n        reducer: getTimestampReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._currentGroupIdStorageKey,\n        reducer: getCurrentGroupIdReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        timestamp: getTimestampReducer(this.actionTypes),\n        data: getDataReducer(this.actionTypes),\n        currentGroupId: getCurrentGroupIdReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._init();\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      if (this._glipPersons) {\n        this._glipPersons.loadPersons(this.uniqueMemberIds);\n      }\n      if (this.currentGroupId && !this.currentGroup.id) {\n        this.updateCurrentGroupId(this.groups[0] && this.groups[0].id);\n      }\n      this._preloadGroupPosts();\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this._shouldSubscribe()) {\n      this._processSubscription();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._readyCheckFn || this._readyCheckFn()) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._glipPosts || this._glipPosts.ready) &&\n      (!this._glipPersons || this._glipPersons.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        (this._readyCheckFn && !this._readyCheckFn()) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._glipPosts && !this._glipPosts.ready) ||\n        (this._glipPersons && !this._glipPersons.ready) ||\n        (this._tabManager && !this._tabManager.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldSubscribe() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      glipGroupRegExp.test(message.event) &&\n      message.body\n    ) {\n      const {\n        eventType,\n        ...group\n      } = message.body;\n      if (eventType === 'GroupLeft') {\n        this.store.dispatch({\n          type: this.actionTypes.removeGroup,\n          group,\n        });\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      if (this._glipPersons) {\n        this._glipPersons.loadPersons(group.members);\n      }\n      this._glipPosts.loadPosts(group.id);\n    }\n  }\n\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n\n  _isDataReady() {\n    return this.status === moduleStatuses.initializing &&\n      this.timestamp !== null;\n  }\n\n  async _init() {\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._subscription && this._subscriptionFilters) {\n      this._subscription.subscribe(this._subscriptionFilters);\n    }\n  }\n\n  _processSubscription() {\n    this._lastMessage = this._subscription.message;\n    this._subscriptionHandleFn(this._lastMessage);\n  }\n\n  async _preloadGroupPosts() {\n    for (const group of this.groups) {\n      if (this._glipPosts) {\n        await sleep(200);\n        await this._glipPosts.loadPosts(group.id);\n      }\n    }\n  }\n\n  @proxify\n  updateFilter({ searchFilter, pageNumber }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      searchFilter,\n      pageNumber,\n    });\n  }\n\n  @proxify\n  updateCurrentGroupId(groupId) {\n    if (!groupId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentGroupId,\n      groupId,\n    });\n    this._glipPosts.loadPosts(groupId);\n    if (this._glipPersons) {\n      this._glipPersons.loadPersons(\n        this.currentGroup && this.currentGroup.members\n      );\n    }\n  }\n\n  async _fetchFunction() {\n    const result = await this._client.glip().groups().list();\n    return result;\n  }\n\n  async _fetchData() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const data = await this._fetchFunction();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          data,\n          timestamp: Date.now(),\n        });\n        if (this._polling) {\n          this._startPolling();\n        }\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    return this._promise;\n  }\n\n  @proxify\n  async startChat(personId) {\n    try {\n      const group = await this._client.glip().groups().post({\n        type: 'PrivateChat',\n        members: [this._auth.ownerId, personId]\n      });\n      group.lastModifiedTime = Date.now();\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.updateCurrentGroupId,\n        groupId: group.id,\n      });\n      return group;\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  @getter\n  allGroups = createSelector(\n    () => this.data,\n    data => (data || []),\n  )\n\n  @getter\n  filteredGroups = createSelector(\n    () => this.allGroups,\n    () => this.searchFilter,\n    (allGroups, searchFilter) => {\n      if (isBlank(searchFilter)) {\n        return allGroups;\n      }\n      const filterString = searchFilter.toLowerCase();\n      return allGroups.filter((group) => {\n        const name = group.name && group.name.toLowerCase();\n        if (name && name.indexOf(filterString) > -1) {\n          return true;\n        }\n        return false;\n      });\n    },\n  )\n\n  @getter\n  groups = createSelector(\n    () => this.filteredGroups,\n    () => this.pageNumber,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    () => (this._glipPosts && this._glipPosts.postsMap) || {},\n    (filteredGroups, pageNumber, personsMap, postsMap) => {\n      const count = pageNumber * this._perPage;\n      const sortedGroups =\n        filteredGroups.map(group => formatGroup(group, personsMap, postsMap, this._auth.ownerId))\n          .sort((a, b) => {\n            if (a.updatedTime === b.updatedTime) return 0;\n            return a.updatedTime > b.updatedTime ?\n              -1 :\n              1;\n          });\n      return sortedGroups.slice(0, count);\n    },\n  )\n\n  @getter\n  uniqueMemberIds = createSelector(\n    () => this.allGroups,\n    (groups) => {\n      const memberIds = [];\n      const memberIdsMap = {};\n      groups.forEach((group) => {\n        group.members.forEach((memberId) => {\n          if (memberIdsMap[memberId]) {\n            return;\n          }\n          memberIdsMap[memberId] = true;\n          memberIds.push(memberId);\n        });\n      });\n      return memberIds;\n    },\n  )\n\n  @getter\n  currentGroup = createSelector(\n    () => this.allGroups,\n    () => this.currentGroupId,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (allGroups, currentGroupId, personsMap) => {\n      const group = allGroups.find(g => g.id === currentGroupId) || {};\n      return formatGroup(group, personsMap, undefined, this._auth.ownerId);\n    },\n  )\n\n  @getter\n  currentGroupPosts = createSelector(\n    () => (this._glipPosts && this._glipPosts.postsMap) || {},\n    () => this.currentGroupId,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (postsMap, currentGroupId, personsMap) => {\n      const posts = postsMap[currentGroupId] || [];\n      const reversePosts = posts.slice(0).reverse();\n      return reversePosts.map((post) => {\n        const creator = personsMap[post.creatorId];\n        return {\n          ...post,\n          creator,\n        };\n      });\n    },\n  )\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get pageNumber() {\n    return this.state.pageNumber;\n  }\n\n  get data() {\n    return this._storage ?\n      this._storage.getItem(this._dataStorageKey) :\n      this.state.data;\n  }\n\n  get timestamp() {\n    return this._storage ?\n      this._storage.getItem(this._timestampStorageKey) :\n      this.state.timestamp;\n  }\n\n  get currentGroupId() {\n    return this._storage ?\n      this._storage.getItem(this._currentGroupIdStorageKey) :\n      this.state.currentGroupId;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n}\n"]}