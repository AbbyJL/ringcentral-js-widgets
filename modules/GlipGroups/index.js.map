{"version":3,"sources":["modules/GlipGroups/index.js"],"names":["glipGroupRegExp","subscriptionFilter","DEFAULT_PER_PAGE","DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_RECORD_COUNT_PER_REQ","DEFAULT_PRELOAD_POSTS_DELAY_TTL","formatGroup","group","personsMap","postsMap","ownerId","id","detailMembers","members","forEach","memberId","push","isMe","newGroup","updatedTime","Date","lastModifiedTime","getTime","latestPost","creator","creatorId","postCreationTime","creationTime","getUniqueMemberIds","groups","memberIds","memberIdsMap","GlipGroups","deps","dep","optional","auth","subscription","client","tabManager","glipPersons","glipPosts","storage","connectivityMonitor","timeToRetry","ttl","polling","disableCache","perPage","recordCountPerReq","preloadPosts","preloadPostsDelayTtl","options","actionTypes","_auth","ensureExist","_client","_subscription","_connectivityMonitor","_glipPersons","_glipPosts","_tabManager","_ttl","_timeToRetry","_polling","_perPage","_recordCountPerReq","_preloadPosts","_preloadedPosts","_preloadPostsDelayTtl","_promise","_lastMessage","_subscriptionFilters","_storage","_dataStorageKey","_timestampStorageKey","_currentGroupIdStorageKey","_reducer","registerReducer","key","reducer","timestamp","data","currentGroupId","addNewPostListener","onNewPost","post","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_init","_isDataReady","initSuccess","_onDataReady","_shouldReset","_clearTimeout","resetSuccess","_shouldSubscribe","_processSubscription","ready","_connectivity","connectivity","fetchData","_preloadGroupPosts","loggedIn","_readyCheckFn","pending","message","loadPersons","groupMemberIds","currentGroup","updateCurrentGroupId","test","event","body","eventType","removeGroup","updateGroup","loadPosts","active","status","moduleStatuses","initializing","_shouldFetch","console","error","_retry","_startPolling","_subscriptionHandleFn","force","fetchPosts","readTimeMap","updateReadTime","now","searchFilter","pageNumber","updateFilter","length","groupId","lastGroupId","lastGroupPosts","currentGroupPosts","glip","list","recordCount","result","fetch","_fetchFunction","fetchSuccess","fetchError","_fetchData","personId","state","getItem","Pollable","proxify","getter","map","allGroups","filterString","toLowerCase","filter","name","indexOf","groupUsernames","m","firstName","lastName","join","filteredGroups","count","sortedGroups","sort","a","b","slice","noTeamGroups","g","find","undefined","posts","reversePosts","reverse","sentByMe","readTime","unread"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport isBlank from '../../lib/isBlank';\nimport sleep from '../../lib/sleep';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\nimport proxify from '../../lib/proxy/proxify';\n\nimport getReducer, {\n  getDataReducer,\n  getCurrentGroupIdReducer,\n  getTimestampReducer,\n} from './getReducer';\nimport actionTypes from './actionTypes';\n\nconst glipGroupRegExp = /glip\\/groups$/;\nconst subscriptionFilter = '/glip/groups';\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_RECORD_COUNT_PER_REQ = 250;\nconst DEFAULT_PRELOAD_POSTS_DELAY_TTL = 800;\n\nfunction formatGroup(group, personsMap, postsMap = {}, ownerId) {\n  if (!group || !group.id) {\n    return {};\n  }\n  const detailMembers = [];\n  if (group.members) {\n    group.members.forEach((memberId) => {\n      if (personsMap[memberId]) {\n        detailMembers.push({\n          ...personsMap[memberId],\n          isMe: ownerId === memberId,\n        });\n      }\n    });\n  }\n  const newGroup = {\n    ...group,\n    detailMembers,\n    updatedTime: (new Date(group.lastModifiedTime)).getTime(),\n  };\n  const latestPost =\n    postsMap[group.id] && postsMap[group.id][0];\n  if (latestPost) {\n    newGroup.latestPost = {\n      ...latestPost,\n      creator: personsMap[latestPost.creatorId],\n    };\n    const postCreationTime = (new Date(latestPost.creationTime)).getTime();\n    if (postCreationTime > newGroup.updatedTime) {\n      newGroup.updatedTime = postCreationTime;\n    }\n  }\n  return newGroup;\n}\n\nfunction getUniqueMemberIds(groups) {\n  const memberIds = [];\n  const memberIdsMap = {};\n  groups.forEach((group) => {\n    group.members.forEach((memberId) => {\n      if (memberIdsMap[memberId]) {\n        return;\n      }\n      memberIdsMap[memberId] = true;\n      memberIds.push(memberId);\n    });\n  });\n  return memberIds;\n}\n\n/**\n * @class\n * @description Accound info managing module.\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    'Subscription',\n    { dep: 'ConnectivityMonitor', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'GlipPersons', optional: true },\n    { dep: 'GlipPosts', optional: true },\n    { dep: 'GLipGroupsOptions', optional: true }\n  ]\n})\nexport default class GlipGroups extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {GlipPersons} params.glipPersons - glipPersons module instance\n   * @param {GlipPosts} params.glipPosts - glipPosts module instance\n   * @param {Storage} params.storage - storage module instance\n   */\n  constructor({\n    auth,\n    subscription,\n    client,\n    tabManager,\n    glipPersons,\n    glipPosts,\n    storage,\n    connectivityMonitor,\n    timeToRetry = DEFAULT_RETRY,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    perPage = DEFAULT_PER_PAGE,\n    recordCountPerReq = DEFAULT_RECORD_COUNT_PER_REQ,\n    preloadPosts = true,\n    preloadPostsDelayTtl = DEFAULT_PRELOAD_POSTS_DELAY_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = connectivityMonitor;\n    this._glipPersons = glipPersons;\n    this._glipPosts = glipPosts;\n    this._tabManager = tabManager;\n\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._perPage = perPage;\n    this._recordCountPerReq = recordCountPerReq;\n    this._preloadPosts = preloadPosts;\n    this._preloadedPosts = {};\n    this._preloadPostsDelayTtl = preloadPostsDelayTtl;\n\n    this._promise = null;\n    this._lastMessage = null;\n\n    this._subscriptionFilters = [subscriptionFilter];\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'glipGroupsData';\n    this._timestampStorageKey = 'glipGroupsTimestamp';\n    this._currentGroupIdStorageKey = 'glipGroupsCurrentGroupId';\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._timestampStorageKey,\n        reducer: getTimestampReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._currentGroupIdStorageKey,\n        reducer: getCurrentGroupIdReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        timestamp: getTimestampReducer(this.actionTypes),\n        data: getDataReducer(this.actionTypes),\n        currentGroupId: getCurrentGroupIdReducer(this.actionTypes),\n      });\n    }\n\n    if (this._glipPosts) {\n      this._glipPosts.addNewPostListener(post => this.onNewPost(post));\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._init();\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._onDataReady()\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this._shouldSubscribe()) {\n      this._processSubscription();\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (!this._connectivity) {\n        return;\n      }\n      await this.fetchData();\n      if (this._preloadPosts) {\n        this._preloadedPosts = {};\n        this._preloadGroupPosts(true);\n      }\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      (!this._storage || this._storage.ready) &&\n      (!this._readyCheckFn || this._readyCheckFn()) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._glipPosts || this._glipPosts.ready) &&\n      (!this._glipPersons || this._glipPersons.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        (this._readyCheckFn && !this._readyCheckFn()) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._glipPosts && !this._glipPosts.ready) ||\n        (this._glipPersons && !this._glipPersons.ready) ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        (this._tabManager && !this._tabManager.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldSubscribe() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  _onDataReady() {\n    if (this._glipPersons) {\n      this._glipPersons.loadPersons(this.groupMemberIds);\n    }\n    if (this.currentGroupId && !this.currentGroup.id) {\n      this.updateCurrentGroupId(this.groups[0] && this.groups[0].id);\n    }\n    if (this._preloadPosts) {\n      this._preloadedPosts = {};\n      this._preloadGroupPosts();\n    }\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      glipGroupRegExp.test(message.event) &&\n      message.body\n    ) {\n      const {\n        eventType,\n        ...group\n      } = message.body;\n      if (eventType === 'GroupLeft') {\n        this.store.dispatch({\n          type: this.actionTypes.removeGroup,\n          group,\n        });\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      if (this._glipPersons) {\n        this._glipPersons.loadPersons(group.members);\n      }\n      this._glipPosts.loadPosts(group.id);\n    }\n  }\n\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n\n  _isDataReady() {\n    return this.status === moduleStatuses.initializing &&\n      this.timestamp !== null;\n  }\n\n  async _init() {\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._subscription && this._subscriptionFilters) {\n      this._subscription.subscribe(this._subscriptionFilters);\n    }\n    if (this._connectivityMonitor) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n    }\n  }\n\n  _processSubscription() {\n    this._lastMessage = this._subscription.message;\n    this._subscriptionHandleFn(this._lastMessage);\n  }\n\n  async _preloadGroupPosts(force) {\n    for (const group of this.groups) {\n      if (!this._glipPosts) {\n        break;\n      }\n      if (this._preloadedPosts[group.id]) {\n        continue;\n      }\n      this._preloadedPosts[group.id] = true;\n      if (!this._glipPosts.postsMap[group.id] || force) {\n        await sleep(this._preloadPostsDelayTtl);\n        if (!this._glipPosts.postsMap[group.id] || force) {\n          await this._glipPosts.fetchPosts(group.id);\n        }\n      }\n      if (!this._glipPosts.readTimeMap[group.id]) {\n        this._glipPosts.updateReadTime(group.id, (Date.now() - (1000 * 3600 * 2)));\n      }\n    }\n  }\n\n  @proxify\n  updateFilter({ searchFilter, pageNumber }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      searchFilter,\n      pageNumber,\n    });\n    if (this._preloadPosts && this.groups.length <= this._perPage * 2) {\n      this._preloadGroupPosts();\n    }\n  }\n\n  @proxify\n  updateCurrentGroupId(groupId) {\n    if (!groupId) {\n      return;\n    }\n    const lastGroupId = this.currentGroupId;\n    const lastGroupPosts = this.currentGroupPosts;\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentGroupId,\n      groupId,\n    });\n    if (this._glipPersons) {\n      this._glipPersons.loadPersons(\n        this.currentGroup && this.currentGroup.members\n      );\n    }\n    if (!this._glipPosts) {\n      return;\n    }\n    if (lastGroupPosts.length > 20) {\n      this._glipPosts.fetchPosts(lastGroupId);\n    }\n    this._glipPosts.loadPosts(groupId);\n    this._glipPosts.updateReadTime(groupId);\n  }\n\n  async _fetchFunction() {\n    const result = await this._client.glip().groups().list({\n      recordCount: this._recordCountPerReq,\n    });\n    return result;\n  }\n\n  async _fetchData() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const data = await this._fetchFunction();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          data,\n          timestamp: Date.now(),\n        });\n        if (this._polling) {\n          this._startPolling();\n        }\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    return this._promise;\n  }\n\n  @proxify\n  async startChat(personId) {\n    try {\n      const group = await this._client.glip().groups().post({\n        type: 'PrivateChat',\n        members: [this._auth.ownerId, personId]\n      });\n      group.lastModifiedTime = Date.now();\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.updateCurrentGroupId,\n        groupId: group.id,\n      });\n      return group;\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  onNewPost(post) {\n    if (post.groupId === this.currentGroupId && this._glipPosts) {\n      this._glipPosts.updateReadTime(post.groupId);\n    }\n  }\n\n  @getter\n  allGroups = createSelector(\n    () => this.data,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    () => (this._glipPosts && this._glipPosts.postsMap) || {},\n    () => this._auth.ownerId,\n    (data, personsMap, postsMap, ownerId) => {\n      return (data || []).map(\n        group => formatGroup(group, personsMap, postsMap, ownerId)\n      );\n    },\n  )\n\n  @getter\n  filteredGroups = createSelector(\n    () => this.allGroups,\n    () => this.searchFilter,\n    (allGroups, searchFilter) => {\n      if (isBlank(searchFilter)) {\n        return allGroups;\n      }\n      const filterString = searchFilter.toLowerCase();\n      return allGroups.filter((group) => {\n        const name = group.name && group.name.toLowerCase();\n        if (name && name.indexOf(filterString) > -1) {\n          return true;\n        }\n        if (!name) {\n          const groupUsernames = group.detailMembers\n            .map(m => `${m.firstName} ${m.lastName}`)\n            .join(',')\n            .toLowerCase();\n          if (groupUsernames && groupUsernames.indexOf(filterString) > -1) {\n            return true;\n          }\n        }\n        return false;\n      });\n    },\n  )\n\n  @getter\n  groups = createSelector(\n    () => this.filteredGroups,\n    () => this.pageNumber,\n    (filteredGroups, pageNumber) => {\n      const count = pageNumber * this._perPage;\n      const sortedGroups =\n        filteredGroups.sort((a, b) => {\n          if (a.updatedTime === b.updatedTime) return 0;\n          return a.updatedTime > b.updatedTime ?\n            -1 :\n            1;\n        });\n      return sortedGroups.slice(0, count);\n    },\n  )\n\n  @getter\n  uniqueMemberIds = createSelector(\n    () => this.allGroups,\n    getUniqueMemberIds,\n  )\n\n  @getter\n  groupMemberIds = createSelector(\n    () => this.allGroups,\n    (groups) => {\n      const noTeamGroups = groups.filter(g => g.type !== 'Team');\n      return getUniqueMemberIds(noTeamGroups);\n    },\n  )\n\n  @getter\n  currentGroup = createSelector(\n    () => this.allGroups,\n    () => this.currentGroupId,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (allGroups, currentGroupId, personsMap) => {\n      const group = allGroups.find(g => g.id === currentGroupId) || {};\n      return formatGroup(group, personsMap, undefined, this._auth.ownerId);\n    },\n  )\n\n  @getter\n  currentGroupPosts = createSelector(\n    () => {\n      const postsMap = (this._glipPosts && this._glipPosts.postsMap) || {};\n      return postsMap[this.currentGroupId];\n    },\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (posts, personsMap) => {\n      // const posts = postsMap[currentGroupId] || [];\n      const reversePosts = (posts || []).slice(0).reverse();\n      return reversePosts.map((post) => {\n        const creator = personsMap[post.creatorId];\n        return {\n          ...post,\n          sentByMe: post.creatorId === this._auth.ownerId,\n          creator,\n        };\n      });\n    },\n  )\n\n  @getter\n  groupsWithUnread = createSelector(\n    () => this.groups,\n    () => (this._glipPosts && this._glipPosts.postsMap) || {},\n    () => (this._glipPosts && this._glipPosts.readTimeMap) || {},\n    (groups, postsMap, readTimeMap) => groups.map((group) => {\n      const posts = postsMap[group.id] || [];\n      const readTime = readTimeMap[group.id] || Date.now();\n      return {\n        ...group,\n        unread:\n          posts.filter(post =>\n            (new Date(post.creationTime)).getTime() > readTime &&\n            post.creatorId !== this._auth.ownerId\n          ).length\n      };\n    })\n  )\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get pageNumber() {\n    return this.state.pageNumber;\n  }\n\n  get data() {\n    return this._storage ?\n      this._storage.getItem(this._dataStorageKey) :\n      this.state.data;\n  }\n\n  get timestamp() {\n    return this._storage ?\n      this._storage.getItem(this._timestampStorageKey) :\n      this.state.timestamp;\n  }\n\n  get currentGroupId() {\n    return this._storage ?\n      this._storage.getItem(this._currentGroupIdStorageKey) :\n      this.state.currentGroupId;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n}\n"]}