{"version":3,"sources":["modules/MessageStore/messageStoreHelper.js"],"names":["normalizeRecord","messageIsUnread","getMessageSyncParams","prepareNewMessagesData","filterNullFromConversations","findIndexOfConversations","findIndexOfMessages","calcUnreadCount","pushRecordsToMessageData","updateConversationRecipients","messageHelper","record","conversationId","conversation","id","message","direction","readStatus","messageIsDeleted","syncToken","dateTo","daySpan","syncType","syncTypes","iSync","lastSevenDate","Date","setDate","getDate","params","fSync","dateFrom","toISOString","messages","conversations","conversationMap","syncConversationId","newConversations","newConversationMap","newMessages","messageMap","forEach","key","unreadMessages","push","availability","length","index","existedIndex","undefined","records","addMessageToMessageMap","setSyncTokenToConversation","addMessageToConversationMap","pushMessageToConversations","newConversation","unreadCounts","pushMessageToMessages","newMessage","deleteMessageFromConversations","conversationMessages","filter","oldMessage","deleteMessageFromMessages","replaceMessageInConversations","oldConversation","oldCreated","creationTime","newCreated","replaceMessageInMessages","existedIndexofMessages","existedIndexofConversations","isDeleted","isTextMessage","messageIsTextMessage","isAcceptable","messageIsAcceptable","filteredConversation","item","recipients","conversationIndex","map","recipient"],"mappings":"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","file":"messageStoreHelper.js","sourcesContent":["import * as messageHelper from '../../lib/messageHelper';\nimport removeUri from '../../lib/removeUri';\nimport syncTypes from '../../enums/syncTypes';\n\nexport function normalizeRecord(record) {\n  return {\n    ...record,\n    conversationId: `${(record.conversation && record.conversation.id) || record.id}`,\n  };\n}\n\nexport function messageIsUnread(message) {\n  return (\n    message.direction === 'Inbound' &&\n    message.readStatus !== 'Read' &&\n    !(messageHelper.messageIsDeleted(message))\n  );\n}\n\nexport function getMessageSyncParams({\n  syncToken,\n  conversationId,\n  dateTo,\n  daySpan = 7,\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const lastSevenDate = new Date();\n  lastSevenDate.setDate(lastSevenDate.getDate() - daySpan);\n  const params = {\n    syncType: syncTypes.fSync,\n    dateFrom: lastSevenDate.toISOString(),\n  };\n  if (dateTo) {\n    params.dateTo = new Date(dateTo).toISOString();\n  }\n  if (conversationId) {\n    params.conversationId = conversationId;\n  }\n  return params;\n}\n\nexport function prepareNewMessagesData({\n  messages,\n  conversations,\n  conversationMap,\n  syncToken,\n  syncConversationId,\n}) {\n  const newConversations = [];\n  const newConversationMap = {};\n  const newMessages = [];\n  const messageMap = {};\n  // copy old conversationMap to new conversationMap hash\n  Object.keys(conversationMap).forEach((key) => {\n    const conversation = {\n      ...conversationMap[key],\n      unreadMessages: {\n        ...conversationMap[key].unreadMessages,\n      },\n    };\n    // if converstation is not sync with conversation Id, update all conversation sync token\n    if (syncToken && (!syncConversationId || syncConversationId === key)) {\n      conversation.syncToken = syncToken;\n    }\n    newConversationMap[key] = conversation;\n  });\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  messages.forEach((message) => {\n    if (message.availability !== 'Purged') {\n      newMessages.push({ ...message });\n      messageMap[message.id] = newMessages.length - 1;\n    }\n  });\n  return {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  };\n}\n\nexport function filterNullFromConversations({\n  conversations,\n  conversationMap,\n}) {\n  const newConversations = [];\n  // copy old conversationMap to new conversationMap hash\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    if (!conversation) {\n      return;\n    }\n    newConversations.push({ ...conversation });\n    conversationMap[conversation.conversationId].index = newConversations.length - 1;\n  });\n  return {\n    conversations: newConversations,\n    conversationMap,\n  };\n}\n\nexport function findIndexOfConversations(newConversationMap, { conversationId }) {\n  if (!conversationId) {\n    return -1;\n  }\n  const existedIndex =\n    newConversationMap[conversationId] &&\n    newConversationMap[conversationId].index;\n  if (existedIndex !== undefined && existedIndex !== null) {\n    return existedIndex;\n  }\n  return -1;\n}\n\nexport function findIndexOfMessages(messageMap, message) {\n  if (messageMap[message.id] !== undefined) {\n    return messageMap[message.id];\n  }\n  return -1;\n}\n\nexport function calcUnreadCount(conversation) {\n  return Object.keys(conversation.unreadMessages).length;\n}\n\nexport function pushRecordsToMessageData({\n  messages,\n  conversations,\n  conversationMap,\n  records,\n  syncToken,\n  syncConversationId,\n}) {\n  const {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  } = prepareNewMessagesData({\n    messages,\n    conversations,\n    conversationMap,\n    syncToken,\n    syncConversationId,\n  });\n  const addMessageToMessageMap = (message, index) => {\n    messageMap[message.id] = index;\n  };\n  const setSyncTokenToConversation = (conversation) => {\n    if (\n      syncToken &&\n      (\n        !syncConversationId ||\n        (syncConversationId && syncConversationId === conversation.id)\n      )\n    ) {\n      conversation.syncToken = syncToken;\n    }\n  };\n  const addMessageToConversationMap = (message, index) => {\n    const { conversationId } = message;\n    const conversation = newConversationMap[conversationId] || { unreadMessages: {} };\n    conversation.index = index;\n    conversation.id = conversationId;\n    setSyncTokenToConversation(conversation);\n    if (messageIsUnread(message)) {\n      conversation.unreadMessages[message.id] = 1;\n    } else if (conversation.unreadMessages[message.id]) {\n      delete conversation.unreadMessages[message.id];\n    }\n    newConversationMap[conversationId] = conversation;\n  };\n  const pushMessageToConversations = (message) => {\n    const newConversation = { ...message };\n    const index = newConversations.length;\n    addMessageToConversationMap(newConversation, index);\n    const conversation = newConversationMap[newConversation.conversationId];\n    if (conversation) {\n      newConversation.unreadCounts = calcUnreadCount(conversation);\n    } else {\n      newConversation.unreadCounts = 0;\n    }\n    newConversations.push(newConversation);\n  };\n  const pushMessageToMessages = (message) => {\n    const newMessage = { ...message };\n    newMessages.push(newMessage);\n    addMessageToMessageMap(newMessage, newMessages.length - 1);\n  };\n  // TODO: delete message or conversation?\n  const deleteMessageFromConversations = (index, record) => {\n    const message = newConversations[index];\n    if (message.id === record.id) {\n      const conversationMessages = newMessages.filter(oldMessage => (\n        oldMessage && oldMessage.id !== message.id &&\n          oldMessage.conversationId === message.conversationId\n      ));\n      if (conversationMessages.length === 0) {\n        newConversations[index] = null;\n        delete newConversationMap[record.conversationId];\n        return;\n      }\n      newConversations[index] = conversationMessages[conversationMessages.length - 1];\n    }\n    const conversation = newConversationMap[record.conversationId];\n    setSyncTokenToConversation(conversation);\n    delete conversation.unreadMessages[record.id];\n    message.unreadCounts = calcUnreadCount(conversation);\n  };\n  const deleteMessageFromMessages = (index, message) => {\n    newMessages[index] = null;\n    delete messageMap[message.id];\n  };\n  const replaceMessageInConversations = (index, message) => {\n    const oldConversation = newConversations[index];\n    const newMessage = {\n      ...oldConversation,\n      ...message,\n    };\n    const oldCreated = new Date(oldConversation.creationTime);\n    const newCreated = new Date(message.creationTime);\n    if (newCreated >= oldCreated) {\n      // move the message to the top of new Messages\n      newConversations[index] = null;\n      newConversations.push(newMessage);\n      addMessageToConversationMap(newMessage, newConversations.length - 1);\n    } else {\n      addMessageToConversationMap(newMessage, index);\n    }\n    const conversation = newConversationMap[newMessage.conversationId];\n    newMessage.unreadCounts = calcUnreadCount(conversation);\n  };\n  const replaceMessageInMessages = (index, message) => {\n    newMessages[index] = { ...message };\n  };\n  records.forEach((record) => {\n    if (!record) {\n      return;\n    }\n    const message = normalizeRecord(removeUri(record));\n    const existedIndexofMessages = findIndexOfMessages(messageMap, message);\n    const existedIndexofConversations = findIndexOfConversations(newConversationMap, message);\n    const isDeleted = messageHelper.messageIsDeleted(message);\n    const isTextMessage = messageHelper.messageIsTextMessage(message);\n    const isAcceptable = messageHelper.messageIsAcceptable(message);\n    if (existedIndexofMessages > -1) {\n      if (isDeleted) {\n        deleteMessageFromMessages(existedIndexofMessages, message);\n      } else {\n        replaceMessageInMessages(existedIndexofMessages, message);\n      }\n    } else if (isAcceptable && isTextMessage) {\n      pushMessageToMessages(message);\n    }\n    if (existedIndexofConversations > -1) {\n      if (isDeleted) {\n        deleteMessageFromConversations(existedIndexofConversations, message);\n      } else {\n        replaceMessageInConversations(existedIndexofConversations, message);\n      }\n    } else if (isAcceptable) {\n      pushMessageToConversations(message);\n    }\n  });\n  const filteredConversation = filterNullFromConversations({\n    conversations: newConversations,\n    conversationMap: newConversationMap,\n  });\n  return {\n    ...filteredConversation,\n    messages: newMessages.filter(item => (item !== null)),\n  };\n}\n\nexport function updateConversationRecipients({\n  messages,\n  conversations,\n  conversationMap,\n  conversationId,\n  recipients,\n}) {\n  const conversationIndex =\n    conversationMap[conversationId] && conversationMap[conversationId].index;\n  if (conversationIndex === undefined) {\n    return { messages, conversationMap, conversations };\n  }\n  const newConversations = [];\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  const conversation = newConversations[conversationIndex];\n  conversation.recipients = recipients.map(recipient => ({ ...recipient }));\n  return {\n    messages,\n    conversationMap,\n    conversations: newConversations,\n  };\n}\n"]}