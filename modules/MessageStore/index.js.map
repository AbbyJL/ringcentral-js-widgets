{"version":3,"sources":["modules/MessageStore/index.js"],"names":["processResponseData","messageHelper","messageStoreHelper","data","records","slice","reverse","syncTimestamp","Date","syncInfo","syncTime","getTime","syncToken","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_DAY_SPAN","MessageStore","deps","dep","optional","alert","client","auth","ttl","timeToRetry","daySpan","storage","subscription","connectivityMonitor","rolesAndPermissions","tabManager","polling","disableCache","options","actionTypes","_alert","ensureExist","_client","_storage","_subscription","_connectivityMonitor","_rolesAndPermissions","_tabManager","_ttl","_timeToRetry","_daySpan","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_reducer","registerReducer","key","reducer","addSelector","allConversations","conversations","unreadCounts","forEach","conversation","messageIsTextMessage","messageIsVoicemail","messageIsFax","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","readTextPermissions","voicemailPermissions","readFaxPermissions","filter","_newMessageNotificationHandlers","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUpCache","_connectivity","connectivity","_initMessageStore","initSuccess","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","isFreshLogin","updatedTimestamp","now","resetSuccess","cleanUp","id","conversationMap","toString","_hasPermission","active","_syncMessages","console","error","_startPolling","accountExtesionEndPoint","message","test","event","body","changes","passive","params","account","extension","messageSync","list","response","dateFrom","dateTo","recordsLength","MAX_MSG_LENGTH","getMessageSyncParams","_messageSyncApi","length","olderRecordsExist","_dateTo","creationTime","_recursiveFSync","lastResponse","concat","sync","oldSyncToken","_dispatchMessageHandlers","syncSuccess","_retry","handler","push","sort","a","b","record","direction","availability","messageStatus","readStatus","messageExists","messages","some","m","voicemailMessages","faxMessages","conversationId","syncConversationSuccess","syncConversationId","_sync","_updateMessagesFromSync","_updateConversationFromSync","syncFunction","_onSyncError","syncError","messageId","status","messageStore","put","updateRequest","delete","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","rightIds","map","_batchUpdateMessagesApi","results","res","json","_updateMessagesApi","rightResults","unreadMessageIds","unreadMessages","updatedMessages","updateMessages","warning","messageStoreErrors","readFailed","markMessages","unreadFailed","_deleteMessageApi","removeMessage","deleteFailed","searchText","subject","toLowerCase","indexOf","recipients","updateConversationRecipients","pushMessages","clickToSMS","fromType","clickToCall","hasReadMessagesPermission","getItem","state","cache","_selectors","textConversations","messageStoreStatus","moduleStatuses","Pollable","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport * as messageHelper from '../../lib/messageHelper';\nimport * as messageStoreHelper from './messageStoreHelper';\n\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getMessageStoreReducer from './getMessageStoreReducer';\nimport getDataReducer from './getDataReducer';\nimport messageStoreErrors from './messageStoreErrors';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function processResponseData(data) {\n  const records = data.records.slice();\n  return {\n    records: records.reverse(),\n    syncTimestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\n\n/**\n * @class\n * @description Messages data manageing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true }\n  ]\n})\nexport default class MessageStore extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManage - TabManager module instance\n   * @param {subscription} params.subscription - subscription module instance\n   * @param {connectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Number} params.ttl - local cache timestamp\n   * @param {Number} params.timeToRetry - waiting time to retry\n   * @param {Number} params.daySpan - day span of call log\n   * @param {Bool} params.polling - polling flag, default false\n   */\n  constructor({\n    alert,\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    tabManager,\n    polling = false,\n    disableCache = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = this::ensureExist(alert, 'alert');\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this::ensureExist(connectivityMonitor, 'connectivityMonitor');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._auth = this::ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = 'messageStore';\n    this._polling = polling;\n    if (this._storage) {\n      this._reducer = getMessageStoreReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getMessageStoreReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n\n    this.addSelector(\n      'textUnreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsTextMessage(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'voiceUnreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsVoicemail(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'faxUnreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsFax(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'unreadCounts',\n      () => this.voiceUnreadCounts,\n      () => this.textUnreadCounts,\n      () => this.faxUnreadCounts,\n      (voiceUnreadCounts, textUnreadCounts, faxUnreadCounts) => {\n        let unreadCounts = 0;\n        if (this._rolesAndPermissions.readTextPermissions) {\n          unreadCounts += textUnreadCounts;\n        }\n        if (this._rolesAndPermissions.voicemailPermissions) {\n          unreadCounts += voiceUnreadCounts;\n        }\n        if (this._rolesAndPermissions.readFaxPermissions) {\n          unreadCounts += faxUnreadCounts;\n        }\n        return unreadCounts;\n      },\n    );\n\n    this.addSelector(\n      'textConversations',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsTextMessage(conversation)\n        )\n    );\n\n    this.addSelector(\n      'faxMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsFax(conversation)\n        )\n    );\n\n    this.addSelector(\n      'voicemailMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsVoicemail(conversation)\n        )\n    );\n\n    this.addSelector(\n      'textAndVoicemailMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation =>\n            (\n              messageHelper.messageIsTextMessage(conversation) ||\n              messageHelper.messageIsVoicemail(conversation)\n            )\n        )\n    );\n\n    // setting up event handlers for message\n    this._newMessageNotificationHandlers = [];\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUpCache();\n      }\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this._initMessageStore();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      !this.updatedTimestamp ||\n      (Date.now() - this.updatedTimestamp) > this.ttl\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _cleanUpCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  findConversationById(id) {\n    return this.conversationMap[id.toString()];\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n\n  async _initMessageStore() {\n    if (!this._hasPermission) return;\n    if (!this._storage || !this._tabManager || this._tabManager.active) {\n      try {\n        await this._syncMessages();\n      } catch (e) {\n        console.error(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this._syncMessages({ passive: true });\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this._syncMessages();\n      }\n    }\n  }\n\n  async _messageSyncApi(params) {\n    const response = await this._client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    return response;\n  }\n  async _recursiveFSync({\n    dateFrom,\n    dateTo = null,\n    syncToken,\n    recordsLength = 0,\n  }) {\n    const MAX_MSG_LENGTH = 500;\n    const params = messageStoreHelper.getMessageSyncParams({\n      dateFrom,\n      dateTo,\n      syncToken,\n      daySpan: this._daySpan,\n    });\n    const {\n      records,\n      syncInfo,\n    } = await this._messageSyncApi(params);\n    recordsLength += records.length;\n    if (recordsLength > MAX_MSG_LENGTH || !syncInfo.olderRecordsExist) {\n      return {\n        records,\n        syncInfo,\n      };\n    }\n    await sleep(1000);\n    const _dateTo = new Date(records[records.length - 1].creationTime);\n    const lastResponse = await this._recursiveFSync({\n      dateFrom,\n      dateTo: _dateTo,\n      syncToken,\n      recordsLength,\n    });\n    return {\n      records: records.concat(lastResponse.records),\n      syncInfo,\n    };\n  }\n  async _updateMessagesFromSync({ passive = false } = {}) {\n    let response;\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    try {\n      const oldSyncToken = this.syncToken;\n      const params = messageStoreHelper.getMessageSyncParams({\n        syncToken: oldSyncToken,\n        daySpan: this._daySpan,\n      });\n      if (!oldSyncToken) {\n        response = await this._recursiveFSync({\n          ...params,\n        });\n      } else {\n        response = await this._messageSyncApi(params);\n      }\n      const {\n        records,\n        syncTimestamp,\n        syncToken,\n      } = processResponseData(response);\n\n      // this is only executed in passive sync mode (aka. invoked by subscription)\n      if (passive) {\n        this._dispatchMessageHandlers(records);\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.syncSuccess,\n        records,\n        syncTimestamp,\n        syncToken,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  onNewInboundMessage(handler) {\n    if (typeof handler === 'function') {\n      this._newMessageNotificationHandlers.push(handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records) {\n    // Sort all records by creation time\n    records = records.slice().sort((a, b) =>\n      (new Date(a.creationTime)).getTime() - (new Date(b.creationTime)).getTime()\n    );\n    for (const record of records) {\n      const {\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n      } = record || {};\n      // Notify when new message incoming\n      if (\n        direction === 'Inbound' &&\n        readStatus === 'Unread' &&\n        messageStatus === 'Received' &&\n        availability === 'Alive' &&\n        // Ensure new inbound message does not exsit locally\n        !this.messageExists(record)\n      ) {\n        this._newMessageNotificationHandlers.forEach(handler => handler(record));\n      }\n    }\n  }\n\n  messageExists(message) {\n    return this.messages.some(m => m.id === message.id) ||\n      this.voicemailMessages.some(m => m.id === message.id) ||\n      this.faxMessages.some(m => m.id === message.id);\n  }\n\n  async _updateConversationFromSync(conversationId) {\n    let response;\n    const conversation = this.conversationMap[conversationId.toString()];\n    if (!conversation) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    const oldSyncToken = conversation.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({\n      syncToken: oldSyncToken,\n      conversationId: conversation.id,\n      daySpan: this._daySpan,\n    });\n    if (!oldSyncToken) {\n      response = await this._recursiveFSync({\n        ...params,\n      });\n    } else {\n      response = await this._messageSyncApi(params);\n    }\n    const {\n      records,\n      syncTimestamp,\n      syncToken,\n    } = processResponseData(response);\n    this.store.dispatch({\n      type: this.actionTypes.syncConversationSuccess,\n      records,\n      syncTimestamp,\n      syncToken,\n      syncConversationId: conversation.id,\n    });\n  }\n\n  async _syncMessages({ passive = false } = {}) {\n    await this._sync(async () => {\n      await this._updateMessagesFromSync({ passive });\n    });\n  }\n\n  @proxify\n  async fetchData() {\n    await this._syncMessages();\n  }\n\n  @proxify\n  async syncConversation(id) {\n    await this._sync(async () => {\n      await this._updateConversationFromSync(id);\n    });\n  }\n\n  async _sync(syncFunction) {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          await syncFunction();\n          this._promise = null;\n        } catch (error) {\n          this._onSyncError();\n          this._promise = null;\n          throw error;\n        }\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async _deleteMessageApi(messageId) {\n    await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  @proxify\n  async readMessages(conversationId) {\n    const conversation = this.conversationMap[conversationId];\n    if (!conversation) {\n      return null;\n    }\n    const unreadMessageIds = Object.keys(conversation.unreadMessages);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.readFailed,\n      });\n    }\n    return null;\n  }\n\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.unreadFailed,\n      });\n    }\n  }\n\n  // for track mark message\n  @proxify\n  async onUnmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteMessage(messageId) {\n    try {\n      await this._deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.removeMessage,\n        conversationId: messageId,\n        messageId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  searchMessagesText(searchText) {\n    return this.messages.filter((message) => {\n      if (\n        message.subject &&\n        message.subject.toLowerCase().indexOf(searchText) >= 0\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  @proxify\n  async updateConversationRecipientList(conversationId, recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConversationRecipients,\n      conversationId,\n      recipients,\n    });\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType\n    });\n  }\n\n\n  get cache() {\n    if (this._storage) {\n      return this._storage.getItem(this._storageKey);\n    }\n    return this.state.data;\n  }\n\n  get messages() {\n    return this.cache.data.messages;\n  }\n\n  get allConversations() {\n    return (this.cache && this.cache.data.conversations) || [];\n  }\n\n  get voicemailMessages() {\n    return this._selectors.voicemailMessages();\n  }\n\n  get faxMessages() {\n    return this._selectors.faxMessages();\n  }\n\n  get textConversations() {\n    return this._selectors.textConversations();\n  }\n\n  get conversations() {\n    return this.allConversations;\n  }\n\n  get conversationMap() {\n    return this.cache.data.conversationMap;\n  }\n\n  get updatedTimestamp() {\n    return this.cache.updatedTimestamp;\n  }\n\n  get syncTimestamp() {\n    return this.cache.data.syncTimestamp;\n  }\n\n  get syncToken() {\n    return this.cache.syncToken;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get unreadCounts() {\n    return this._selectors.unreadCounts();\n  }\n\n  get textUnreadCounts() {\n    return this._selectors.textUnreadCounts();\n  }\n\n  get voiceUnreadCounts() {\n    return this._selectors.voiceUnreadCounts();\n  }\n\n  get faxUnreadCounts() {\n    return this._selectors.faxUnreadCounts();\n  }\n  get messageStoreStatus() {\n    return this.state.messageStoreStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get timestamp() {\n    return this.syncTimestamp;\n  }\n}\n"]}