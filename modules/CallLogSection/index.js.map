{"version":3,"sources":["modules/CallLogSection/index.js"],"names":["CallLogSection","deps","storage","options","actionTypes","_storage","_storageReducer","_storageKey","registerReducer","key","reducer","_reducer","_shouldInit","store","dispatch","type","init","_onInit","initSuccess","_shouldReset","_onReset","resetSuccess","ready","_readyCheckFunction","pending","identify","saveSuccess","args","_onSuccess","saveError","_onError","logFunction","readyCheckFunction","onUpdate","onSuccess","onError","_logFunction","_onUpdate","update","saving","result","_handleSuccess","_handleError","console","warn","show","showLogSection","hideLogSection","getItem","callsList","callsMapping","currentIdentify","state","status","list","mapping","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqBA,c,WALpB,gBAAO;AACNC,QAAM,CACJ,SADI;AADA,CAAP,C;;;AAMC,gCAKE;AAAA,QAHEC,OAGF,QAHEA,OAGF;AAAA,QAFKC,OAEL;AAAA;;AAAA;AAGID,sBAHJ;AAIIE;AAJJ,OAKOD,OALP;;AAAA;;AAQA,UAAKE,QAAL,GAAgBH,OAAhB;AACA,UAAKI,eAAL,GAAuB,iCAAkB,MAAKF,WAAvB,CAAvB;AACA,UAAKG,WAAL,GAAmB,gBAAnB;AACA,UAAKF,QAAL,CAAcG,eAAd,CAA8B;AAC5BC,WAAK,MAAKF,WADkB;AAE5BG,eAAS,MAAKJ;AAFc,KAA9B;AAIA,UAAKK,QAAL,GAAgB,wCAAyB,MAAKP,WAA9B,CAAhB;AAfA;AAgBD;;;;;;;;;;qBAGK,KAAKQ,WAAL,E;;;;;AACF,qBAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiBY;AADL,iBAApB;;sBAGI,OAAO,KAAKC,OAAZ,KAAwB,U;;;;;;uBACpB,KAAKA,OAAL,E;;;AAER,qBAAKJ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiBc;AADL,iBAApB;;;;;qBAGS,KAAKC,YAAL,E;;;;;sBACL,OAAO,KAAKC,QAAZ,KAAyB,U;;;;;;uBACrB,KAAKA,QAAL,E;;;AAER,qBAAKP,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiBiB;AADL,iBAApB;;;;;;;;;;;;;;;;;;kCAMU;AACZ,aACE,KAAKhB,QAAL,CAAciB,KAAd,IACA,KAAKC,mBAAL,EADA,IAEA,KAAKC,OAHP;AAKD;;;mCAEc;AACb,aACE,CACE,CAAC,KAAKnB,QAAL,CAAciB,KAAf,IACA,CAAC,KAAKC,mBAAL,EAFH,KAGK,KAAKD,KAJZ;AAMD;;;mCAEcG,Q,EAAmB;AAChC,WAAKZ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKX,WAAL,CAAiBsB,WADL;AAElBD;AAFkB,OAApB;;AADgC,wCAANE,IAAM;AAANA,YAAM;AAAA;;AAKhC,UAAI,OAAO,KAAKC,UAAZ,KAA2B,UAA/B,EAA2C,KAAKA,UAAL,cAAgBH,QAAhB,SAA6BE,IAA7B;AAC5C;;;iCAEYF,Q,EAAmB;AAC9B,WAAKZ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKX,WAAL,CAAiByB,SADL;AAElBJ;AAFkB,OAApB;;AAD8B,yCAANE,IAAM;AAANA,YAAM;AAAA;;AAK9B,UAAI,OAAO,KAAKG,QAAZ,KAAyB,UAA7B,EAAyC,KAAKA,QAAL,cAAcL,QAAd,SAA2BE,IAA3B;AAC1C;;;yCAUC;AAAA,UANEI,WAMF,SANEA,WAMF;AAAA,UALEC,kBAKF,SALEA,kBAKF;AAAA,UAJEC,QAIF,SAJEA,QAIF;AAAA,UAHEC,SAGF,SAHEA,SAGF;AAAA,UAFEC,OAEF,SAFEA,OAEF;;AACA,WAAKC,YAAL,GAAoB,iCAAkBL,WAAlB,EAA+B,aAA/B,CAApB;AACA,WAAKR,mBAAL,GAA2B,iCAAkBS,kBAAlB,EAAsC,oBAAtC,CAA3B;AACA,WAAKK,SAAL,GAAiB,iCAAkBJ,QAAlB,EAA4B,UAA5B,CAAjB;AACA,WAAKL,UAAL,GAAkBM,SAAlB;AACA,WAAKJ,QAAL,GAAgBK,OAAhB;AACD;;;;6GAEmBV,Q;2CAAaE,I;AAAAA,c;;;;;;;AAC/B,qBAAKd,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiBkC,MADL;AAElBb;AAFkB,iBAApB;;uBAIM,KAAKY,SAAL,cAAeZ,QAAf,SAA4BE,IAA5B,E;;;;;;;;;;;;;;;;;;;6GAGUF,Q;;;;;;;;;;;qBACZA,Q;;;;;AACF,qBAAKZ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiBmC,MADL;AAElBd;AAFkB,iBAApB;;4CAF2BE,I;AAAAA,sB;;;;;uBAOJ,KAAKS,YAAL,cAAkBX,QAAlB,SAA+BE,IAA/B,E;;;AAAfa,sB;;AACN,oBAAIA,MAAJ,EAAY;AACV,uBAAKC,cAAL,cAAoBhB,QAApB,SAAiCE,IAAjC;AACD,iBAFD,MAEO;AACL,uBAAKe,YAAL,cAAkBjB,QAAlB,SAA+BE,IAA/B;AACD;;;;;;;;AAED,qBAAKe,YAAL,cAAkBjB,QAAlB,SAA+BE,IAA/B;AACAgB,wBAAQC,IAAR;;;;;;;;;;;;;;;;;;mCAKSnB,Q,EAAU;AACvB,UAAI,CAAC,KAAKoB,IAAV,EAAgB;AACd,aAAKhC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,KAAKX,WAAL,CAAiB0C,cADL;AAElBrB;AAFkB,SAApB;AAID;AACF;;;qCAEgB;AACf,UAAI,KAAKoB,IAAT,EAAe;AACb,aAAKhC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,KAAKX,WAAL,CAAiB2C;AADL,SAApB;AAGD;AACF;;;wBASe;AACd,aAAO,KAAK1C,QAAL,CAAc2C,OAAd,CAAsB,KAAKzC,WAA3B,EAAwC0C,SAA/C;AACD;;;wBAEkB;AACjB,aAAO,KAAK5C,QAAL,CAAc2C,OAAd,CAAsB,KAAKzC,WAA3B,EAAwC2C,YAA/C;AACD;;;wBAEqB;AACpB,aAAO,KAAK7C,QAAL,CAAc2C,OAAd,CAAsB,KAAKzC,WAA3B,EAAwC4C,eAA/C;AACD;;;wBAEU;AACT,aAAO,CAAC,CAAC,KAAK9C,QAAL,CAAc2C,OAAd,CAAsB,KAAKzC,WAA3B,EAAwC4C,eAAjD;AACD;;;wBAEY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;;;;;;WAxBO,8BACN;AAAA,aAAM,OAAKJ,SAAX;AAAA,KADM,EAEN;AAAA,aAAM,OAAKC,YAAX;AAAA,KAFM,EAGN,UAACI,IAAD,EAAOC,OAAP;AAAA,aAAmBD,KAAKE,GAAL,CAAS;AAAA,eAAYD,QAAQ9B,QAAR,CAAZ;AAAA,OAAT,CAAnB;AAAA,KAHM,C;;;kBA5IWzB,c","file":"index.js","sourcesContent":["import RcModule from 'ringcentral-integration/lib/RcModule';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport ensureExist from 'ringcentral-integration/lib/ensureExist';\nimport getter from 'ringcentral-integration/lib/getter';\nimport { createSelector } from 'reselect';\nimport getCallLogSectionReducer from './getCallLogSectionReducer';\nimport getStorageReducer from './getStorageReducer';\nimport actionTypes from './actionTypes';\n\n@Module({\n  deps: [\n    'Storage',\n  ]\n})\nexport default class CallLogSection extends RcModule {\n  constructor(\n    {\n      storage,\n      ...options,\n    }\n  ) {\n    super(\n      {\n        storage,\n        actionTypes,\n        ...options,\n      }\n    );\n    this._storage = storage;\n    this._storageReducer = getStorageReducer(this.actionTypes);\n    this._storageKey = 'callLogSection';\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: this._storageReducer,\n    });\n    this._reducer = getCallLogSectionReducer(this.actionTypes);\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess\n      });\n    } else if (this._shouldReset()) {\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._storage.ready &&\n      this._readyCheckFunction() &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._storage.ready ||\n        !this._readyCheckFunction()\n      ) && this.ready\n    );\n  }\n\n  _handleSuccess(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveSuccess,\n      identify,\n    });\n    if (typeof this._onSuccess === 'function') this._onSuccess(identify, ...args);\n  }\n\n  _handleError(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveError,\n      identify,\n    });\n    if (typeof this._onError === 'function') this._onError(identify, ...args);\n  }\n\n  addLogHandler(\n    {\n      logFunction,\n      readyCheckFunction,\n      onUpdate,\n      onSuccess,\n      onError\n    }\n  ) {\n    this._logFunction = this::ensureExist(logFunction, 'logFunction');\n    this._readyCheckFunction = this::ensureExist(readyCheckFunction, 'readyCheckFunction');\n    this._onUpdate = this::ensureExist(onUpdate, 'onUpdate');\n    this._onSuccess = onSuccess;\n    this._onError = onError;\n  }\n\n  async updateCallLog(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      identify,\n    });\n    await this._onUpdate(identify, ...args);\n  }\n\n  async saveCallLog(identify, ...args) {\n    if (identify) {\n      this.store.dispatch({\n        type: this.actionTypes.saving,\n        identify,\n      });\n      try {\n        const result = await this._logFunction(identify, ...args);\n        if (result) {\n          this._handleSuccess(identify, ...args);\n        } else {\n          this._handleError(identify, ...args);\n        }\n      } catch (e) {\n        this._handleError(identify, ...args);\n        console.warn(e);\n      }\n    }\n  }\n\n  showLogSection(identify) {\n    if (!this.show) {\n      this.store.dispatch({\n        type: this.actionTypes.showLogSection,\n        identify\n      });\n    }\n  }\n\n  hideLogSection() {\n    if (this.show) {\n      this.store.dispatch({\n        type: this.actionTypes.hideLogSection\n      });\n    }\n  }\n\n  @getter\n  calls = createSelector(\n    () => this.callsList,\n    () => this.callsMapping,\n    (list, mapping) => list.map(identify => mapping[identify])\n  );\n\n  get callsList() {\n    return this._storage.getItem(this._storageKey).callsList;\n  }\n\n  get callsMapping() {\n    return this._storage.getItem(this._storageKey).callsMapping;\n  }\n\n  get currentIdentify() {\n    return this._storage.getItem(this._storageKey).currentIdentify;\n  }\n\n  get show() {\n    return !!this._storage.getItem(this._storageKey).currentIdentify;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n}\n"]}