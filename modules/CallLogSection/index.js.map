{"version":3,"sources":["modules/CallLogSection/index.js"],"names":["CallLogSection","name","deps","storage","options","actionTypes","_storage","_storageReducer","_storageKey","registerReducer","key","reducer","_reducer","_shouldInit","store","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","call","show","showLogSection","sessionId","task","update","loggedCall","isSaved","isLogged","isSaving","hideLogSection","state","status","getItem","calls","tasks","currentSessionId","callsMapping","tasksMapping","reduce"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from 'ringcentral-integration/lib/RcModule';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport getter from 'ringcentral-integration/lib/getter';\nimport { createSelector } from 'reselect';\nimport getThirdPartyCallReducer from './getCallLogSectionReducer';\nimport getStorageReducer from './getStorageReducer';\nimport actionTypes from './actionTypes';\n\n@Module({\n  name: 'CallLogSection',\n  deps: [\n    'Storage',\n  ]\n})\nexport default class CallLogSection extends RcModule {\n  constructor(\n    {\n      storage,\n      ...options,\n    }\n  ) {\n    super(\n      {\n        storage,\n        actionTypes,\n        ...options,\n      }\n    );\n    this._storage = storage;\n    this._storageReducer = getStorageReducer(this.actionTypes);\n    this._storageKey = 'callLogSection';\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: this._storageReducer,\n    });\n    this._reducer = getThirdPartyCallReducer(this.actionTypes);\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._storage.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._storage.ready\n      ) && this.ready\n    );\n  }\n\n  _showCallLogSection([call] = []) {\n    if (call && !this.show) {\n      this.showLogSection(call.sessionId);\n    }\n  }\n\n  updateCall({ task, ...call }, sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      call,\n      task,\n      sessionId,\n    });\n  }\n\n  logCall({ sessionId }) {\n    const loggedCall = {\n      isSaved: true,\n      isLogged: true,\n      isSaving: false\n    };\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      call: loggedCall,\n      sessionId,\n    });\n  }\n\n  showLogSection(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.showLogSection,\n      sessionId\n    });\n  }\n\n  hideLogSection() {\n    if (this.show) {\n      this.store.dispatch({\n        type: this.actionTypes.hideLogSection\n      });\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  @getter\n  calls = createSelector(\n    () => this.callsMapping,\n    () => this.tasksMapping,\n    (callsMapping, tasksMapping) => Object\n      .entries(callsMapping)\n      .reduce(\n        (calls, [sessionId, call]) => Object\n          .assign(\n            calls,\n            {\n              [sessionId]: {\n                ...call,\n                task: tasksMapping[sessionId],\n              }\n            }\n          ),\n        {}\n      ),\n  );\n\n  get callsMapping() {\n    return this._storage.getItem(this._storageKey).calls;\n  }\n\n  get tasksMapping() {\n    return this._storage.getItem(this._storageKey).tasks;\n  }\n\n  get currentSessionId() {\n    return this._storage.getItem(this._storageKey).currentSessionId;\n  }\n\n  get show() {\n    return this._storage.getItem(this._storageKey).show;\n  }\n}\n"]}