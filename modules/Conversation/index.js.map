{"version":3,"sources":["modules/Conversation/index.js"],"names":["Conversation","deps","alert","messageSender","extensionInfo","messageStore","options","actionTypes","_alert","_reducer","_messageSender","_extensionInfo","_messageStore","_promise","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_shouldReloadConversation","_loadConversation","id","readMessages","ready","messageStoreUpdatedAt","updatedTimestamp","dispatch","type","initSuccess","resetSuccess","unload","matchedNames","recipients","slice","length","_updateConversationRecipients","phoneNumber","defaultNumberIndex","findIndex","number","extensionNumber","defaultNumber","splice","newRecipients","concat","updateConversationRecipientList","_updateRecipients","updateRecipients","conversationId","conversation","findConversationById","messages","filter","message","lastMessage","allConversations","index","senderNumber","_getCurrentSenderNumber","_getRecipients","load","conversationsTimestamp","myExtensionNumber","myNumber","map","recipient","ttlConfig","messageSenderMessages","noAreaCode","ttl","warning","text","_alertWarning","textTooLong","updateMessages","reply","send","fromNumber","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","removeMessage","_onReplyError","replyError","state","status","conversationStatus","moduleStatuses","pushing","messageTexts","RcModule","proxify","getter","res","find","msg"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getter from '../../lib/getter';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport messageSenderMessages from '../MessageSender/messageSenderMessages';\n\nimport {\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getConversationReducer from './getConversationReducer';\n\nimport conversationStatus from './conversationStatus';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Conversation managing module\n */\n@Module({\n  deps: ['Alert', 'MessageSender', 'ExtensionInfo', 'MessageStore'],\n})\nexport default class Conversation extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageSender} params.messageSender - messageSender module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   */\n  constructor({\n    alert,\n    messageSender,\n    extensionInfo,\n    messageStore,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._reducer = getConversationReducer(this.actionTypes);\n    this._messageSender = messageSender;\n    this._extensionInfo = extensionInfo;\n    this._messageStore = messageStore;\n    this._promise = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this._shouldReloadConversation()) {\n      this._loadConversation(this.id);\n      this._messageStore.readMessages(this.id);\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._messageStore.ready) &&\n      this.ready\n    );\n  }\n\n  _shouldReloadConversation() {\n    return (\n      this.ready &&\n      !!this.id &&\n      this.messageStoreUpdatedAt !== this._messageStore.updatedTimestamp\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async loadConversationById(id) {\n    if (this.id !== id) {\n      this._loadConversation(id);\n      this._messageStore.readMessages(id);\n    }\n  }\n\n  @proxify\n  async unloadConversation() {\n    if (this.id) {\n      this.store.dispatch({\n        type: this.actionTypes.unload,\n      });\n    }\n  }\n\n  @proxify\n  async changeMatchedNames(matchedNames) {\n    const recipients = this.recipients.slice();\n    if (recipients.length !== 1) {\n      return;\n    }\n    if (matchedNames) {\n      recipients[0].matchedNames = matchedNames;\n      this._updateConversationRecipients(recipients);\n    }\n  }\n\n  @proxify\n  async changeDefaultRecipient(phoneNumber) {\n    if (this.recipients.length < 2) {\n      return;\n    }\n    const recipients = this.recipients.slice();\n    const defaultNumberIndex = recipients.findIndex(\n      number =>\n        number.extensionNumber === phoneNumber ||\n        number.phoneNumber === phoneNumber,\n    );\n    if (defaultNumberIndex < 0) {\n      return;\n    }\n    if (this.id) {\n      const defaultNumber = recipients[defaultNumberIndex];\n      recipients.splice(defaultNumberIndex, 1);\n      const newRecipients = [defaultNumber].concat(recipients);\n      this._updateConversationRecipients(newRecipients);\n    }\n  }\n\n  _updateConversationRecipients(newRecipients) {\n    if (!this.id) {\n      return;\n    }\n    this._messageStore.updateConversationRecipientList(this.id, newRecipients);\n    this._updateRecipients(newRecipients);\n  }\n\n  _updateRecipients(recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateRecipients,\n      recipients,\n    });\n  }\n\n  _loadConversation(conversationId) {\n    const conversation = this._messageStore.findConversationById(\n      conversationId,\n    );\n    if (!conversation) {\n      return;\n    }\n    const messages = this._messageStore.messages.filter(\n      message => message.conversationId === conversationId,\n    );\n    const lastMessage = this._messageStore.allConversations[conversation.index];\n    const senderNumber = this._getCurrentSenderNumber(lastMessage);\n    let recipients = lastMessage && lastMessage.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this._getRecipients(lastMessage, senderNumber);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.load,\n      conversationId,\n      messages,\n      conversationsTimestamp: this._messageStore.updatedTimestamp,\n      senderNumber,\n      recipients,\n    });\n  }\n\n  _getCurrentSenderNumber(lastMessage) {\n    if (!lastMessage) {\n      return null;\n    }\n    return getMyNumberFromMessage({\n      message: lastMessage,\n      myExtensionNumber: this._extensionInfo.extensionNumber,\n    });\n  }\n\n  _getRecipients(lastMessage, senderNumber) {\n    if (!lastMessage || !senderNumber) {\n      return [];\n    }\n    return getRecipientNumbersFromMessage({\n      message: lastMessage,\n      myNumber: senderNumber,\n    });\n  }\n\n  _getReplyOnMessageId() {\n    const lastMessage =\n      this.messages &&\n      this.messages.length > 0 &&\n      this.messages[this.messages.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    if (!this.senderNumber) {\n      return null;\n    }\n    return this.senderNumber.extensionNumber || this.senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    return this.recipients.map(\n      recipient => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      text,\n      id: this.id,\n    });\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.removeMessage,\n          id: this.id,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _onReplyError() {\n    this.store.dispatch({\n      type: this.actionTypes.replyError,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conversationStatus() {\n    return this.state.conversationStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pushing() {\n    return this.conversationStatus === conversationStatus.pushing;\n  }\n\n  get id() {\n    return this.state.id;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get senderNumber() {\n    return this.state.senderNumber;\n  }\n\n  get recipients() {\n    return this.state.recipients;\n  }\n\n  get messageStoreUpdatedAt() {\n    return this.state.messageStoreUpdatedAt;\n  }\n\n  get messageTexts() {\n    return this.state.messageTexts;\n  }\n\n  @getter\n  messageText = createSelector(\n    () => this.messageTexts,\n    () => this.id,\n    (messageTexts, id) => {\n      const res = messageTexts.find(\n        msg => typeof msg === 'object' && msg.id === id,\n      );\n      return res ? res.text : '';\n    },\n  );\n}\n"]}