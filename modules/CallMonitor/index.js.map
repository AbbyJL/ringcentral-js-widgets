{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["matchWephoneSessionWithAcitveCall","sessions","callItem","sipData","undefined","find","session","direction","callDirections","inbound","remoteUri","indexOf","from","outbound","to","webphoneStartTime","creationTime","startTime","Math","abs","CallMonitor","deps","dep","optional","call","accountInfo","detailedPresence","activityMatcher","contactMatcher","tabManager","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","options","actionTypes","_call","_accountInfo","ensureExist","_detailedPresence","_contactMatcher","_activityMatcher","_tabManager","_webphone","_onRinging","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_reducer","registerReducer","key","reducer","addSelector","calls","countryCode","callsFromPresence","map","fromNumber","phoneNumber","toNumber","webphoneSession","sort","sortByStartTime","_selectors","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromMatches","toMatches","toNumberEntity","sessionId","activityMatches","filter","lastEndedSessions","endCall","output","numberMap","addIfNotExist","number","push","forEach","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","active","triggerMatch","oldCalls","slice","length","toNumberEntities","cleanToNumberEntities","entities","oldCallIndex","findIndex","item","oldCall","splice","telephonyStatus","entity","index","toEntity","toMatch","id","entityId","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","console","log","matched","setData","state","status","moduleStatuses","getItem","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","RcModule"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport callDirections from '../../enums/callDirections';\nimport getCallMonitorReducer, {\n  getCallMatchedReducer\n} from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRing, isOnHold } from '../Webphone/webphoneHelper';\n\nfunction matchWephoneSessionWithAcitveCall(sessions, callItem) {\n  if (!sessions || !callItem.sipData) {\n    return undefined;\n  }\n  return sessions.find((session) => {\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n    if (\n      session.direction === callDirections.inbound &&\n      callItem.sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n    if (\n      session.direction === callDirections.outbound &&\n      callItem.sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n    let webphoneStartTime;\n    if (session.direction === callDirections.inbound) {\n      webphoneStartTime = session.creationTime;\n    } else {\n      webphoneStartTime = session.startTime || session.creationTime;\n    }\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (\n      Math.abs(callItem.startTime - webphoneStartTime) > 16000\n    ) {\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * @class\n * @description active calls monitor module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'DetailedPresence',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class CallMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Call} params.call - call module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {DetailedPresence} params.detailedPresence - detailedPresence module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Function} params.onRinging - function on ring\n   * @param {Function} params.onNewCall - function on new call\n   * @param {Function} params.onCallUpdated - function on call updated\n   * @param {Function} params.onCallEnded - function on call ended\n   */\n  constructor({\n    call,\n    accountInfo,\n    detailedPresence,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._detailedPresence = this::ensureExist(detailedPresence, 'detailedPresence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._tabManager = tabManager;\n    this._webphone = webphone;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      (callsFromPresence, countryCode, sessions) => (\n        callsFromPresence.map((callItem) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: callItem.from && callItem.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: callItem.to && callItem.to.phoneNumber,\n            countryCode,\n          });\n          const webphoneSession = matchWephoneSessionWithAcitveCall(sessions, callItem);\n          return {\n            ...callItem,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (\n              (webphoneSession && webphoneSession.startTime) ||\n              callItem.startTime\n            ),\n            webphoneSession,\n          };\n        }).sort(sortByStartTime)\n      ),\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.dataMapping),\n      () => (this._activityMatcher && this._activityMatcher.dataMapping),\n      () => (this.callMatched),\n      (normalizedCalls, contactMapping = {}, activityMapping = {}, callMatched) => {\n        const calls = normalizedCalls.map((callItem) => {\n          const fromNumber = callItem.from && callItem.from.phoneNumber;\n          const toNumber = callItem.to && callItem.to.phoneNumber;\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          const toNumberEntity = callMatched[callItem.sessionId];\n          return {\n            ...callItem,\n            fromMatches,\n            toMatches,\n            activityMatches: (activityMapping[callItem.sessionId]) || [],\n            toNumberEntity,\n          };\n        });\n        return calls;\n      }\n    );\n\n    this.addSelector('activeRingCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeOnHoldCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeCurrentCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('otherDeviceCalls',\n      this._selectors.calls,\n      () => this._webphone && this._webphone.lastEndedSessions,\n      (calls, lastEndedSessions) => calls.filter((callItem) => {\n        if (callItem.webphoneSession) {\n          return false;\n        }\n        if (!lastEndedSessions) {\n          return true;\n        }\n        const endCall = matchWephoneSessionWithAcitveCall(lastEndedSessions, callItem);\n        return !endCall;\n      })\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((callItem) => {\n          if (callItem.from && callItem.from.phoneNumber) {\n            addIfNotExist(callItem.from.phoneNumber);\n          }\n          if (callItem.to && callItem.to.phoneNumber) {\n            addIfNotExist(callItem.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._detailedPresence.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(callItem => callItem.sessionId)\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      this._accountInfo.ready &&\n      this._detailedPresence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        (this._call && !this._call.ready) ||\n        !this._accountInfo.ready ||\n        !this._detailedPresence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (\n        this._lastProcessedNumbers !== uniqueNumbers &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (\n        this._lastProcessedIds !== sessionIds &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (this._call &&\n            oldCalls.length !== 0 &&\n            this.calls.length === 0 &&\n            this._call.toNumberEntities &&\n            this._call.toNumberEntities.length !== 0) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call ? this._call.toNumberEntities.sort(sortByStartTime) : [];\n        // const matchedMap = {};\n        this.calls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            if (typeof this._onRinging === 'function' && isRinging(call)) {\n              this._onRinging(call);\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus &&\n              typeof this._onCallUpdated === 'function'\n            ) {\n              this._onCallUpdated(call);\n            }\n          }\n          entities.find((entity, index) => {\n            const toEntity = call.toMatches.find(toMatch =>\n              toMatch.id === entity.entityId\n            );\n            if (toEntity !== undefined) {\n              entities = this._removeMatched(index, entities);\n              this._setMatchedData({\n                sessionId: call.sessionId,\n                toEntityId: toEntity.id,\n              });\n              return true;\n            }\n            return false;\n          });\n        });\n\n        oldCalls.forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        });\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n\n  get activeRingCalls() {\n    return this._selectors.activeRingCalls();\n  }\n\n  get activeOnHoldCalls() {\n    return this._selectors.activeOnHoldCalls();\n  }\n\n  get activeCurrentCalls() {\n    return this._selectors.activeCurrentCalls();\n  }\n\n  get otherDeviceCalls() {\n    return this._selectors.otherDeviceCalls();\n  }\n}\n"]}