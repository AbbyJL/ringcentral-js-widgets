{"version":3,"sources":["modules/Presence/index.js"],"names":["presenceEndPoint","Presence","deps","dep","optional","auth","client","storage","subscription","rolesAndPermissions","connectivityMonitor","actionTypes","getReducer","subscriptionFilter","presence","lastNotDisturbDndStatusStorageKey","options","_onStateChange","_shouldInit","_init","_shouldReset","_reset","ready","_subscription","message","_lastMessage","_subscriptionHandler","_connectivityMonitor","_connectivity","connectivity","_rolesAndPermissions","hasPresencePermission","_fetch","test","event","body","sequence","_lastSequence","store","dispatch","type","notification","_auth","_client","_storage","_subscriptionFilter","_delayTimeoutId","_lastNotDisturbDndStatusStorageKey","_reducer","registerReducer","key","reducer","lastNotDisturbDndStatus","subscribe","loggedIn","status","pending","init","fetch","initSuccess","reset","resetSuccess","ownerId","account","extension","get","data","fetchSuccess","lastDndStatus","dndStatus","_promise","fetchError","error","params","hasEditPresencePermission","platform","service","put","response","json","updateSuccess","updateError","userStatusParams","userStatus","takeAllCalls","doNotAcceptDepartmentCalls","available","doNotAcceptAnyCalls","_getUpdateStatusParams","_update","busy","offline","state","getItem","presenceStatus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,qBAAzB;;AAEA;;;;IAYqBC,Q,WARpB,gBAAO;AACNC,QAAM,CACJ,MADI,EACI,QADJ,EACc,cADd,EAC8B,qBAD9B,EAEJ,EAAEC,KAAK,SAAP,EAAkBC,UAAU,IAA5B,EAFI,EAGJ,EAAED,KAAK,qBAAP,EAA8BC,UAAU,IAAxC,EAHI,EAIJ,EAAED,KAAK,iBAAP,EAA0BC,UAAU,IAApC,EAJI;AADA,CAAP,C;;;AASC;;;;;;;;;AASA,0BAYG;AAAA;;AAAA,QAXDC,IAWC,QAXDA,IAWC;AAAA,QAVDC,MAUC,QAVDA,MAUC;AAAA,QATDC,OASC,QATDA,OASC;AAAA,QARDC,YAQC,QARDA,YAQC;AAAA,QAPDC,mBAOC,QAPDA,mBAOC;AAAA,QANDC,mBAMC,QANDA,mBAMC;AAAA,gCALDC,WAKC;AAAA,QALDA,WAKC;AAAA,+BAJDC,UAIC;AAAA,QAJDA,UAIC;AAAA,qCAHDC,kBAGC;AAAA,QAHDA,kBAGC,yCAHoB,8BAAoBC,QAGxC;AAAA,qCAFDC,iCAEC;AAAA,QAFDA,iCAEC,yCAFmC,yBAEnC;AAAA,QADEC,OACF;AAAA;;AAAA,qKAEIA,OAFJ;AAGCL;AAHD;;AAAA,UAiCHM,cAjCG,8DAiCc;AAAA;AAAA;AAAA;AAAA;AAAA,mBACX,MAAKC,WAAL,EADW;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEP,MAAKC,KAAL,EAFO;;AAAA;AAAA;AAAA;;AAAA;AAGR,kBAAI,MAAKC,YAAL,EAAJ,EAAyB;AAC9B,sBAAKC,MAAL;AACD,eAFM,MAEA,IACL,MAAKC,KAAL,IACA,MAAKC,aAAL,CAAmBD,KADnB,IAEA,MAAKC,aAAL,CAAmBC,OAFnB,IAGA,MAAKD,aAAL,CAAmBC,OAAnB,KAA+B,MAAKC,YAJ/B,EAKL;AACA,sBAAKA,YAAL,GAAoB,MAAKF,aAAL,CAAmBC,OAAvC;AACA,sBAAKE,oBAAL,CAA0B,MAAKD,YAA/B;AACD,eARM,MAQA,IACL,MAAKH,KAAL,IACA,MAAKK,oBADL,IAEA,MAAKA,oBAAL,CAA0BL,KAF1B,IAGA,MAAKM,aAAL,KAAuB,MAAKD,oBAAL,CAA0BE,YAJ5C,EAKL;AACA,sBAAKD,aAAL,GAAqB,MAAKD,oBAAL,CAA0BE,YAA/C;AACA;AACA,oBAAI,MAAKD,aAAT,EAAwB;AACtB,sBAAI,MAAKE,oBAAL,CAA0BC,qBAA9B,EAAqD;AACnD,0BAAKC,MAAL;AACD;AACF;AACF;;AA1Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjCd;;AAAA,UA8DHN,oBA9DG,GA8DoB,UAACF,OAAD,EAAa;AAClC,UAAIA,WAAWxB,iBAAiBiC,IAAjB,CAAsBT,QAAQU,KAA9B,CAAX,IAAmDV,QAAQW,IAA/D,EAAqE;AACnE,YAAIX,QAAQW,IAAR,CAAaC,QAAjB,EAA2B;AACzB,cAAIZ,QAAQW,IAAR,CAAaC,QAAb,IAAyB,MAAKC,aAAlC,EAAiD;AAC/C;AACD;AACD,gBAAKA,aAAL,GAAqBb,QAAQW,IAAR,CAAaC,QAAlC;AACD;AACD,cAAKE,KAAL,CAAWC,QAAX;AACEC,gBAAM,MAAK7B,WAAL,CAAiB8B;AADzB,WAEKjB,QAAQW,IAFb;AAID;AACF,KA3EE;;AAKD,UAAKO,KAAL,GAAa,kCAAkBrC,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAKsC,OAAL,GAAe,kCAAkBrC,MAAlB,EAA0B,QAA1B,CAAf;AACA,UAAKiB,aAAL,GAAqB,kCAAkBf,YAAlB,EAAgC,cAAhC,CAArB;AACA,UAAKsB,oBAAL,GACE,kCAAkBrB,mBAAlB,EAAuC,qBAAvC,CADF;AAEA,UAAKmC,QAAL,GAAgBrC,OAAhB;AACA,UAAKoB,oBAAL,GAA4BjB,mBAA5B;;AAEA,UAAKmC,mBAAL,GAA2BhC,kBAA3B;;AAEA,UAAKY,YAAL,GAAoB,IAApB;;AAEA,UAAKqB,eAAL,GAAuB,IAAvB;AACA,UAAKC,kCAAL,GAA0ChC,iCAA1C;AACA,QAAI,MAAK6B,QAAT,EAAmB;AACjB,YAAKI,QAAL,GAAgBpC,WAAW,MAAKD,WAAhB,CAAhB;AACA,YAAKiC,QAAL,CAAcK,eAAd,CAA8B;AAC5BC,aAAK,MAAKH,kCADkB;AAE5BI,iBAAS,2DAAkC,MAAKxC,WAAvC;AAFmB,OAA9B;AAID,KAND,MAMO;AACL,YAAKqC,QAAL,GAAgBpC,WAAW,MAAKD,WAAhB,EAA6B;AAC3CyC,iCAAyB,2DAAkC,MAAKzC,WAAvC;AADkB,OAA7B,CAAhB;AAGD;AACD,UAAK0B,aAAL,GAAqB,CAArB;AA9BC;AA+BF;;;;iCA8CY;AACX,WAAKC,KAAL,CAAWe,SAAX,CAAqB,KAAKpC,cAA1B;AACD;;;kCAEa;AACZ,aACE,KAAKyB,KAAL,CAAWY,QAAX,KACC,CAAC,KAAKV,QAAN,IAAkB,KAAKA,QAAL,CAActB,KADjC,MAEC,CAAC,KAAKK,oBAAN,IAA8B,KAAKA,oBAAL,CAA0BL,KAFzD,KAGA,KAAKC,aAAL,CAAmBD,KAHnB,IAIA,KAAKQ,oBAAL,CAA0BR,KAJ1B,IAKA,KAAKiC,MAAL,KAAgB,yBAAeC,OANjC;AAQD;;;mCAEc;AACb,aACE,CACE,CAAC,KAAKd,KAAL,CAAWY,QAAZ,IACC,CAAC,CAAC,KAAKV,QAAP,IAAmB,CAAC,KAAKA,QAAL,CAActB,KADnC,IAEA,CAAC,KAAKQ,oBAAL,CAA0BR,KAF3B,IAGC,KAAKK,oBAAL,IAA6B,CAAC,KAAKA,oBAAL,CAA0BL,KAHzD,IAIA,CAAC,KAAKC,aAAL,CAAmBD,KALtB,KAOA,KAAKA,KARP;AAUD;;;;;;;;;AAGC,qBAAKgB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAK7B,WAAL,CAAiB8C;AADL,iBAApB;AAGA,oBAAI,KAAK9B,oBAAT,EAA+B;AAC7B,uBAAKC,aAAL,GAAqB,KAAKD,oBAAL,CAA0BE,YAA/C;AACD;;qBACG,KAAKC,oBAAL,CAA0BC,qB;;;;;;uBACtB,KAAK2B,KAAL,E;;;AACN,qBAAKnC,aAAL,CAAmB8B,SAAnB,CAA6B,KAAKR,mBAAlC;;;AAEF,qBAAKP,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAK7B,WAAL,CAAiBgD;AADL,iBAApB;;;;;;;;;;;;;;;;;;6BAKO;AACP,WAAKrB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAK7B,WAAL,CAAiBiD;AADL,OAApB;AAGA,WAAKvB,aAAL,GAAqB,CAArB;AACA,WAAKZ,YAAL,GAAoB,IAApB;AACA,WAAKa,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAK7B,WAAL,CAAiBkD;AADL,OAApB;AAGD;;;;;;;;;;AAIC,qBAAKvB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAK7B,WAAL,CAAiB+C;AADL,iBAApB;;AAIUI,uB,GAAY,KAAKpB,K,CAAjBoB,O;;uBACW,KAAKnB,OAAL,CAAaoB,OAAb,GAAuBC,SAAvB,GAAmClD,QAAnC,GAA8CmD,GAA9C,E;;;AAAbC,oB;;AACN,oBAAIJ,YAAY,KAAKpB,KAAL,CAAWoB,OAA3B,EAAoC;AAClC,uBAAKxB,KAAL,CAAWC,QAAX;AACEC,0BAAM,KAAK7B,WAAL,CAAiBwD;AADzB,qBAEKD,IAFL;AAGEE,mCAAe,KAAKC;AAHtB;AAKD;AACD,qBAAKC,QAAL,GAAgB,IAAhB;;;;;;;;AAEA,qBAAKA,QAAL,GAAgB,IAAhB;AACA,qBAAKhC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAK7B,WAAL,CAAiB4D,UADL;AAElBC;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;AAUF,oBAAI,CAAC,KAAKF,QAAV,EAAoB;AAClB,uBAAKA,QAAL,GAAgB,KAAKtC,MAAL,EAAhB;AACD;kDACM,KAAKsC,Q;;;;;;;;;;;;;;;;;;;+FAIAG,M;;;;;;oBACP,KAAK3C,oBAAL,CAA0B4C,yB;;;;;;;;;AAIrBZ,uB,GAAY,KAAKpB,K,CAAjBoB,O;AACFa,wB,GAAW,KAAKhC,OAAL,CAAaiC,OAAb,CAAqBD,QAArB,E;;uBACMA,SAASE,GAAT,CACrB,iCADqB,EAErBJ,MAFqB,C;;;AAAjBK,wB;AAIAZ,oB,GAAOY,SAASC,IAAT,E;;AACb,oBAAIjB,YAAY,KAAKpB,KAAL,CAAWoB,OAA3B,EAAoC;AAClC,uBAAKxB,KAAL,CAAWC,QAAX;AACEC,0BAAM,KAAK7B,WAAL,CAAiBqE;AADzB,qBAEKd,IAFL;AAGEE,mCAAe,KAAKC;AAHtB;AAKD;;;;;;;;AAED,qBAAK/B,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAK7B,WAAL,CAAiBsE,WADL;AAElBT;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;;2CAQmBU,gB,EAAkB;AACvC,UAAMT,SAAS;AACbJ,mBAAW,KAAKA,SADH;AAEbc,oBAAYD;AAFC,OAAf;AAIA,UACET,OAAOJ,SAAP,KAAqB,oBAAUe,YAA/B,IACAX,OAAOJ,SAAP,KAAqB,oBAAUgB,0BAFjC,EAGE;AACAZ,eAAOJ,SAAP,GAAmB,KAAKjB,uBAAL,IAAgC,oBAAUgC,YAA7D;AACD;AACD,aAAOX,MAAP;AACD;;;;;;;;;;sBAEK,KAAKU,UAAL,KAAoB,yBAAeG,SAAnC,IACF,KAAKjB,SAAL,KAAmB,oBAAUkB,mB;;;;;;;;AAGzBd,sB,GAAS,KAAKe,sBAAL,CAA4B,yBAAeF,SAA3C,C;;uBACT,KAAKG,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;sBAIJ,KAAKU,UAAL,KAAoB,yBAAeO,IAAnC,IACA,KAAKrB,SAAL,KAAmB,oBAAUkB,mB;;;;;;;;AAIzBd,sB,GAAS,KAAKe,sBAAL,CAA4B,yBAAeE,IAA3C,C;;uBACT,KAAKD,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;sBAKJ,KAAKJ,SAAL,KAAmB,oBAAUkB,mB;;;;;;;;AAIzBd,sB,GAAS;AACbJ,6BAAW,oBAAUkB,mBADR;AAEbJ,8BAAY,yBAAeO;AAFd,iB;;uBAIT,KAAKD,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;sBAKJ,KAAKU,UAAL,KAAoB,yBAAeQ,OAAnC,IACA,KAAKtB,SAAL,KAAmB,oBAAUkB,mB;;;;;;;;AAIzBd,sB,GAAS,KAAKe,sBAAL,CAA4B,yBAAeG,OAA3C,C;;uBACT,KAAKF,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;AAIAA,sB,GAAS;AACbU,8BAAY,KAAKA;AADJ,iB;;AAGf,oBAAI,KAAKd,SAAL,KAAmB,oBAAUe,YAAjC,EAA+C;AAC7CX,yBAAOJ,SAAP,GAAmB,oBAAUgB,0BAA7B;AACD,iBAFD,MAEO,IAAI,KAAKhB,SAAL,KAAmB,oBAAUgB,0BAAjC,EAA6D;AAClEZ,yBAAOJ,SAAP,GAAmB,oBAAUe,YAA7B;AACD;;qBACGX,OAAOJ,S;;;;;;uBACH,KAAKoB,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;;wBAIG;AACX,aAAO,KAAKmB,KAAL,CAAWrC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKqC,KAAL,CAAWrC,MAAX,KAAsB,yBAAejC,KAA5C;AACD;;;wBAEe;AACd,aAAO,KAAKsE,KAAL,CAAWvB,SAAlB;AACD;;;wBAE6B;AAC5B,UAAI,KAAKzB,QAAT,EAAmB;AACjB,eAAO,KAAKA,QAAL,CAAciD,OAAd,CAAsB,KAAK9C,kCAA3B,CAAP;AACD;AACD,aAAO,KAAK6C,KAAL,CAAWxC,uBAAlB;AACD;;;wBAEgB;AACf,aAAO,KAAKwC,KAAL,CAAWT,UAAlB;AACD;;;wBAEa;AACZ,aAAO,KAAKS,KAAL,CAAWpE,OAAlB;AACD;;;wBAEoB;AACnB,aAAO,KAAKoE,KAAL,CAAWE,cAAlB;AACD;;;;kBA5TkB7F,Q","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getPresenceReducer, {\n  getLastNotDisturbDndStatusReducer\n} from './getPresenceReducer';\nimport presenceActionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport dndStatus from './dndStatus';\nimport presenceStatus from './presenceStatus';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nconst presenceEndPoint = /.*\\/presence(\\?.*)?/;\n\n/**\n * @class\n * @description Presence info module\n */\n@Module({\n  deps: [\n    'Auth', 'Client', 'Subscription', 'RolesAndPermissions',\n    { dep: 'Storage', optional: true },\n    { dep: 'ConnectivityMonitor', optional: true },\n    { dep: 'PresenceOptions', optional: true }\n  ]\n})\nexport default class Presence extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {Object} params.actionTypes - actionTypes enums\n   */\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    rolesAndPermissions,\n    connectivityMonitor,\n    actionTypes = presenceActionTypes,\n    getReducer = getPresenceReducer,\n    subscriptionFilter = subscriptionFilters.presence,\n    lastNotDisturbDndStatusStorageKey = 'lastNotDisturbDndStatus',\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._rolesAndPermissions =\n      this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = storage;\n    this._connectivityMonitor = connectivityMonitor;\n\n    this._subscriptionFilter = subscriptionFilter;\n\n    this._lastMessage = null;\n\n    this._delayTimeoutId = null;\n    this._lastNotDisturbDndStatusStorageKey = lastNotDisturbDndStatusStorageKey;\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._lastNotDisturbDndStatusStorageKey,\n        reducer: getLastNotDisturbDndStatusReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        lastNotDisturbDndStatus: getLastNotDisturbDndStatusReducer(this.actionTypes),\n      });\n    }\n    this._lastSequence = 0;\n  }\n\n  _onStateChange = async () => {\n    if (this._shouldInit()) {\n      await this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        if (this._rolesAndPermissions.hasPresencePermission) {\n          this._fetch();\n        }\n      }\n    }\n  }\n\n  _subscriptionHandler = (message) => {\n    if (message && presenceEndPoint.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence <= this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        ...message.body,\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      this.status === moduleStatuses.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._rolesAndPermissions.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._subscription.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  async _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._connectivityMonitor) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n    }\n    if (this._rolesAndPermissions.hasPresencePermission) {\n      await this.fetch();\n      this._subscription.subscribe(this._subscriptionFilter);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastSequence = 0;\n    this._lastMessage = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    try {\n      const { ownerId } = this._auth;\n      const data = await this._client.account().extension().presence().get();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          ...data,\n          lastDndStatus: this.dndStatus,\n        });\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  @proxify\n  async fetch() {\n    if (!this._promise) {\n      this._promise = this._fetch();\n    }\n    return this._promise;\n  }\n\n  @proxify\n  async _update(params) {\n    if (!this._rolesAndPermissions.hasEditPresencePermission) {\n      return;\n    }\n    try {\n      const { ownerId } = this._auth;\n      const platform = this._client.service.platform();\n      const response = await platform.put(\n        '/account/~/extension/~/presence',\n        params\n      );\n      const data = response.json();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.updateSuccess,\n          ...data,\n          lastDndStatus: this.dndStatus,\n        });\n      }\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.updateError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  _getUpdateStatusParams(userStatusParams) {\n    const params = {\n      dndStatus: this.dndStatus,\n      userStatus: userStatusParams,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = this.lastNotDisturbDndStatus || dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n  async setAvailable() {\n    if (this.userStatus === presenceStatus.available &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    await this._update(params);\n  }\n  async setBusy() {\n    if (\n      this.userStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    await this._update(params);\n  }\n\n  async setDoNotDisturb() {\n    if (\n      this.dndStatus === dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n      userStatus: presenceStatus.busy,\n    };\n    await this._update(params);\n  }\n\n  async setInvisible() {\n    if (\n      this.userStatus === presenceStatus.offline &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    await this._update(params);\n  }\n\n  async toggleAcceptCallQueueCalls() {\n    const params = {\n      userStatus: this.userStatus,\n    };\n    if (this.dndStatus === dndStatus.takeAllCalls) {\n      params.dndStatus = dndStatus.doNotAcceptDepartmentCalls;\n    } else if (this.dndStatus === dndStatus.doNotAcceptDepartmentCalls) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    if (params.dndStatus) {\n      await this._update(params);\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get dndStatus() {\n    return this.state.dndStatus;\n  }\n\n  get lastNotDisturbDndStatus() {\n    if (this._storage) {\n      return this._storage.getItem(this._lastNotDisturbDndStatusStorageKey);\n    }\n    return this.state.lastNotDisturbDndStatus;\n  }\n\n  get userStatus() {\n    return this.state.userStatus;\n  }\n\n  get message() {\n    return this.state.message;\n  }\n\n  get presenceStatus() {\n    return this.state.presenceStatus;\n  }\n}\n"]}