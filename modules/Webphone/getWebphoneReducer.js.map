{"version":3,"sources":["modules/Webphone/getWebphoneReducer.js"],"names":["getVideoElementPreparedReducer","getConnectionStatusReducer","getErrorCodeReducer","getStatusCodeReducer","getConnectRetryCountsReducer","getActiveSessionIdReducer","getRingSessionIdReducer","getLastEndedSessionsReducer","getSessionsReducer","getWebphoneReducer","types","state","type","videoElementPrepared","connectionStatus","disconnected","connect","reconnect","connecting","registered","connected","unregistered","disconnect","disconnecting","connectError","registrationFailed","connectFailed","errorCode","statusCode","resetRetryCounts","session","sessions","onHoldSessions","callStart","id","callEnd","filter","sessionItem","ringSessions","callRing","lastSessions","startTime","isToVoicemail","isForwarded","isReplied","concat","slice","updateSessions","destroySessions","status","connectRetryCounts","activeSessionId","ringSessionId","lastEndedSessions"],"mappings":"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","file":"getWebphoneReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport connectionStatus from './connectionStatus';\nimport { isRing, isOnHold } from './webphoneHelper';\n\nexport function getVideoElementPreparedReducer(types) {\n  return (state = false, { type }) => {\n    if (type === types.videoElementPrepared) return true;\n    return state;\n  };\n}\n\nexport function getConnectionStatusReducer(types) {\n  return (state = connectionStatus.disconnected, { type }) => {\n    switch (type) {\n      case types.connect:\n      case types.reconnect:\n        return connectionStatus.connecting;\n      case types.registered:\n        return connectionStatus.connected;\n      case types.unregistered:\n        return connectionStatus.disconnected;\n      case types.disconnect:\n        return connectionStatus.disconnecting;\n      case types.connectError:\n      case types.registrationFailed:\n        return connectionStatus.connectFailed;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getErrorCodeReducer(types) {\n  return (state = null, { type, errorCode = state }) => {\n    switch (type) {\n      case types.connectError:\n      case types.registrationFailed:\n        return errorCode;\n      case types.registered:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getStatusCodeReducer(types) {\n  return (state = null, { type, statusCode = state }) => {\n    switch (type) {\n      case types.connectError:\n      case types.registrationFailed:\n        return statusCode;\n      case types.registered:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getConnectRetryCountsReducer(types) {\n  return (state = 0, { type }) => {\n    switch (type) {\n      case types.reconnect:\n        return state + 1;\n      case types.resetRetryCounts:\n      case types.registered:\n        return 0;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getActiveSessionIdReducer(types) {\n  return (state = null, { type, session = {}, sessions = [] }) => {\n    let onHoldSessions;\n    switch (type) {\n      case types.callStart:\n        return session.id;\n      case types.callEnd:\n        if (session.id !== state) {\n          return state;\n        }\n        onHoldSessions =\n          sessions.filter(sessionItem => isOnHold(sessionItem));\n        if (onHoldSessions && onHoldSessions[0]) {\n          return onHoldSessions[0].id;\n        }\n        return null;\n      case types.disconnect:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getRingSessionIdReducer(types) {\n  return (state = null, { type, session = {}, sessions = [] }) => {\n    let ringSessions;\n    switch (type) {\n      case types.callRing:\n        return session.id;\n      case types.callStart:\n      case types.callEnd:\n        if (session.id !== state) {\n          return state;\n        }\n        ringSessions =\n          sessions.filter(sessionItem => isRing(sessionItem));\n        if (ringSessions && ringSessions[0]) {\n          return ringSessions[0].id;\n        }\n        return null;\n      case types.disconnect:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getLastEndedSessionsReducer(types) {\n  return (state = [], { type, session = {} }) => {\n    let lastSessions;\n    switch (type) {\n      case types.callEnd:\n        if (\n          /**\n          * don't add incoming call that isn't relied by current app\n          *   to end sessions. this call can be answered by other apps\n          */\n          !session.startTime &&\n          !session.isToVoicemail &&\n          !session.isForwarded &&\n          !session.isReplied\n        ) {\n          return state;\n        }\n        lastSessions = [session].concat(\n          state.filter(sessionItem => sessionItem.id !== session.id)\n        );\n        return lastSessions.slice(0, 5);\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSessionsReducer(types) {\n  return (state = [], { type, sessions }) => {\n    switch (type) {\n      case types.updateSessions:\n        return sessions;\n      case types.destroySessions:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getWebphoneReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    videoElementPrepared: getVideoElementPreparedReducer(types),\n    connectionStatus: getConnectionStatusReducer(types),\n    connectRetryCounts: getConnectRetryCountsReducer(types),\n    errorCode: getErrorCodeReducer(types),\n    statusCode: getStatusCodeReducer(types),\n    activeSessionId: getActiveSessionIdReducer(types),\n    ringSessionId: getRingSessionIdReducer(types),\n    sessions: getSessionsReducer(types),\n    lastEndedSessions: getLastEndedSessionsReducer(types),\n  });\n}\n"]}