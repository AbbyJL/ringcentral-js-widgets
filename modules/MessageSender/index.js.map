{"version":3,"sources":["modules/MessageSender/index.js"],"names":["MessageMaxLength","MultipartMessageMaxLength","MessageSender","deps","alert","client","extensionInfo","extensionPhoneNumber","numberValidate","options","actionTypes","_alert","_client","_extensionPhoneNumber","_extensionInfo","_reducer","_numberValidate","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","message","warning","ttl","text","multipart","_alertWarning","textEmpty","length","textTooLong","multipartTextTooLong","toNumbers","recipientsEmpty","senderNumber","validateResult","validate","isMySenderNumber","senderNumbersList","find","number","phoneNumber","validateError","senderNumberInvalid","errors","forEach","error","recipientNumberInvalids","result","_validateToNumbersIsEmpty","recipientNumbers","filter","item","index","arr","indexOf","validateNumbers","numberValidateResult","_alertInvalidRecipientErrors","numbers","subAddress","isCompanyExtension","e164","notAnExtension","push","fromNumber","replyOnMessageId","_validateText","_validateToNumbers","validateToNumberResult","extensionNumbers","phoneNumbers","_validateSenderNumber","send","responses","chunks","chunk","_sendPager","pagerResponse","_sendSms","toNumber","smsResponse","sendOver","sendError","_onSendError","console","debug","toUsers","account","extension","sms","post","from","to","response","extensionNumber","map","params","replyOn","companyPager","errResp","apiResponse","ok","_json","errorCode","err","parameterName","startsWith","notSmsToExtension","internationalSMSNotSupported","noInternalSMSPermission","state","status","sendStatus","idle","smsSenderNumbers"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport messageSenderActionTypes from './messageSenderActionTypes';\nimport getMessageSenderReducer from './getMessageSenderReducer';\n\nimport messageSenderStatus from './messageSenderStatus';\nimport messageSenderMessages from './messageSenderMessages';\nimport proxify from '../../lib/proxy/proxify';\nimport chunkMessage from '../../lib/chunkMessage';\n\nexport const MessageMaxLength = 1000;\nexport const MultipartMessageMaxLength = MessageMaxLength * 5;\n\n/**\n * @class\n * @description Message sender and validator module\n */\n@Module({\n  deps: ['Alert', 'Client', 'ExtensionInfo', 'ExtensionPhoneNumber', 'NumberValidate']\n})\nexport default class MessageSender extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {ExtensionPhoneNumber} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   */\n  constructor({\n    alert,\n    client,\n    extensionInfo,\n    extensionPhoneNumber,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: messageSenderActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._extensionPhoneNumber = extensionPhoneNumber;\n    this._extensionInfo = extensionInfo;\n    this._reducer = getMessageSenderReducer(this.actionTypes);\n    this._numberValidate = numberValidate;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionPhoneNumber.ready &&\n      this._extensionInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._extensionPhoneNumber.ready ||\n        !this._extensionInfo.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      this._alert.warning({\n        message,\n        ttl: 0,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  _validateText(text, multipart) {\n    if (isBlank(text)) {\n      this._alertWarning(messageSenderMessages.textEmpty);\n      return false;\n    }\n\n    if (!multipart && text.length > MessageMaxLength) {\n      this._alertWarning(messageSenderMessages.textTooLong);\n      return false;\n    }\n\n    if (multipart && text.length > MultipartMessageMaxLength) {\n      this._alertWarning(messageSenderMessages.multipartTextTooLong);\n      return false;\n    }\n\n    return true;\n  }\n\n  _validateToNumbersIsEmpty(toNumbers) {\n    if (toNumbers.length === 0) {\n      this._alertWarning(messageSenderMessages.recipientsEmpty);\n      return true;\n    }\n    return false;\n  }\n\n  _validateSenderNumber(senderNumber) {\n    let validateResult = true;\n    if (isBlank(senderNumber)) {\n      validateResult = false;\n    }\n    this.store.dispatch({ type: this.actionTypes.validate });\n    if (validateResult) {\n      const isMySenderNumber = this.senderNumbersList.find(number => (\n        number.phoneNumber === senderNumber\n      ));\n      if (!isMySenderNumber) {\n        validateResult = false;\n      }\n    }\n    if (!validateResult) {\n      this.store.dispatch({ type: this.actionTypes.validateError });\n      this._alertWarning(messageSenderMessages.senderNumberInvalid);\n    }\n    return validateResult;\n  }\n\n  _alertInvalidRecipientErrors(errors) {\n    errors.forEach((error) => {\n      const message = messageSenderMessages[error.type];\n      if (!this._alertWarning(message)) {\n        this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n      }\n    });\n  }\n\n  @proxify\n  async _validateToNumbers(toNumbers) {\n    const result = {\n      result: false,\n    };\n    if (this._validateToNumbersIsEmpty(toNumbers)) {\n      return result;\n    }\n    const recipientNumbers\n      = toNumbers.filter((item, index, arr) => arr.indexOf(item) === index);\n    this.store.dispatch({ type: this.actionTypes.validate });\n    const numberValidateResult = await this._numberValidate.validateNumbers(recipientNumbers);\n    if (!numberValidateResult.result) {\n      this._alertInvalidRecipientErrors(numberValidateResult.errors);\n      this.store.dispatch({ type: this.actionTypes.validateError });\n      return result;\n    }\n    const numbers = [];\n    for (const number of numberValidateResult.numbers) {\n      if (number.subAddress && number.subAddress.length > 0) {\n        if (\n          !this._numberValidate.isCompanyExtension(number.e164, number.subAddress)\n        ) {\n          this._alertWarning(messageSenderMessages.notAnExtension);\n          this.store.dispatch({ type: this.actionTypes.validateError });\n          return result;\n        }\n        numbers.push(number.subAddress);\n      } else {\n        numbers.push(number.e164);\n      }\n    }\n    result.result = true;\n    result.numbers = numbers;\n    return result;\n  }\n\n  @proxify\n  async send({\n    fromNumber, toNumbers, text, replyOnMessageId, multipart = false\n  }) {\n    if (!this._validateText(text, multipart)) {\n      return null;\n    }\n    try {\n      const validateToNumberResult = await this._validateToNumbers(toNumbers);\n      if (!validateToNumberResult.result) {\n        return null;\n      }\n      const recipientNumbers = validateToNumberResult.numbers;\n\n      const extensionNumbers = recipientNumbers.filter(number => (number.length <= 6));\n      const phoneNumbers = recipientNumbers.filter(number => (number.length > 6));\n\n      // not validate sender number if recipient is only extension number\n      if (phoneNumbers.length > 0) {\n        if (!this._validateSenderNumber(fromNumber)) {\n          return null;\n        }\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.send,\n      });\n\n      const responses = [];\n      const chunks = multipart ? chunkMessage(text, MessageMaxLength) : [text];\n\n      if (extensionNumbers.length > 0) {\n        for (const chunk of chunks) {\n          const pagerResponse = await this._sendPager({\n            toNumbers: extensionNumbers,\n            text: chunk,\n            replyOnMessageId,\n          });\n          responses.push(pagerResponse);\n        }\n      }\n\n      if (phoneNumbers.length > 0) {\n        for (const phoneNumber of phoneNumbers) {\n          for (const chunk of chunks) {\n            const smsResponse = await this._sendSms({\n              fromNumber,\n              toNumber: phoneNumber,\n              text: chunk,\n            });\n            responses.push(smsResponse);\n          }\n        }\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.sendOver,\n      });\n\n      return responses;\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.sendError,\n        error: 'error'\n      });\n      this._onSendError(error);\n      console.debug('sendComposeText e ', error);\n      throw error;\n    }\n  }\n\n  @proxify\n  async _sendSms({ fromNumber, toNumber, text }) {\n    const toUsers = [{ phoneNumber: toNumber }];\n    const response = await this._client.account().extension().sms().post({\n      from: { phoneNumber: fromNumber },\n      to: toUsers,\n      text,\n    });\n    return response;\n  }\n\n  @proxify\n  async _sendPager({ toNumbers, text, replyOnMessageId }) {\n    const from = { extensionNumber: this._extensionInfo.extensionNumber };\n    const toUsers = toNumbers.map(number => ({ extensionNumber: number }));\n    const params = { from, to: toUsers, text };\n    if (replyOnMessageId) {\n      params.replyOn = replyOnMessageId;\n    }\n    const response = await this._client.account().extension().companyPager().post(params);\n    return response;\n  }\n\n  _onSendError(error) {\n    const errResp = error.apiResponse;\n    if (\n      errResp && errResp.response &&\n      !errResp.response.ok\n      && (errResp._json.errorCode === 'InvalidParameter'\n        || errResp._json.errorCode === 'InternationalProhibited'\n        || errResp._json.errorCode === 'CMN-408')\n    ) {\n      errResp._json.errors.map((err) => {\n        if (\n          (\n            err.errorCode === 'CMN-101' ||\n            err.errorCode === 'CMN-102' ||\n            err.errorCode === 'CMN-414'\n          ) &&\n          err.parameterName.startsWith('to')\n        ) {\n          // 101 : \"Parameter [to.extensionNumber] value is invalid\"\n          // 101 : \"Parameter [to.phoneNumber] value is invalid\"\n          // 102 : \"Resource for parameter [to] is not found\"\n          this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n          return null;\n        }\n        if (err.errorCode === 'MSG-246') {\n          // MSG-246 : \"Sending SMS from/to extension numbers is not available\"\n          this._alertWarning(messageSenderMessages.notSmsToExtension);\n        }\n        if (err.errorCode === 'MSG-240') {\n          // MSG-240 : \"International SMS is not supported\"\n          this._alertWarning(messageSenderMessages.internationalSMSNotSupported);\n        }\n        if (err.errorCode === 'CMN-408') {\n          // MSG-240 : \"In order to call this API endpoint, user needs to have [InternalSMS] permission for requested resource.\"\n          this._alertWarning(messageSenderMessages.noInternalSMSPermission);\n        }\n        return null;\n      });\n      return;\n    }\n    this._alertWarning(messageSenderMessages.sendError);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sendStatus() {\n    return this.state.sendStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get idle() {\n    return this.sendStatus === messageSenderStatus.idle;\n  }\n\n  get senderNumbersList() {\n    return this._extensionPhoneNumber.smsSenderNumbers;\n  }\n}\n"]}