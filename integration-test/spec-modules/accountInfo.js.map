{"version":3,"sources":["integration-test/spec-modules/accountInfo.js"],"names":["mock","authzProfileBody","require","auth","client","accountInfo","account","alert","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","info","id","equal","mockAuthzProfile","authzProfile","permissions","filter","p","permission","login","state","messages","insufficientPrivilege","to","not","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;IAAYA,I;;AACZ;;;;;;;;AAEA,IAAMC,mBAAmBC,QAAQ,2BAAR,CAAzB;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,WAAf,EAA4BC,OAA5B,EAAqCC,KAArC,EAA+C;AAC5DC,WAAS,cAAT,EAAyB,YAAY;AAAA;;AACnC,SAAKC,OAAL,CAAa,KAAb;AACAT,SAAKU,UAAL,CAAgBN,MAAhB;;AAEA,QAAIO,uBAAJ;AACA,QAAMC,uBAAuB,mCAAyB,mBAAzB,EAAoCR,MAApC,CAA7B;;AAEAS,uFAAU;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJV,KAAKW,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAX,KAAKY,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAIF,6BAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAOAC,OAAG,+BAAH,2EAAoC;AAAA;AAAA;AAAA;AAAA;AAClChB,mBAAKiB,OAAL;AACAjB,mBAAKkB,YAAL;AAFkC;AAAA,qBAGX,2BAAYf,IAAZ,EAAkBG,OAAlB,CAHW;;AAAA;AAGlCK,4BAHkC;;AAIlC,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEd,OAApE;AACA,sBAAKe,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AARkC;AAAA,qBAS5B,6BAAc,CAAd,CAT4B;;AAAA;AAUlCC,qBAAOlB,YAAYmB,IAAZ,CAAiBC,EAAxB,EAA4BC,KAA5B,CAAkC,SAAlC;;AAVkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;;AAaAV,OAAG,2DAAH,2EAAgE;AAAA;AAAA;AAAA;AAAA;AAC9DhB,mBAAKiB,OAAL;AACAjB,mBAAKkB,YAAL,CAAkB,EAAES,kBAAkB,KAApB,EAAlB;AACA3B,mBAAK4B,YAAL,CAAkB;AAChBC,6BAAa5B,iBAAiB4B,WAAjB,CAA6BC,MAA7B,CAAoC;AAAA,yBAAKC,EAAEC,UAAF,CAAaP,EAAb,KAAoB,iBAAzB;AAAA,iBAApC;AADG,eAAlB;AAH8D;AAAA,qBAMxDtB,KAAK8B,KAAL,4BACD3B,OADC,EANwD;;AAAA;AAAA;AAAA,qBASxD,6BAAc,CAAd,CATwD;;AAAA;AAU9DiB,qBAAOpB,KAAKW,QAAZ,EAAsBY,KAAtB,CAA4B,KAA5B;AACAH,qBAAO,oCACLhB,MAAM2B,KAAN,CAAYC,QADP,EACiB,8BAAoBC,qBADrC,CAAP,EAEGC,EAFH,CAEMC,GAFN,CAEUZ,KAFV,CAEgBa,SAFhB;;AAX8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhE;AAeD,GA1CD;AA2CD,C","file":"accountInfo.js","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\nimport permissionsMessages from '../../modules/RolesAndPermissions/permissionsMessages';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, accountInfo, account, alert) => {\n  describe('AccountInfo:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load info successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(accountInfo.info.id).equal(208594004);\n    });\n\n    it('Should show insufficientPrivilege when no ReadCompanyInfo', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadCompanyInfo')\n      });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(5);\n      expect(auth.loggedIn).equal(false);\n      expect(containsErrorMessage(\n        alert.state.messages, permissionsMessages.insufficientPrivilege\n      )).to.not.equal(undefined);\n    });\n  });\n};\n"]}