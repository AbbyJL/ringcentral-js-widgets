{"version":3,"sources":["integration-test/spec-modules/extensionInfo.js"],"names":["mock","auth","client","extensionInfo","account","alert","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","info","extensionNumber","equal","mockExtensionInfo","mockForbidden","path","login","state","messages","insufficientPrivilege","to","not","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;IAAYA,I;;AACZ;;;;;;;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,aAAf,EAA8BC,OAA9B,EAAuCC,KAAvC,EAAiD;AAC9DC,WAAS,gBAAT,EAA2B,YAAY;AAAA;;AACrC,SAAKC,OAAL,CAAa,KAAb;AACAP,SAAKQ,UAAL,CAAgBN,MAAhB;;AAEA,QAAIO,uBAAJ;AACA,QAAMC,uBAAuB,mCAAyB,mBAAzB,EAAoCR,MAApC,CAA7B;;AAEAS,uFAAU;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJV,KAAKW,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAX,KAAKY,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAIF,6BAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAOAC,OAAG,+BAAH,2EAAoC;AAAA;AAAA;AAAA;AAAA;AAClCd,mBAAKe,OAAL;AACAf,mBAAKgB,YAAL;AAFkC;AAAA,qBAGX,2BAAYf,IAAZ,EAAkBG,OAAlB,CAHW;;AAAA;AAGlCK,4BAHkC;;AAIlC,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEd,OAApE;AACA,sBAAKe,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AARkC;AAAA,qBAS5B,6BAAc,CAAd,CAT4B;;AAAA;AAUlCC,qBAAOlB,cAAcmB,IAAd,CAAmBC,eAA1B,EAA2CC,KAA3C,CAAiD,KAAjD;;AAVkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;;AAaAV,OAAG,gDAAH,2EAAqD;AAAA;AAAA;AAAA;AAAA;AACnDd,mBAAKe,OAAL;AACAf,mBAAKgB,YAAL,CAAkB,EAAES,mBAAmB,KAArB,EAAlB;AACAzB,mBAAK0B,aAAL,CAAmB,EAAEC,MAAM,qCAAR,EAAnB;AAHmD;AAAA,qBAI7C1B,KAAK2B,KAAL,4BACDxB,OADC,EAJ6C;;AAAA;AAAA;AAAA,qBAO7C,6BAAc,CAAd,CAP6C;;AAAA;AAQnDiB,qBAAOpB,KAAKW,QAAZ,EAAsBY,KAAtB,CAA4B,KAA5B;AACAH,qBAAO,oCACLhB,MAAMwB,KAAN,CAAYC,QADP,EACiB,8BAAoBC,qBADrC,CAAP,EAEGC,EAFH,CAEMC,GAFN,CAEUT,KAFV,CAEgBU,SAFhB;;AATmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArD;AAaD,GAxCD;AAyCD,C","file":"extensionInfo.js","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\nimport permissionsMessages from '../../modules/RolesAndPermissions/permissionsMessages';\n\nexport default (auth, client, extensionInfo, account, alert) => {\n  describe('ExtensionInfo:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load info successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(extensionInfo.info.extensionNumber).equal('101');\n    });\n\n    it('Should show insufficientPrivilege when get 403', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockExtensionInfo: false });\n      mock.mockForbidden({ path: '/restapi/v1.0/account/~/extension/~' });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(3);\n      expect(auth.loggedIn).equal(false);\n      expect(containsErrorMessage(\n        alert.state.messages, permissionsMessages.insufficientPrivilege\n      )).to.not.equal(undefined);\n    });\n  });\n};\n"]}