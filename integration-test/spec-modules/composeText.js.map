{"version":3,"sources":["integration-test/spec-modules/composeText.js"],"names":["auth","client","account","alert","regionSettings","composeText","messageSender","describe","timeout","conditionalDescribe","clientHistoryRequest","before","isLoginSuccess","skip","console","error","senderNumbersList","phoneNumber","senderNumber","it","expect","to","equals","updateSenderNumber","logout","loginStatus","notLoggedIn","login","loggedIn","updateTypingToNumber","typingToNumber","cleanTypingToNumber","updateMessageText","messageText","beforeEach","clean","addToNumber","toNumbers","deep","removeToNumber","send","responses","include","keys","type","subject","rawRequest","getRawResponse","endPoints","sms","equal","companyPager","smsRequest","pagerRequest","dismissAll","state","messages","length","isAlertClear","textEmpty","not","undefined","str","Array","join","textTooLong","response","idle","recipientsEmpty","noToNumber","noAreaCode","specialNumber","notAnExtension","recipientNumberInvalids","setData","countryCode","areaCode","notSmsToExtension","debug","extensionNumber","internationalSMSNotSupported"],"mappings":"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","file":"composeText.js","sourcesContent":["import loginStatus from '../../modules/Auth/loginStatus';\nimport messageSenderMessages from '../../modules/MessageSender/messageSenderMessages';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual, waitInSeconds, waitUntilNotNull, waitUntilObjectSizeGreaterThan } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\n\nexport default (auth, client, account, alert, regionSettings, composeText, messageSender) => {\n  describe('ComposeText', async function () {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    before(async () => {\n      const isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        conditionalDescribe = describe.skip;\n        console.error('Skip test case as failed to login with credential ', account);\n      }\n      await waitUntilNotNull(() => messageSender.senderNumbersList[0].phoneNumber, 'First number in senderNumberList', 3);\n      await waitUntilObjectSizeGreaterThan(() => composeText.senderNumber, 'Sender Number', 0, 3);\n    });\n\n    conditionalDescribe('Should Init Successfully with Default Setting', () => {\n      this.timeout(20000);\n      it('Should Set Sender Number with First SmsSender Phone Number by Default', () => {\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[0].phoneNumber);\n      });\n    });\n\n    conditionalDescribe('Should Save Sender Number', () => {\n      this.timeout(20000);\n      it('Should Update Sender Number After User Change Sender Number', () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1].phoneNumber);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1].phoneNumber);\n      });\n\n      it('Should Remember Sender Number After Logout', async () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1].phoneNumber);\n        auth.logout();\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n        auth.login({\n          ...account\n        });\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.loggedIn, 3);\n        waitInSeconds(2);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1].phoneNumber);\n      });\n    });\n\n    conditionalDescribe('Should Update Typing Number', () => {\n      this.timeout(20000);\n      it('Should Update Typing Number When User Typing Number', () => {\n        composeText.updateTypingToNumber('123');\n        expect(composeText.typingToNumber).to.equals('123');\n      });\n\n      it('Should Clean Typing Number When User Click Clean Button', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.cleanTypingToNumber();\n        expect(composeText.typingToNumber).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Update Message Text', () => {\n      this.timeout(20000);\n      it('Should Update Message Text When User Type', () => {\n        composeText.updateMessageText('1234');\n        expect(composeText.messageText).to.equals('1234');\n      });\n    });\n\n    conditionalDescribe('Should Update ToNumbers', () => {\n      this.timeout(20000);\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should Add Number to Selected Number List to ToNumbers When User Add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Not Repeat Add Number to Selected Number List When User had add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Remove ToNumber from Selected Number List When User Click Remove Button', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.removeToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([]);\n      });\n    });\n\n    conditionalDescribe('Should Clean All Inputs After User Submit', () => {\n      this.timeout(20000);\n      it('Should Clean All Inputs', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('1234');\n        composeText.clean();\n        expect(composeText.toNumbers).to.deep.equals([]);\n        expect(composeText.typingToNumber).to.equals('');\n        expect(composeText.messageText).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Send Message', () => {\n      this.timeout(20000);\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should SMS Message Successfully', async () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('test');\n        const responses = await composeText.send();\n        expect(responses[0]).to.include.keys('id', 'conversation');\n        expect(responses[0].type).to.equals('SMS');\n        expect(responses[0].subject).to.equals('test');\n        const rawRequest\n          = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        expect(JSON.stringify(responses[0])).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send Pager Message Successfully', async () => {\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 2');\n        const responses = await composeText.send();\n        expect(responses[0]).to.include.keys('id', 'conversation');\n        expect(responses[0].type).to.equals('Pager');\n        expect(responses[0].subject).to.equals('test 2');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(responses[0])).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send SMS and Pager Message Together Successfully', async () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 3');\n        const responses = await composeText.send();\n        expect(responses[0]).to.include.keys('id', 'conversation');\n        expect(responses[0].subject).to.equals('test 3');\n        expect(responses[1].subject).to.equals('test 3');\n        const smsRequest\n          = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        const pagerRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(smsRequest.type).to.equals('SMS');\n        expect(smsRequest.subject).to.equals('test 3');\n        expect(pagerRequest.type).to.equals('Pager');\n        expect(pagerRequest.subject).to.equals('test 3');\n      });\n\n      it('Should Send Pager Message Successfully with Typing Number', async () => {\n        composeText.updateTypingToNumber('101');\n        composeText.updateMessageText('test 4');\n        const responses = await composeText.send();\n        expect(responses[0]).to.include.keys('id', 'conversation');\n        expect(responses[0].type).to.equals('Pager');\n        expect(responses[0].subject).to.equals('test 4');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(responses[0])).to.equal(JSON.stringify(rawRequest));\n      });\n    });\n\n    conditionalDescribe('Validation', () => {\n      this.timeout(20000);\n      beforeEach(async function () {\n        composeText.clean();\n        const isAlertClear = await waitUntilEqual(() => {\n          alert.dismissAll();\n          return alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          conditionalDescribe = describe.skip;\n        }\n      });\n\n      conditionalDescribe('Text Validation', () => {\n        it('Should Alert of textEmpty When Text Is Empty', async () => {\n          composeText.updateTypingToNumber('+18558990011');\n          composeText.updateMessageText('');\n          await composeText.send();\n          expect(containsErrorMessage(\n            alert.state.messages,\n            messageSenderMessages.textEmpty\n          )).to.not.equal(undefined);\n        });\n\n        it('Should Alert of textTooLong When Message Text length more than 1000', () => {\n          const str = Array(1002).join('x');\n          composeText.updateMessageText(str);\n          expect(containsErrorMessage(\n            alert.state.messages,\n            messageSenderMessages.textTooLong\n          )).to.not.equal(undefined);\n          expect(composeText.messageText).to.equals('');\n        });\n\n        it('Should Alert of textEmpty When Text Is Empty with Space', async () => {\n          composeText.updateTypingToNumber('+18558990011');\n          composeText.updateMessageText('   ');\n          const response = await composeText.send();\n          expect(containsErrorMessage(\n            alert.state.messages,\n            messageSenderMessages.textEmpty\n          )).to.not.equal(undefined);\n          expect(messageSender.idle).to.equals(true);\n          expect(response).to.equals(null);\n        });\n      });\n\n      conditionalDescribe('Numbers Validation', () => {\n        conditionalDescribe('Basic Validation', () => {\n          it('Should Alert of recipientsEmpty - Not Input Recepiant Number', async () => {\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.recipientsEmpty\n            )).to.not.equal(undefined);\n          });\n\n          it('Should Alert of noToNumber - Typing Number is not number', async () => {\n            composeText.addToNumber({ phoneNumber: \"iamn%@onedi!@$%^&()_=\\\\][';/.,~nu><.,,?/mber#*\" });\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.noToNumber\n            )).to.not.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Alert of noToNumber - Valid Special Char but No Digital Number', async () => {\n            composeText.addToNumber({ phoneNumber: '+#' });\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.noToNumber\n            )).to.not.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Alert of recipientNumberInvalids - Typing Number Length more than 30', () => {\n            const str = Array(32).join('x');\n            composeText.updateTypingToNumber(str);\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.recipientNumberInvalids\n            )).to.not.equal(undefined);\n            expect(composeText.typingToNumber).to.equals('');\n          });\n\n          it('Should Alert of noToNumber - Send With wrong Typing Number', async () => {\n            composeText.updateTypingToNumber('test');\n            composeText.updateMessageText('test 5');\n            const response = await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.noToNumber\n            )).to.not.equal(undefined);\n            expect(response).to.equals(null);\n          });\n\n          it('Should Alert of noToNumber - one of toNumber is not number', async () => {\n            composeText.addToNumber({ phoneNumber: '101' });\n            composeText.addToNumber({ phoneNumber: 'test' });\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.noToNumber\n            )).to.not.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in E.164 Format', async () => {\n            composeText.addToNumber({ phoneNumber: '+18558990011' });\n            composeText.updateMessageText('test');\n            const response = await composeText.send();\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n          });\n        });\n\n        conditionalDescribe('Validation with US/CA Local Number Format', () => {\n          beforeEach(() => {\n            regionSettings.setData({ countryCode: 'US', areaCode: '' });\n          });\n\n          it('Should Not Alert Anything - To Number in (xxx)xxx-xxxx Format', async () => {\n            composeText.updateTypingToNumber('(855)899-0011');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in (xxx) xxx-xxxx Format', async () => {\n            composeText.updateTypingToNumber('(855) 899-0011');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in (xxx)xxx-xxxx*xxx Format', async () => {\n            composeText.updateTypingToNumber('(888)349-5556*101');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in (xxx) xxx-xxxx*xxx Format', async () => {\n            composeText.updateTypingToNumber('(888) 349-5556*101');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in xxx-xxx-xxxx Format', async () => {\n            composeText.updateTypingToNumber('855-899-0011');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert Anything - to Number in xxx-xxx-xxxx*xxx Format', async () => {\n            composeText.updateTypingToNumber('888-349-5556*101');\n            composeText.updateMessageText('test');\n            const responses = await composeText.send();\n            expect(responses[0]).to.include.keys('id', 'conversation');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notSmsToExtension))\n              .to.equal(undefined);\n          });\n        });\n\n        conditionalDescribe('Validation with Region Setting', () => {\n          it('Should Alert of noAreaCode - Typing Number length is 7 and no areaCode', async () => {\n            regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n            composeText.updateTypingToNumber('6545672');\n            composeText.updateMessageText('test 6');\n            const response = await composeText.send();\n            expect(containsErrorMessage(\n              alert.state.messages,\n              messageSenderMessages.noAreaCode\n            )).to.not.equal(undefined);\n            expect(response).to.equals(null);\n          });\n\n          it('Should Alert of No AreaCode - toNumber is 7 Digital Number with US Dialing Plan without Area Code', async () => {\n            regionSettings.setData({ countryCode: 'US', areaCode: '' });\n            composeText.addToNumber({ phoneNumber: '8990011' });\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.not.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n          });\n\n          it('Should Alert of No AreaCode - toNumber is 7 Digital Number with CA Dialing Plan without Area Code', async () => {\n            regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n            composeText.addToNumber({ phoneNumber: '8990011' });\n            composeText.updateMessageText('test sender');\n            await composeText.send();\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.not.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n          });\n\n          it('Should Not Alert of Anything - toNumber is 7 Digital Number with CA Dialing Plan with Area Code', async () => {\n            regionSettings.setData({ countryCode: 'CA', areaCode: '855' });\n            composeText.addToNumber({ phoneNumber: '8990011' });\n            composeText.updateMessageText('test sender');\n            try {\n              await composeText.send();\n            } catch (error) {\n              console.debug('message sender e:', error);\n            }\n            const rawRequest\n              = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n            expect(rawRequest.to[0].phoneNumber).to.equal('+18558990011');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n            expect(messageSender.idle).to.equals(true);\n          });\n\n          it('Should Not Alert of Anything - toNumber is 7 Digital Number with US Dialing Plan with Area Code', async () => {\n            regionSettings.setData({ countryCode: 'US', areaCode: '855' });\n            composeText.addToNumber({ phoneNumber: '8990011' });\n            composeText.updateMessageText('test sender');\n            try {\n              await composeText.send();\n            } catch (error) {\n              console.debug('message sender e:', error);\n            }\n            const rawRequest\n              = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n            expect(rawRequest.to[0].phoneNumber).to.equal('+18558990011');\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n              .to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n              .to.equal(undefined);\n          });\n        });\n\n        conditionalDescribe('Extension/Special Validation', () => {\n          conditionalDescribe('Not Included In Extension List', () => {\n            it('Should Alert of notAnExtension - Typing Number', async () => {\n              composeText.updateTypingToNumber('11111');\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(\n                alert.state.messages,\n                messageSenderMessages.notAnExtension\n              )).to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert of notAnExtension - To Number', async () => {\n              composeText.addToNumber({ phoneNumber: '11111' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(\n                alert.state.messages,\n                messageSenderMessages.notAnExtension\n              )).to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert of notAnExtension - To Number (xxx)xxx-xxxx*xxx Format', async () => {\n              composeText.addToNumber({ phoneNumber: '(888) 349-5556*999' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(\n                alert.state.messages,\n                messageSenderMessages.notAnExtension\n              )).to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n          });\n\n          conditionalDescribe('GB Dialing Plan', () => {\n            beforeEach(() => {\n              regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n            });\n\n            it('Should Alert Special Number - toNumber 101 (Existed Extension/Special Number)', async () => {\n              composeText.addToNumber({ phoneNumber: '101' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert notAnExtension - toNumber 998 (No Extension)', async () => {\n              composeText.addToNumber({ phoneNumber: '998' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert Special Number - toNumber 999', async () => {\n              composeText.addToNumber({ phoneNumber: '999' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Not Alert Special Number - toNumber 911', async () => {\n              regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n              composeText.addToNumber({ phoneNumber: '911' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n            });\n          });\n\n          conditionalDescribe('US Dialing Plan', () => {\n            beforeEach(() => {\n              regionSettings.setData({ countryCode: 'US', areaCode: '' });\n            });\n\n            it('Should Alert notAnExtension - toNumber 102 (No Extension/Not Special Number) with US Dialing Plan', async () => {\n              composeText.addToNumber({ phoneNumber: '102' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert notAnExtension - toNumber 998 (No Extension)', async () => {\n              composeText.addToNumber({ phoneNumber: '998' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Alert Special Number - toNumber is 911', async () => {\n              composeText.addToNumber({ phoneNumber: '911' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.not.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Not Alert Special Number - toNumber 999', async () => {\n              composeText.addToNumber({ phoneNumber: '999' });\n              composeText.updateMessageText('test sender');\n              await composeText.send();\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n            });\n\n            it('Should Not Alert Anything - toNumber 101 (Existed Extension/Not Special Number)', async () => {\n              regionSettings.setData({ countryCode: 'US', areaCode: '' });\n              composeText.addToNumber({ phoneNumber: '101' });\n              composeText.updateMessageText('test sender');\n              try {\n                await composeText.send();\n              } catch (error) {\n                console.debug('message sender e:', error);\n              }\n              const rawRequest\n                = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n              expect(rawRequest.to[0].extensionNumber).to.equal('101');\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n                .to.equal(undefined);\n              expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n                .to.equal(undefined);\n            });\n          });\n        });\n      });\n\n      conditionalDescribe('Validate after Send Api', () => {\n        it('Should Alert of recipientNumberInvalids - toNumber is invalid', async () => {\n          composeText.addToNumber({ phoneNumber: '19999999' });\n          composeText.updateMessageText('test sender');\n          try {\n            await composeText.send();\n          } catch (error) {\n            console.debug('message sender e:', error);\n          }\n          expect(containsErrorMessage(\n            alert.state.messages,\n            messageSenderMessages.recipientNumberInvalids\n          )).to.not.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n            .to.equal(undefined);\n        });\n        it('Should Alert of internationalSMSNotSupported - select international phone number', async () => {\n          regionSettings.setData({countryCode: 'FR', areaCode: ''});\n          composeText.addToNumber({ phoneNumber: '855899001' });\n          composeText.updateMessageText(\"test sender\");\n          try{\n            await composeText.send();\n          }catch (error) {\n            console.debug('message sender e:', error);\n          }\n          expect(containsErrorMessage(\n            alert.state.messages,\n            messageSenderMessages.internationalSMSNotSupported\n          )).to.not.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n            .to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n            .to.equal(undefined);\n        });\n      });\n    });\n  });\n};\n"]}