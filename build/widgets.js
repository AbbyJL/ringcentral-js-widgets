__w_widgets = {};__w_widgets['auth-panel'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        before: function before() {},\n        method: function method(finish) {\n            finish();\n        },\n        after: function after() {\n            this.props.country = 'United States';\n            var t = w.t(this.data.lang);\n            var _data = this.data;\n            var color = _data.color;\n            var lang = _data.lang;\n            var logo = _data.logo;\n\n            this.props.dom.login.style['background-color'] = color || '#fff';\n            this.props.dom.logo.src = logo || './ringcentral_logo.png';\n            this.props.dom.login.textContent = t('login') || 'login';\n        }\n    };\n    this.actions.mount = {\n        before: function before() {},\n        after: function after() {\n            this.props.dom.username.value = localStorage.getItem('username');\n            this.props.dom.extension.value = localStorage.getItem('extension');\n            this.props.dom.password.value = localStorage.getItem('password');\n            fade.in(this.props.root);\n        }\n    };\n    this.actions.remove = {\n        before: function before() {\n            fade.out(this.props.root);\n        }\n    };\n    this.actions.login = {\n        before: function before() {\n            this.props.dom.login.disabled = true;\n            this.props.dom.error.textContent = '';\n            this.props.dom.login.classList.add('rc-button-loading');\n        },\n        method: function method(finish) {\n            this.props.username = this.props.dom.username.value;\n            this.props.extension = this.props.dom.extension.value;\n            this.props.password = this.props.dom.password.value;\n            if (this.props.country === 'United States') this.props.username = '1' + this.props.username;\n            return finish();\n        },\n        after: function after() {\n            // this.props.dom.login.disabled = false;\n            if (this.props.dom.remember.checked) {\n                localStorage.setItem('username', this.props.dom.username.value || '');\n                localStorage.setItem('extension', this.props.dom.extension.value || '');\n                localStorage.setItem('password', this.props.dom.password.value || '');\n            }\n        },\n        error: function error(err) {\n            console.error(err);\n            this.props.dom.error.textContent = err.message;\n            this.props.dom.login.disabled = false;\n        }\n    };\n    this.actions.showCountry = {\n        before: function before(event) {\n            this.props.dom['country-list'].classList.toggle('display-none');\n        }\n    };\n    this.actions.switchCountry = {\n        before: function before(event) {\n            this.props.dom['country-dropdown'].textContent = event.target.textContent;\n            this.props.dom['country-list'].classList.add('display-none');\n            this.props.country = event.target.textContent;\n        }\n    };\n    this.actions.focus = {\n        before: function before(event) {\n            this.props.dom['input-panel'].classList.add('--focus');\n        }\n    };\n    this.actions.blur = {\n        before: function before(event) {\n            this.props.dom['input-panel'].classList.remove('--focus');\n        }\n    };\n});\n//# sourceURL=auth-panel.html","template":"\n    <div class='rc-panel rc-auth-panel'>\n        <div class='rc-panel__header rc-auth-panel__header'>\n            <img    class='rc-img rc-auth-panel__img'\n                    src='./ringcentral_logo.png'\n                    data-info='logo'>\n        </div>\n        <div class='rc-panel__content rc-auth-panel__content'>\n            <div class='input-panel' data-info='input-panel'>\n              <div class='input-panel__flag'>\n                  <img class='rc-img' data-info='flag' src=''>\n              </div>\n              <input \n                  class='rc-input --clean input-panel__phone' \n                  data-info='username' \n                  placeholder='username'\n                  data-event='focus:focus|blur:blur'>\n              </input>\n            </div>\n            <input class='rc-input --round' data-info='extension' placeholder=\"extension\"></input>\n            <input class='rc-input --round' data-info='password' placeholder=\"password\" type='password'></input>\n            <button class='rc-button --round' data-info='login' data-event='click:login'>Login</button>\n            <div class='rc-label'>\n                <label for='remember'>Remember me:</label>\n                <input id='remember' type='checkbox' data-info='remember' checked>\n            </div>\n            <div class='rc-label' data-info='error'></div>\n        </div>\n        <!-- <div class='rc-panel__footer' data-info='footer'></div> -->\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['auto-complete'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = {\n        init: {\n            before: function before() {},\n            after: function after() {}\n        },\n        mount: {\n            before: function before() {},\n            method: function method(finish) {\n                finish();\n            },\n            after: function after() {\n                var _this = this;\n\n                window.addEventListener('click', function (e) {\n                    if (e.target !== _this.props.dom.input && !e.target.classList.contains('candidate')) {\n                        _this.hide();\n                    }\n                });\n            }\n        },\n        hide: {\n            after: function after() {\n                this.props.dom.candidates.classList.add('display-none');\n                if (this.showingTimeout) {\n                    window.clearTimeout(this.showingTimeout);\n                    this.showingTimeout = null;\n                }\n            }\n        },\n        show: {\n            after: function after() {\n                var _this2 = this;\n\n                if (this.showingTimeout) return;\n                this.showingTimeout = window.setTimeout(function () {\n                    if (_this2.props.dom.input === document.activeElement) _this2.props.dom.candidates.classList.remove('display-none');\n                }, 300);\n            }\n        },\n        appendInput: {\n            before: function before(value) {\n                this.props.dom.input.value += value;\n                this.props.dom.input.focus();\n            }\n        },\n        autoComplete: {\n            before: function before() {},\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(candidates) {\n                var _this3 = this;\n\n                if (!candidates) return;\n                while (this.props.dom.candidates.firstChild) {\n                    this.props.dom.candidates.removeChild(this.props.dom.candidates.firstChild);\n                }if (candidates.length > 0) this.show();else this.hide();\n                candidates.forEach(function (candidate) {\n                    var template = _this3.props.dom['candidate-template'].cloneNode(true);\n                    template.addEventListener('click', function (e) {\n                        _this3.props.dom.input.value = template.textContent;\n                        _this3.hide();\n                    });\n                    template.textContent = candidate.from.phoneNumber;\n                    _this3.props.dom.candidates.appendChild(template);\n                });\n            }\n        }\n    };\n});","template":"<div class='auto-complete'>\n    <input class='rc-input' placeholder=\"To: Enter name or number\" data-info='input' data-event='input:autoComplete'></input>\n    <div data-info='candidates' class='candidates display-none'>\n        <div data-info='candidate-template' class='candidate'></div>\n    </div>\n</div>","style":"\n.auto-complete .candidates {\n    position: absolute;\n    background-color: #fff;\n    width: 228px;\n    padding: 2px 0;\n    margin-top: 1px;\n    border: 1px solid #878787;\n    color: #878787;\n}\n\n.auto-complete .candidate {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n.auto-complete .candidate:hover {\n    background-color: #3498db;\n    color: #fff;\n}\n","imports":{"scripts":[],"styles":[]}};
__w_widgets['call-log-item'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(item) {\n            this.props.item = item;\n            if (item.result === 'Missed') this.props.dom.callResult.classList.add('--missed');\n            if (item.direction === 'Outbound') {\n                this.props.dom.time.innerHTML = item.startTime;\n                if (item.to.name) this.props.dom.contact.innerHTML = item.to.name;else this.props.dom.contact.innerHTML = item.to.phoneNumber;\n                if (item.to.location) this.props.dom.location.innerHTML = item.to.location;\n                if (item.result !== 'Missed') this.props.dom.callResult.classList.add('--outbound');\n            } else {\n                this.props.dom.time.innerHTML = item.startTime;\n                if (item.from.name) this.props.dom.contact.innerHTML = item.from.name;else this.props.dom.contact.innerHTML = item.from.phoneNumber;\n                if (item.result !== 'Missed') this.props.dom.callResult.classList.add('--inbound');\n            }\n        }\n    };\n});","template":"<div class=\"rc-call-log-item\" data-info=\"entry\">\n    <i data-info=\"callResult\" class=\"rc-call-log-item__icon\"></i>\n    <span class=\"rc-call-log-item__time\" data-info=\"time\"></span>\n    <div class=\"rc-call-log-item__body\">\n        <a class=\"__contact\" data-info=\"contact\">\n            <!--Display name or number here-->\n        </a>\n        <p class=\"__location\" data-info=\"location\"></p>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['call-log'] = {"script":"'use strict';\n\nw.register(function () {\n    function createWidgetItems(logItems, props) {\n        if (!logItems) return;\n        logItems.forEach(function (item) {\n            var widget = w('call-log-item', {\n                actions: {\n                    init: {\n                        method: function method() {\n                            return item;\n                        }\n                    }\n                }\n            });\n            widget.mount(props.dom.logs);\n            props.widgetItems.push(widget);\n        });\n    }\n\n    function filterWidgetItems(widgetItems, filter) {\n        widgetItems.forEach(function (widget) {\n            if (filter(widget)) {\n                widget.show();\n            } else {\n                widget.hide();\n            }\n        });\n    }\n\n    function enableTab(toEnableTab, toDisableTab) {\n        if (toEnableTab.classList.contains('--active') === false) {\n            toEnableTab.classList.add('--active');\n            toDisableTab.classList.remove('--active');\n        }\n    }\n    this.actions = Object.assign(w.action('interaction'), {\n        init: {\n            before: function before() {\n                this.props.widgetItems = [];\n            },\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(items) {\n                this.props.logItems = items;\n                this.refreshCallLogs();\n            }\n        },\n        mount: {\n            after: function after() {\n                this.refreshCallLogs();\n            }\n        },\n        refreshCallLogs: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {\n                // We already have widgets in view\n                if (this.props.widgetItems.length > 0) return;\n                createWidgetItems(this.props.logItems, this.props);\n            }\n        },\n        enableAllCallTab: {\n            after: function after() {\n                enableTab(this.props.dom.allCallTab, this.props.dom.missedCallTab);\n                filterWidgetItems(this.props.widgetItems, function () {\n                    return true;\n                });\n            }\n        },\n        enableMissedCallTab: {\n            after: function after() {\n                enableTab(this.props.dom.missedCallTab, this.props.dom.allCallTab);\n                filterWidgetItems(this.props.widgetItems, function (widget) {\n                    if (widget.props.item.result === 'Missed') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n            }\n        }\n    });\n});","template":"<div class=\"rc-panel\">\n    <div class='rc-panel__header'>\n        <div class=\"rc-tabs\">\n            <a \n                class=\"rc-tabs__tab --active --color --width2\" \n                data-info=\"allCallTab\" \n                data-event=\"click:enableAllCallTab\">\n                All\n            </a>\n            <a \n                class=\"rc-tabs__tab --color --width2\" \n                data-info=\"missedCallTab\" \n                data-event=\"click:enableMissedCallTab\">\n                Missed\n            </a>\n        </div>\n    </div>\n    <div class=\"rc-panel__content rc-call-log__content\" data-info=\"logs\">\n        <call-log-item dynamic></call-log-item>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['call-panel-incoming'] = {"script":"'use strict';\n\nw.register(function () {\n    var circle = w.transition('circle');\n    var fade = w.transition('fade');\n    this.actions = {\n        init: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        mount: {\n            after: function after() {\n                fade.init(this.props.root);\n                fade.in(this.props.root);\n            }\n        },\n        called: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        ignore: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {\n                this.unmount();\n            }\n        }\n    };\n});","template":"<div class='rc-panel rc-call-panel'>\n    <div class='rc-panel__header --colored --center'>\n        <h2>Incoming Call</h2>\n        <h1>Howard Zhang</h1>\n    </div>\n    <div class='rc-panel__content'>\n        <div class='rc-call-panel__center'>\n            <img class='rc-img' src=''>\n        </div>\n        <div class='rc-call-panel__footer'>\n            <button class='rc-button rc-call-panel__reply'>Reply with Messages</button>\n            <div class='action-panel text-center'>\n                <button class='rc-button --positive --round action-panel__action'>Accept</button>\n                <button class='rc-button --negative --round action-panel__action'>Ignore</button>\n            </div>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['call-panel'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n    this.actions = {\n        init: {},\n        mount: {\n            after: function after() {\n                fade.init(this.props.root);\n                fade.in(this.props.root);\n            }\n        },\n        callStarted: {},\n        callRejected: {\n            after: function after() {\n                this.unmount();\n            }\n        },\n        callEnded: {\n            after: function after() {\n                this.unmount();\n            }\n        },\n        callFailed: {\n            after: function after() {\n                this.unmount();\n            }\n        },\n        hangup: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {\n                this.unmount();\n            }\n        }\n    };\n});","template":"\n    <div class='rc-panel rc-call-panel'>\n        <section class='rc-panel__header --colored --center'>\n            <div class='text-right'>\n                Time 00:07\n            </div>\n            <div>\n                <h1>Howard Zhang</h1>\n                <h4>From <span>(650)555-1234</span></h4>\n            </div>\n        </section>\n        <section class='rc-panel__content'>\n            <div class='rc-call-panel__center control-panel'>\n                <h4 class='control-panel__title'>\n                    You're on a VoIP call. If your WiFi signal gets weak, switch the call to carrier service.\n                </h4>\n                <div class='control-panel__line'>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni28\"></span>\n                            <span class=\"icon-uni35\"></span>\n                        </button>\n                        <div class='text-center'>Hold</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni21\"></span>\n                            <span class=\"icon-uni2D\"></span>\n                        </button>\n                        <div class='text-center'>Keypad</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni24\"></span>\n                            <span class=\"icon-uni30\"></span>\n                        </button>\n                        <div class='text-center'>Record</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni26\"></span>\n                            <span class=\"icon-uni33\"></span>\n                        </button>\n                        <div class='text-center'>Audio</div>\n                    </div>\n                </div>\n                <div class='control-panel__line'>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni27\"></span>\n                            <span class=\"icon-uni34\"></span>\n                        </button>\n                        <div class='text-center'>Flip</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni23\"></span>\n                            <span class=\"icon-uni2F\"></span>\n                        </button>\n                        <div class='text-center'>Transfer</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni22\"></span>\n                            <span class=\"icon-uni2E\"></span>\n                        </button>\n                        <div class='text-center'>Park</div>\n                    </div>\n                </div>\n            </div>\n            <div class='rc-call-panel__footer'>\n                <div class='action-panel'>\n                    <button class='rc-button --round action-panel__action'>\n                        <span class='icon-uniCE'></span>\n                    </button>\n                    <button class='rc-button --negative --round action-panel__action' data-event='click:hangup'>\n                        <span class='icon-uni44'></span>\n                    </button>\n                </div>\n            </div>\n        </section>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['compose-text'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        after: function after() {\n            var composeText = this;\n            w.customize(this, 'contact-picker', {\n                actions: {\n                    autoComplete: {\n                        method: function method() {\n                            return composeText.queryContacts(this.props.inputValue);\n                        }\n                    }\n                }\n            });\n            w.customize(this, 'dropdown', {\n                actions: {\n                    getData: {\n                        method: function method() {\n                            return composeText.getOutboundCallerID();\n                        },\n                        after: function after(ids) {\n                            var _this = this;\n\n                            ids.forEach(function (id) {\n                                return _this.addItem(id);\n                            });\n                        }\n                    },\n                    switchTitle: {\n                        method: function method(text) {\n                            composeText.props.fromNumber = text;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    this.actions.mount = {\n        after: function after() {\n            this.props['dropdown'].getData();\n        }\n    };\n    this.actions.send = {\n        method: function method(finish) {\n            this.props.text = this.props.dom['text'].value;\n            this.props.fromNumber = this.props['dropdown'].getSelected();\n            this.props.toNumber = this.props['contact-picker'].getInput();\n            return finish();\n        },\n        after: function after(response) {\n            if (response.json().messageStatus === 'Sent') this.sent();\n        }\n    };\n    this.actions.sent = {\n        after: function after() {\n            this.props.dom['send'].textContent = 'Success!';\n            this.props.dom['text'].value = '';\n        }\n    };\n    this.actions.readyToSend = {\n        after: function after() {\n            this.props.dom['send'].textContent = 'Send';\n        }\n    };\n    this.actions.getOutboundCallerID = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.queryContacts = {\n        method: function method(finish, queryText) {\n            this.props.to = queryText;\n            return finish();\n        }\n    };\n});","template":"<div class='rc-panel rc-compose-text'>\n    <div class='rc-panel__header --colored'>\n        <h5 class='text-center'>\n            Compose text\n        </h5>\n        <contact-picker data-info='contact-picker'></contact-picker>\n        <dropdown data-info='dropdown'></dropdown>\n    </div>\n    <div class='rc-panel__content'>\n        <textarea \n            class='rc-textarea rc-compose-text__textarea' \n            placeholder=\"Type any text...\" \n            data-info='text' \n            data-event='focus:readyToSend'></textarea>\n        <button \n            class='rc-button --circle --positive rc-compose-text__send' \n            data-info='send' \n            data-event='click:send'>\n            <span class='icon-uniB1'></span>\n        </button>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['conference'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = {\n        init: {\n            method: function method() {\n                this.getConferenceInfo();\n            },\n            after: function after() {\n                var t = w.t(this.data.lang);\n                this.props.dom.dialInNumberLabel.textContent = t('conference-dialinnumber-text');\n                this.props.dom.hostCodeLabel.textContent = t('conference-hostcode-text');\n                this.props.dom.participantCodeLabel.textContent = t('conference-participantcode-text');\n                this.props.dom.inviteWithTextButton.textContent = t('conference-invitewithtext-text');\n                this.props.dom.joinAsHostButton.textContent = t('conference-joinashost-text');\n            }\n        },\n        getConferenceInfo: {\n            method: function method(finish) {\n                var _this = this;\n\n                return Promise.resolve(finish()).then(function (conferenceInfo) {\n                    _this.props.inviteMessage = 'Test';\n                    _this.props.dialInNumber = conferenceInfo.phoneNumber;\n                    return conferenceInfo;\n                });\n            },\n            after: function after(conferenceInfo) {\n                this.props.dom.dialInNumber.textContent = conferenceInfo.phoneNumber;\n                this.props.dom.hostCode.textContent = conferenceInfo.hostCode;\n                this.props.dom.participantCode.textContent = conferenceInfo.participantCode;\n                this.enable();\n            }\n        },\n        inviteWithText: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        joinAsHost: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        enable: {\n            method: function method() {\n                this.props.dom.inviteWithTextButton.disabled = false;\n                this.props.dom.joinAsHostButton.disabled = false;\n            }\n        }\n    };\n});","template":"<div class=\"rc-panel rc-conference --color\">\n    <div class='rc-panel__header'></div>\n    <div class=\"rc-panel__content rc-conference__content\">\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"dialInNumberLabel\"></label>\n            <div class=\"__value --right\" data-info=\"dialInNumber\">\n            </div>\n        </div>\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"hostCodeLabel\"></label>\n            <div class=\"__value --right\" data-info=\"hostCode\">\n            </div>\n        </div>\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"participantCodeLabel\"></label>\n            <div class=\"__value --right\" data-info=\"participantCode\">\n            </div>\n        </div>\n        <div class=\"rc-conference__buttons\">\n            <button \n                class=\"rc-button --clean --round __button\" \n                data-info=\"inviteWithTextButton\" \n                data-event=\"click:inviteWithText\"\n                disabled>\n            </button>\n            <button \n                class=\"rc-button --positive --round __button\" \n                data-info=\"joinAsHostButton\" \n                data-event=\"click:joinAsHost\"\n                disabled>\n            </button>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['contact-detail'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n\n    function createEmailElements(parent, contact) {\n        contact.emails.forEach(function (email) {\n            var htmlString = '<div class=\\'rc-contact-detail__section-line\\'>\\n                                <label class=\"__label\">Email</label>\\n                                <div class=\"__value\">\\n                                    ' + email + '\\n                                </div>\\n                            </div>';\n            var div = document.createElement('div');\n            div.innerHTML = htmlString;\n            parent.appendChild(div);\n        });\n    }\n\n    function createPhoneNumberElements(parent, contact) {\n        var htmlString = '<div class=\"rc-contact-detail__section-line\">\\n                            <label class=\"__label\">Extension</label>\\n                            <div class=\"__value\">' + contact.extension + '</div>\\n                        </div>';\n        var div = document.createElement('div');\n        div.innerHTML = htmlString;\n        parent.appendChild(div);\n        contact.phoneNumbers.forEach(function (number) {\n            htmlString = '<div class=\"rc-contact-detail__section-line\">\\n                            <label class=\"__label\">Direct Number</label>\\n                            <div class=\"__value\">' + number + '</div>\\n                        </div>';\n            div = document.createElement('div');\n            div.innerHTML = htmlString;\n            parent.appendChild(div);\n        });\n    }\n\n    this.actions = {\n        init: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(contact) {\n                if (contact) {\n                    this.props.dom.displayName.textContent = contact.displayName;\n                    createEmailElements(this.props.dom.emails, contact);\n                    createPhoneNumberElements(this.props.dom.phoneNumbers, contact);\n                }\n                fade.init(this.props.root);\n                fade.in(this.props.root);\n            }\n        }\n    };\n});\n//# sourceURL=contact-detail.html","template":"<div class=\"rc-contact-detail\">\n    <div class=\"rc-panel__header rc-contact-detail__info\">\n        <div class=\"rc-avatar --small __avatar\"></div>\n        <div class=\"__name\" data-info='displayName'>\n        </div>\n    </div>\n    <div class=\"rc-panel__content\">\n        <section class=\"rc-contact-detail__section\" data-info='emails'>\n            <!--<div class=\"rc-contact-detail__section-line\">\n                <label class=\"__label\">Email</label>\n                <div class=\"__value\">\n                    colin.liu@ringcentral.com\n                </div>\n            </div>-->\n        </section>\n        <section class=\"rc-contact-detail__section\" data-info='phoneNumbers'>\n        </section>\n    </div>    \n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['contact-item'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        before: function before() {\n            this.props.contact = null;\n        },\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(contact) {\n            this.props.contact = contact;\n            this.props.dom.name.textContent = contact.name;\n        }\n    };\n    this.actions.select = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n});\n//# sourceURL=contact-item.html","template":"\n    <div class=\"rc-contact-item\" data-event=\"click:select\">\n        <a class=\"rc-contact-item__body\">\n            <span class=\"__contact\" data-info=\"name\"></span>\n        </a>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['contact-picker-item'] = {"script":"\"use strict\";\n\nw.register(function () {\n    this.actions = {\n        init: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(contact) {\n                this.props.contact = contact;\n                this.props.dom.name.textContent = contact.name;\n                this.props.dom.value.textContent = contact.value;\n            }\n        },\n        select: {\n            method: function method(finish) {\n                return finish();\n            }\n        }\n    };\n});","template":"<div class='rc-contact rc-list__item' data-event='click:select'>\n    <div class='rc-contact__name' data-info='name'></div>\n    <div class='rc-contact__value' data-info='value'></div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['contact-picker'] = {"script":"'use strict';\n\nw.register(function () {\n    var enlarge = w.transition('enlarge');\n    this.actions = {\n        init: {\n            method: function method(finish) {\n                this.props.limit = 10;\n                this.props.show = false;\n                return finish();\n            }\n        },\n        mount: {\n            method: function method(finish) {\n                finish();\n            },\n            after: function after() {\n                var _this = this;\n\n                enlarge.init(this.props.dom.contacts);\n                document.addEventListener('click', function (e) {\n                    var currentNode = e.target;\n                    while (currentNode.parentNode) {\n                        currentNode = currentNode.parentNode;\n                        if (currentNode.isEqualNode(_this.props.root)) return;\n                    }\n                    _this.hide();\n                });\n                if (this.data.contact) this.props.dom.input.value = this.data.contact;\n            }\n        },\n        hide: {\n            after: function after() {\n                var _this2 = this;\n\n                if (this.props.show) {\n                    // delay the hidden process, make options clickable, then hide the panel\n                    setTimeout(function () {\n                        _this2.props.show = false;\n                        enlarge.out(_this2.props.dom.contacts);\n                    }, 50);\n                }\n            }\n        },\n        show: {\n            after: function after() {\n                // if (this.showingTimeout)\n                //     return;\n                // this.showingTimeout = window.setTimeout(() => {\n                //     if (this.props.dom.input === document.activeElement)\n                //         enlarge.in(this.props.dom.contacts)\n                // }, 300);\n                if (!this.props.show) {\n                    this.props.show = true;\n                    enlarge.in(this.props.dom.contacts);\n                }\n            }\n        },\n        getInput: {\n            method: function method() {\n                return this.props.dom.input.value;\n            }\n        },\n        appendInput: {\n            before: function before(value) {\n                this.props.dom.input.value += value;\n                this.props.dom.input.focus();\n            }\n        },\n        setInput: {\n            before: function before(value) {\n                this.props.dom.input.value = value;\n                this.props.dom.input.focus();\n            }\n        },\n        disable: {\n            method: function method() {\n                this.props.dom.input.readOnly = true;\n            }\n        },\n        focus: {\n            method: function method() {\n                this.props.dom.input.focus();\n            }\n        },\n        autoComplete: {\n            method: function method(finish) {\n                this.props.inputValue = this.props.dom.input.value;\n                return finish();\n            },\n            after: function after(contacts) {\n                var _this3 = this;\n\n                if (!contacts) return;\n                while (this.props.dom.contacts.firstChild) {\n                    this.props.dom.contacts.removeChild(this.props.dom.contacts.firstChild);\n                }if (contacts.length > 0) this.show();else this.hide();\n                var count = 0;\n                var parent = this;\n                contacts.every(function (contact) {\n                    if (count < _this3.props.limit) {\n                        var widget = w('contact-picker-item', {\n                            actions: {\n                                init: {\n                                    method: function method() {\n                                        return contact;\n                                    }\n                                },\n                                select: {\n                                    method: function method() {\n                                        parent.setInput(this.props.contact.value);\n                                        parent.hide();\n                                    }\n                                }\n                            }\n                        });\n                        widget.mount(_this3.props.dom.contacts);\n                        count++;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n            }\n        }\n    };\n});","template":"<div class='rc-contact-picker'>\n    <input  class='rc-input --clean' \n            data-info='input' \n            data-event='input:autoComplete'\n            placeholder=''>\n    </input>\n    <div class='rc-contact-picker__contacts rc-list' data-info='contacts'>\n        <contact-picker-item dynamic></contact-picker-item>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['contacts'] = {"script":"'use strict';\n\nw.register(function () {\n    function createContactWidget(parent, contact) {\n        return w('contact-item', {\n            actions: {\n                init: {\n                    method: function method() {\n                        return contact;\n                    }\n                },\n                select: {\n                    method: function method() {\n                        parent.selectContact(this.props.contact);\n                    }\n                }\n            }\n        });\n    }\n    this.data = {\n        loadingContacts: 30,\n        searchBox: true\n    };\n    this.actions = {\n        init: {\n            before: function before() {\n                this.props.selectedContact = null;\n                this.props.contactItemWidgets = [];\n                this.props.currentIndex = 0;\n            },\n            after: function after() {\n                if (typeof this.data.searchBox !== 'undefined' && !this.data.searchBox) this.props.dom['header'].classList.add('display-none');\n            }\n        },\n        mount: {\n            after: function after() {\n                this.fetchContacts();\n            }\n        },\n        fetchContacts: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(contacts) {\n                var _this = this;\n\n                // We already have widgets in view\n                if (this.props.contactItemWidgets.length > 0) return;\n                contacts.forEach(function (contact) {\n                    var con = createContactWidget(_this, contact);\n                    _this.props.contactItemWidgets.push(con);\n                });\n                this.displayContacts(this.props.currentIndex);\n                // this.fetchRelatedContact()\n            }\n        },\n        displayContacts: {\n            method: function method(finish, beginIndex) {\n                var _this2 = this;\n\n                this.props.contactItemWidgets.slice(beginIndex, beginIndex + this.data.loadingContacts).forEach(function (contactWidget) {\n                    return contactWidget.mount(_this2.props.dom.contacts);\n                });\n                this.props.currentIndex = beginIndex + this.data.loadingContacts;\n                return finish();\n            },\n            after: function after() {},\n            error: function error(_error) {\n                console.error(_error);\n            }\n        },\n        fetchRelatedContact: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {\n                this.pinContacts();\n            }\n        },\n        pinContacts: {\n            method: function method() {\n                var _this3 = this;\n\n                Object.keys(this.props.relateContacts).filter(function (id) {\n                    var matchedWidgets = _this3.props.contactItemWidgets.filter(function (widget) {\n                        // console.log(widget.props.contact.id + ',' + id);\n                        var contact = widget.props.contact.id == id;\n                        if (contact) {\n                            widget.mount(_this3.props.dom['pin-contacts']);\n                        }\n                        return contact;\n                    });\n                    return matchedWidgets.length === 0;\n                }).forEach(function (id) {\n                    var unknownContact = _this3.props.relateContacts[id];\n                    // for contect-item model\n                    unknownContact.name = unknownContact.displayName;\n                    createContactWidget(_this3, unknownContact).mount(_this3.props.dom['pin-contacts']);\n                });\n                // this.props.contactItemWidgets\n                //     .filter(widget =>\n                //         Object.keys(this.props.relateContacts).indexOf(widget.props.contact.id + '') > -1\n                //     )\n                //     .forEach(relatedWidget => relatedWidget.mount(this.props.dom['pin-contacts']))\n            }\n        },\n        search: {\n            method: function method() {\n                var _this4 = this;\n\n                var searchText = this.props.dom.searchText.value;\n                this.props.contactItemWidgets.forEach(function (contactWidget) {\n                    if (contactWidget.props.contact.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n                        contactWidget.mount(_this4.props.dom.contacts);\n                    } else {\n                        contactWidget.unmount();\n                    }\n                });\n            }\n        },\n        selectContact: {\n            method: function method(finish, contact) {\n                this.props.selectedContact = contact;\n                return finish();\n            }\n        },\n        scroll: {\n            method: function method(finish, event) {\n                if (event.target.scrollHeight - event.target.scrollTop < event.target.offsetHeight + 10) this.reachBottom();\n            }\n        },\n        reachBottom: {\n            before: function before() {},\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {\n                // maintain the scoll position\n                var scrollBottom = this.props.dom.contacts.offsetHeight;\n                this.displayContacts(this.props.currentIndex);\n                this.props.dom.container.scrollTop = this.props.dom.contacts.offsetHeight - scrollBottom;\n            }\n        },\n        focus: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        }\n    };\n});\n//# sourceURL=contacts.html","template":"\n    <div class='rc-panel'>\n        <div class='rc-panel__header --flat' data-info='header'>\n            <div data-info='search-box' class='rc-contacts__searchBox'>\n                <input \n                    class='__input' \n                    type='text' \n                    data-info='searchText' \n                    data-event='input:search|focus:focus'\n                >\n            </div>\n        </div>\n        <div class='rc-panel__content' data-info='container'>\n            <div class='rc-contacts__list' data-event='scroll:scroll'>\n                <div data-info='pin-contacts' class='rc-contacts__pins'>\n                </div>\n                <div data-info='contacts'>\n                    <contact-item dynamic></contact-item>\n                </div>\n            </div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['conversation-advanced'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n    this.actions = {\n        init: {\n            method: function method() {},\n            after: function after() {\n                this.props.syncedMessages = [];\n                this.props.toNumbers = [];\n                this.props.toNumber = this.data.toNumber;\n                this.props.fromNumber = this.data.fromNumber;\n                this.props.fromNumbers = this.data.fromNumbers || [];\n\n                var conversation = this;\n                w.customize(this, 'dropdown', {\n                    data: {},\n                    actions: {\n                        mount: {\n                            after: function after() {\n                                // this.getData()\n                            }\n                        },\n                        getData: {\n                            method: function method() {\n                                return conversation.getOutboundCallerID();\n                            },\n                            after: function after(ids) {\n                                var _this = this;\n\n                                ids.forEach(function (id) {\n                                    return _this.addItem(id);\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        },\n        mount: {\n            method: function method(finish) {\n                var _this2 = this;\n\n                var currentContact = this.props.contact = this.data.contact;\n                console.log(currentContact);\n                // set default outbound caller id as first phone number\n                this.props.toExtension = currentContact.extension;\n                this.data.fromNumber && this.setSender(this.data.fromNumber);\n                this.setReceiver(this.data.toNumber || currentContact.phoneNumber[0]);\n                this.setReceiverCandidates(currentContact.phoneNumber);\n                currentContact.msg && this.appendMessages(currentContact.msg);\n                this.scrollToAnchor();\n\n                this.setTitle(currentContact.displayName);\n\n                // Fake contact\n                if (!currentContact.profileImage) {\n                    var hash = md5(currentContact.id);\n                    this.props.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                    return;\n                }\n\n                // FIXME: API call in here is a anti-pattern, should be in services\n                sdk.platform().get(currentContact.profileImage).then(function (r) {\n                    return r.response();\n                }).then(function (r) {\n                    // Real contact, no avatar\n                    console.log(r);\n                    if (r.status === 204 || r.status === 404) {\n                        var hash = md5(currentContact.id);\n                        _this2.props.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                    } else {\n                        // Real contact, has avatar\n                        _this2.props.dom['profile-img'].src = currentContact.profileImage + ('?access_token=' + sdk.platform().auth().accessToken());\n                    }\n                }).catch(function (e) {\n                    // Real contact, no avatar\n                    var hash = md5(currentContact.id);\n                    _this2.props.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                });\n            },\n            after: function after() {\n                this.props.dom.input.value = this.data.message || '';\n                fade.init(this.props.root);\n                fade.in(this.props.root);\n            }\n        },\n        setTitle: {\n            after: function after(text) {\n                this.props.dom.header.textContent = text;\n            }\n        },\n        enter: {\n            method: function method(finish, e) {\n                if (e.keyCode === 13) {\n                    this.send();\n                    e.preventDefault();\n                }\n            }\n        },\n        send: {\n            before: function before() {\n                // send messages on UI\n                this.props.message = this.props.dom.input.value;\n                this.props.dom.input.value = '';\n                var date = new Date();\n                var bubble = this.addBubble(null, 'SMS', this.props.message, 'Outgoing', date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds());\n                this.scrollToBottom();\n                return bubble;\n            },\n            method: function method(finish, dom) {\n                var _this3 = this;\n\n                this.props.fromNumber = this.data.fromNumber || this.props.fromNumber;\n                this.props.toNumber = this.data.toNumber || this.props.toNumber;\n                return finish().then(function (response) {\n                    dom.setAttribute('data-id', response.id);\n                    _this3.unconfirm = _this3.unconfirm || [];\n                    _this3.unconfirm.push(dom);\n                    return response;\n                }).catch(function (err) {\n                    return dom.parentNode.removeChild(dom);\n                });\n                // user actually send to message to server (SDK)\n            },\n            after: function after(response) {}\n        },\n        addBubble: {\n            after: function after(id, type, content, direction, time, prepend) {\n                var opponent = direction === 'Inbound';\n                var model = this.props.contact.msg && this.props.contact.msg.find(function (contact) {\n                    return contact.id === id;\n                });\n                var doc;\n                if (type === 'SMS' || type === 'Pager') doc = this.createSMSTemplate(id, content, opponent, time);else if (type === 'VoiceMail') doc = this.createVoiceMailTemplate(id, content, opponent, time);else if (type === 'Voice') doc = this.createCallLogTemplate(id, content, opponent, time);\n\n                if (model) {\n                    model.dom = doc;\n                    this.markBubble(model);\n                }\n\n                if (prepend) {\n                    this.props.dom.conversations.insertBefore(doc, this.props.dom.conversations.firstChild);\n                } else {\n                    this.props.dom.conversations.appendChild(doc);\n                }\n                return this.props.dom.conversations.lastChild;\n            }\n        },\n        markBubble: {\n            method: function method(finish, model) {\n                var _this4 = this;\n\n                model.dom.addEventListener('mouseover', function (e) {\n                    if (!_this4.props.fromNumbers) return; // not yet loaded\n                    var fromNumber = model.from;\n                    var toNumber = model.to;\n                    if (_this4.props.contact.extension == fromNumber || _this4.props.fromNumbers.indexOf(fromNumber) > -1) {\n                        _this4.props.dom['from-number'].textContent = fromNumber;\n                        _this4.props.dom['to-number'].textContent = toNumber;\n                    } else {\n                        _this4.props.dom['from-number'].textContent = toNumber;\n                        _this4.props.dom['to-number'].textContent = fromNumber;\n                    }\n                    _this4.props.contact.msg.filter(function (contact) {\n                        return contact.from == fromNumber || contact.from == toNumber || contact.to == toNumber || contact.to == fromNumber;\n                    }).filter(function (msg) {\n                        return msg.dom;\n                    }).map(function (msg) {\n                        return msg.dom;\n                    }).map(function (dom) {\n                        return dom.classList.add('--marked');\n                    });\n                });\n                model.dom.addEventListener('mouseout', function (e) {\n                    if (!_this4.props.fromNumbers) return; // not yet loaded\n                    var fromNumber = model.from;\n                    var toNumber = model.to;\n                    if (_this4.props.contact.extension == fromNumber || _this4.props.fromNumbers.indexOf(fromNumber) > -1) {\n                        _this4.props.dom['from-number'].textContent = fromNumber;\n                        _this4.props.dom['to-number'].textContent = toNumber;\n                    } else {\n                        _this4.props.dom['from-number'].textContent = toNumber;\n                        _this4.props.dom['to-number'].textContent = fromNumber;\n                    }\n\n                    _this4.props.contact.msg.filter(function (msg) {\n                        return msg.dom;\n                    }).map(function (msg) {\n                        return msg.dom;\n                    }).map(function (dom) {\n                        return dom.classList.remove('--marked');\n                    });\n                });\n            }\n        },\n        createSMSTemplate: {\n            method: function method(finish, id, text, opponent, time) {\n                var div = document.createElement('div');\n                div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\' \\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' \\'>\\n                                        ' + text + '\\n                                    </div>\\n                                </div>';\n\n                return div.firstChild;\n            }\n        },\n        createVoiceMailTemplate: {\n            method: function method(finish, id, content, opponent, time) {\n                var audio = new Audio(content.uri + '?access_token=' + sdk.platform().auth().accessToken());\n                var div = document.createElement('div');\n                div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\'\\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' --voice voice-bubble\\'>\\n                                        <span class=\\'voice-bubble__play icon-uni7C\\'></span>\\n                                        <span class=\\'voice-bubble__duration\\' data-length=' + content.vmDuration + '></span>\\n                                    </div>\\n                                </div>';\n                div.firstChild.querySelector('.voice-bubble__duration').style.width = content.vmDuration * 2 + 'px';\n                div.firstChild.addEventListener('click', function (e) {\n                    audio.play();\n                });\n                return div.firstChild;\n            }\n        },\n        createCallLogTemplate: {\n            method: function method(finish, id, content, opponent, time) {\n                var div = document.createElement('div');\n                div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\'\\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' --log\\'>\\n                                        <span class=\\'bubble--log icon-uniAE\\'>\\n                                        ' + (typeof content === 'string' ? '<span>' + content + '</span>' : \"<span class='voice-bubble__play icon-uni7C'></span>\") + '\\n                                    </div>\\n                                </div>';\n\n                if (typeof content === 'string') {} else {\n                    // TODO:\n                    // get ${content.uri}?access_token=${sdk.platform().auth().accessToken()}\n                    // to get the duration of record\n                    var audio = new Audio(content.uri + '/content?access_token=' + sdk.platform().auth().accessToken());\n                    div.firstChild.addEventListener('click', function (e) {\n                        audio.play();\n                    });\n                }\n                return div.firstChild;\n            }\n        },\n        scroll: {\n            method: function method(finish, event) {\n                if (event.target.scrollTop === 0) this.reachTop();\n            }\n        },\n        reachTop: {\n            before: function before() {},\n            method: function method(finish) {\n                if (this.isLoading) return;\n                this.isLoading = true;\n                this.props.dom.loading.classList.remove('display-none');\n                return finish();\n            },\n            after: function after(messages) {\n                if (messages) {\n                    // maintain the scoll position\n                    var scrollBottom = this.props.dom.conversations.offsetHeight;\n                    // We prepend the messages, so the order is reversed,\n                    // and we don't want to modify the original msgs, so shallow copy first\n                    this.prependMessages(messages.slice().reverse(), false);\n                    this.props.dom.container.scrollTop = this.props.dom.conversations.offsetHeight - scrollBottom;\n\n                    this.isLoading = false;\n                    this.props.dom.loading.classList.add('display-none');\n                }\n            }\n        },\n        addTimestamp: {\n            method: function method(finish, time, prepend) {\n                var div = document.createElement('div');\n                div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div class=\\'rc-conversation__timestamp\\'>\\n                                        ' + time + '\\n                                    </div>\\n                                </div>';\n                if (prepend) this.props.dom.conversations.insertBefore(div.firstChild, this.props.dom.conversations.firstChild);else this.props.dom.conversations.appendChild(div.firstChild);\n            }\n        },\n        parseMessages: {\n            method: function method(finish, messages, prepend) {\n                var _this5 = this;\n\n                messages.map(function (msg) {\n                    var time = new Date(msg.time);\n                    msg.displayTime = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                    msg.status.sendConfirmed = true;\n                    msg.status.receiveConfirmed = true;\n                    return msg;\n                }).forEach(function (msg) {\n                    _this5.addBubble(msg.id, msg.type, msg.subject, msg.direction, msg.displayTime, prepend);\n                    var time = new Date(msg.time);\n                    var date = time.getDate();\n                    var month = time.getMonth() + 1;\n                    if (!prepend && date > _this5.props.convDate && month >= _this5.props.convMonth || prepend && date < _this5.props.convDate && month <= _this5.props.convMonth) _this5.addTimestamp(month + '/' + date, prepend);\n                    _this5.props.convDate = date;\n                    _this5.props.convMonth = month;\n                });\n            }\n        },\n        appendMessages: {\n            method: function method(finish, messages, scroll) {\n                if (messages) this.parseMessages(messages, false);\n            },\n            after: function after(messages) {\n                var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                if (scroll) this.scrollToBottom();\n            }\n        },\n        prependMessages: {\n            before: function before() {},\n            method: function method(finish, messages, scroll) {\n                this.props.contact.msg = this.props.contact.msg || [];\n                // this.props.contact.msg = this.props.contact.msg.concat(messages)\n                if (messages) this.parseMessages(messages, true);\n            },\n            after: function after(messages) {\n                var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                if (scroll) this.scrollToBottom();\n            }\n        },\n        addIncomingMessages: {\n            method: function method(finish) {\n                var _this6 = this;\n\n                this.props.contact.msg = this.props.contact.msg || [];\n                console.log('incoming');\n                this.parseMessages(this.props.contact.msg.filter(function (msg) {\n                    return !msg.status.receiveConfirmed;\n                }).filter(function (msg) {\n                    return _this6.props.syncedMessages.indexOf(msg.id) === -1;\n                }).map(function (msg) {\n                    _this6.props.syncedMessages.push(msg.id);\n                    return msg;\n                }).filter(function (msg) {\n                    return msg.direction === 'Inbound';\n                }), false);\n            },\n            after: function after() {\n                this.scrollToBottom();\n            }\n        },\n        confirmMessages: {\n            method: function method(finish) {\n                var _this7 = this;\n\n                if (!this.unconfirm) return [];\n                this.props.contact.msg = this.props.contact.msg || [];\n                return this.props.contact.msg.filter(function (msg) {\n                    return !msg.status.sendConfirmed;\n                }).map(function (msg) {\n                    // FIXME: cache getAttribute, perf\n                    var index = _this7.unconfirm.findIndex(function (dom) {\n                        return dom.getAttribute('data-id') == msg.id;\n                    });\n                    var dom = _this7.unconfirm[index] || null;\n                    console.log(msg);\n                    if (dom) {\n                        dom.removeAttribute('data-id');\n                        msg.dom = dom;\n                        msg.status.sendConfirmed = true;\n                        _this7.unconfirm.splice(index, 1);\n                        _this7.markBubble(msg);\n                    }\n                    return dom;\n                });\n            }\n        },\n        scrollToAnchor: {\n            after: function after() {\n                var _this8 = this;\n\n                var anchor;\n                if (this.data.anchorContent && (anchor = this.props.contact.msg.find(function (content) {\n                    return content.id == _this8.data.anchorContent.id;\n                }))) {\n                    this.props.dom.container.scrollTop = anchor.dom.offsetTop - anchor.dom.offsetHeight;\n                }\n            }\n        },\n        warnBubble: {\n            after: function after(id) {}\n        },\n        scrollToBottom: {\n            after: function after() {\n                this.props.dom.container.scrollTop = this.props.dom.container.scrollHeight;\n            }\n        },\n        getOutboundCallerID: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(numbers) {\n                // If we didn't get the default number, set to the first one of candidates\n                if (!this.props.fromNumber) this.setSender(numbers[0]);\n                this.setSenderCandidates(numbers);\n            }\n        },\n        queryContacts: {\n            method: function method(finish, queryText) {\n                this.props.to = queryText;\n                return finish();\n            }\n        },\n        setSender: {\n            method: function method(finish, fromNumber) {\n                this.props.fromNumber = fromNumber;\n            }\n        },\n        setSenderCandidates: {\n            method: function method(finish, fromNumbers) {\n                this.props.fromNumbers = fromNumbers;\n            }\n        },\n        setReceiver: {\n            method: function method(finish, toNumber) {\n                this.props.toNumber = toNumber;\n            }\n        },\n        setReceiverCandidates: {\n            method: function method(finish, toNumbers) {\n                this.props.toNumbers = toNumbers;\n            }\n        },\n        togglePhoneModal: {\n            before: function before() {\n                this.props.dom['phone-mask'].classList.toggle('display-none');\n            }\n        },\n        back: {\n            after: function after() {}\n        }\n    };\n});\n//# sourceURL=conversation-advanced.html","template":"\n    <div class='rc-panel rc-conversation'>\n        <div class='rc-panel__header --colored'>\n            <span class='rc-conversation__close icon-uni3E' data-event='click:back'></span>\n            <div class='rc-conversation__header'>\n                <div class='rc-conversation__avatar-wrapper'>\n                    <img class='rc-conversation__avatar' data-info='profile-img' src=\"\">\n                </div>\n                <div class='rc-conversation__header-title' data-info='header'></div>\n            </div>\n        </div>\n        <div    class='rc-panel__content rc-conversation__container' \n                data-info='panel'>\n            <div class='rc-conversation__bar'>\n                <div class='rc-conversation__hint' data-info='to-number'>to</div>\n                <div class='rc-conversation__hint' data-info='from-number'>from</div>\n            </div>\n            <div    class='rc-conversation__content'\n                    data-info='container'\n                    data-event='scroll:scroll'>\n                <div    class='conversations__loading display-none'\n                        data-info='loading'>\n                    loading...\n                </div>\n                <div    class='conversations' \n                        data-info='conversations'>\n                </div>\n            </div>\n            <div class='rc-conversation__textarea-wrapper'>\n                <textarea \n                data-info='input'\n                data-event='keydown:enter'\n                placeholder='messages...'\n                ></textarea>\n                <button \n                    class='rc-button --circle --positive rc-conversation__callout'\n                    data-info='callout'\n                    data-event='click:togglePhoneModal'\n                >\n                </button>\n            </div>\n        </div>\n        <div    class='rc-conversation__mask display-none'\n                data-info='phone-mask'\n                data-event='click:togglePhoneModal'>\n            <div \n                class='rc-conversation__modal'\n                data-info='phone-modal'>\n                <h2>\n                    <span class='voice-bubble__play icon-uniAE'></span>\n                    <span>Phone call</span>\n                </h2>\n                <div>\n                    <dropdown data-info='from-number-dropdown'></dropdown>\n                    <dropdown data-info='to-number-dropdown'></dropdown>\n                </div>\n                <button class='rc-button --round --positive'>Call out</button>\n            </div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":["https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.3.0/js/md5.min.js"],"styles":[]}};
__w_widgets['conversation-item-voice'] = {"script":"\"use strict\";","template":"<div class='clearfix'>\n    <div\n        data-tooltip='$' \n        class='conversations__bubble --self'>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['conversation'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n    this.actions = {\n        init: {\n            method: function method() {},\n            after: function after() {\n                var conversation = this;\n                w.customize(this, 'contact-picker', {\n                    data: {\n                        contact: conversation.data.toNumber\n                    },\n                    actions: {\n                        autoComplete: {\n                            method: function method() {\n                                return conversation.queryContacts(this.props.inputValue);\n                            }\n                        }\n                    }\n                });\n                w.customize(this, 'dropdown', {\n                    data: {\n                        defaultValue: conversation.data.fromNumber\n                    },\n                    actions: {\n                        getData: {\n                            method: function method() {\n                                return conversation.getOutboundCallerID();\n                            },\n                            after: function after(ids) {\n                                var _this = this;\n\n                                ids.forEach(function (id) {\n                                    return _this.addItem(id);\n                                });\n                            }\n                        },\n                        switchTitle: {\n                            method: function method(text) {\n                                conversation.props.fromNumber = text;\n                            }\n                        }\n                    }\n                });\n            }\n        },\n        mount: {\n            method: function method() {\n                // There is two type of conversation: 1. to new users 2. existing conversation\n                // will be determined by this.data\n                if (!this.data.new) {\n                    this.props['contact-picker'].disable();\n                    this.props.dropdown.disable();\n                }\n            },\n            after: function after() {\n                var _this2 = this;\n\n                this.props['dropdown'].getData();\n                this.props.dom.input.value = this.data.message || '';\n                fade.init(this.props.root);\n                fade.in(this.props.root, {\n                    after: function after() {\n                        return _this2.props['contact-picker'].focus();\n                    }\n                });\n            }\n        },\n        enter: {\n            method: function method(finish, e) {\n                if (e.keyCode === 13) {\n                    this.send();\n                    e.preventDefault();\n                }\n            }\n        },\n        send: {\n            before: function before() {\n                // send messages on UI\n                this.props.message = this.props.dom.input.value;\n                this.props.dom.input.value = '';\n                var date = new Date();\n                var bubble = this.addBubble(this.props.message, 'Outgoing', date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds());\n                this.scrollToBottom();\n                return bubble;\n            },\n            method: function method(finish, dom) {\n                var _this3 = this;\n\n                this.props.fromNumber = this.data.fromNumber || this.props.fromNumber;\n                this.props.toNumber = this.data.toNumber || this.props['contact-picker'].props.dom.input.value;\n                return finish().then(function (response) {\n                    dom.setAttribute('data-id', response.id);\n                    _this3.unconfirm = _this3.unconfirm || [];\n                    _this3.unconfirm.push(dom);\n                    return response;\n                }).catch(function (err) {\n                    return dom.parentNode.removeChild(dom);\n                });\n                // user actually send to message to server (SDK)\n            },\n            after: function after(response) {}\n        },\n        addBubble: {\n            after: function after(text, direction, time, prepend) {\n                var opponent = direction === 'Inbound';\n                var template = '<div class=\\'clearfix\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\' \\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' \\'>\\n                                        ' + text + '\\n                                    </div>\\n                                </div>';\n                var div = document.createElement('div');\n                div.innerHTML = template;\n                if (prepend) {\n                    this.props.dom.conversations.insertBefore(div.childNodes[0], this.props.dom.conversations.firstChild);\n                } else {\n                    this.props.dom.conversations.appendChild(div.childNodes[0]);\n                }\n                return this.props.dom.conversations.lastChild;\n            }\n        },\n        disable: {\n            after: function after() {\n                this.props['contact-picker'].disable();\n                this.props.dropdown.disable();\n            }\n        },\n        scroll: {\n            method: function method(finish, event) {\n                if (event.target.scrollTop === 0) this.reachTop();\n            }\n        },\n        reachTop: {\n            before: function before() {},\n            method: function method(finish) {\n                var _this4 = this;\n\n                if (this.isLoading) return;\n                this.isLoading = true;\n                this.props.dom.loading.classList.remove('display-none');\n                return finish().then(function (result) {\n                    _this4.isLoading = false;\n                    _this4.props.dom.loading.classList.add('display-none');\n                    return result;\n                });\n            },\n            after: function after(messages) {\n                if (messages) {\n                    // maintain the scoll position\n                    var scrollBottom = this.props.dom.conversations.offsetHeight;\n                    this.prependMessages(messages, false);\n                    this.props.dom.container.scrollTop = this.props.dom.conversations.offsetHeight - scrollBottom;\n                }\n            }\n        },\n        appendMessages: {\n            method: function method(finish, msgs, scroll) {\n                var _this5 = this;\n\n                if (msgs) msgs.map(function (msg) {\n                    var time = new Date(msg.lastModifiedTime);\n                    msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                    return msg;\n                }).forEach(function (msg) {\n                    return _this5.addBubble(msg.subject, msg.direction, msg.time);\n                });\n            },\n            after: function after(msgs) {\n                var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                if (scroll) this.scrollToBottom();\n            }\n        },\n        prependMessages: {\n            before: function before() {},\n            method: function method(finish, msgs, scroll) {\n                var _this6 = this;\n\n                if (msgs) msgs.map(function (msg) {\n                    var time = new Date(msg.lastModifiedTime);\n                    msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                    return msg;\n                }).forEach(function (msg) {\n                    return _this6.addBubble(msg.subject, msg.direction, msg.time, true);\n                });\n            },\n            after: function after(msgs) {\n                var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                if (scroll) this.scrollToBottom();\n            }\n        },\n        warnBubble: {\n            after: function after(id) {}\n        },\n        scrollToBottom: {\n            after: function after() {\n                this.props.dom.container.scrollTop = this.props.dom.container.scrollHeight;\n            }\n        },\n        getOutboundCallerID: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        queryContacts: {\n            method: function method(finish, queryText) {\n                this.props.to = queryText;\n                return finish();\n            }\n        },\n        addIncomingMessages: {\n            method: function method(finish, messages) {\n                var _this7 = this;\n\n                messages.filter(function (msg) {\n                    return msg.availability === 'Alive';\n                }).filter(function (msg) {\n                    return msg.messageStatus === 'Received';\n                }).filter(function (msg) {\n                    return msg.direction === 'Inbound';\n                }).filter(function (msg) {\n                    return msg.readStatus === 'Unread';\n                }).map(function (msg) {\n                    console.log(msg);\n                    var time = new Date(msg.lastModifiedTime);\n                    msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                    return msg;\n                }).forEach(function (msg) {\n                    return _this7.addBubble(msg.subject, msg.direction, msg.time);\n                });\n            },\n            after: this.scrollToBottom\n        },\n        confirmMessages: {\n            method: function method(finish, messages) {\n                if (!this.unconfirm) return [];\n                if (!messages) return [];\n                return this.unconfirm.filter(function (dom) {\n                    return messages.map(function (msg) {\n                        return msg.id;\n                    }).indexOf(parseInt(dom.getAttribute('data-id'))) > -1;\n                }).forEach(function (dom) {\n                    return dom.removeAttribute('data-id');\n                });\n            }\n        }\n    };\n});\n//# sourceURL=conversation.html","template":"\n    <div class='rc-panel rc-conversation'>\n        <div class='rc-panel__header --colored' data-info='header'>\n            <contact-picker data-info='contact-picker'></contact-picker>\n        </div>\n        <div    class='rc-panel__content rc-conversation__container' \n                data-info='panel'>\n            <dropdown class='' data-info='dropdown'></dropdown>\n            <div    class='rc-conversation__content' \n                    data-info='container'\n                    data-event='scroll:scroll'>\n                <div    class='conversations__loading display-none'\n                        data-info='loading'>\n                    loading...\n                </div>\n                <div    class='conversations' \n                        data-info='conversations'>\n                </div>\n            </div>\n            <div class='rc-conversation__textarea-wrapper'>\n                <textarea \n                data-info='input' \n                data-event='keydown:enter'\n                placeholder='messages...'\n                ></textarea>\n            </div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['dial-pad'] = {"script":"'use strict';\n\nw.register(function () {\n    var fade = w.transition('fade');\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        before: function before() {},\n        method: function method() {},\n        after: function after() {\n            var dialPad = this;\n            var _data = this.data;\n            var color = _data.color;\n            var lang = _data.lang;\n            var logo = _data.logo;\n\n            this.props.dom.header.style['background-color'] = color || '#fff';\n            w.customize(this, 'contact-picker', {\n                actions: {\n                    autoComplete: {\n                        method: function method() {\n                            return dialPad.queryContacts(this.props.inputValue);\n                        }\n                    }\n                }\n            });\n            w.customize(this, 'dropdown', {\n                actions: {\n                    getData: {\n                        method: function method() {\n                            return dialPad.getOutboundCallerID();\n                        },\n                        after: function after(ids) {\n                            var _this = this;\n\n                            ids.forEach(function (id) {\n                                return _this.addItem(id);\n                            });\n                        }\n                    },\n                    switchTitle: {\n                        method: function method(text) {\n                            dialPad.props.fromNumber = text;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    this.actions.mount = {\n        before: function before() {},\n        method: function method() {},\n        after: function after() {\n            this.props['dropdown'].getData();\n            this.props['contact-picker'].focus();\n            // fade.in(this.props.root);\n        }\n    };\n    this.actions.dialing = {\n        method: function method(finish) {\n            var button = event.target;\n            if (!button.getAttribute('data-value')) // click on the number or symbol\n                button = button.parentNode;\n            var cp = this.props['contact-picker'];\n            cp.appendInput(button.getAttribute('data-value'));\n            cp.autoComplete();\n            return finish();\n        },\n        after: function after() {\n            this.props['contact-picker'].props.dom.input.focus();\n        }\n    };\n    this.actions.callout = {\n        before: function before() {\n            this.props.dom.callout.classList.add('--active');\n        },\n        method: function method(finish) {\n            // TODO: Do some basic validation.\n            var ac = this.props['contact-picker'];\n            this.props.toNumber = ac.props.dom.input.value;\n            this.props.fromNumber = localStorage.getItem('username');\n            return finish(this.props.fromNumber, this.props.toNumber);\n        },\n        after: function after() {\n            var _this2 = this;\n\n            setTimeout(function () {\n                return _this2.props.dom.callout.classList.remove('--active');\n            }, 1000);\n        },\n        error: function error(err) {\n            this.props.dom.callout.classList.remove('--active');\n        }\n    };\n    this.actions.disable = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after() {\n            this.props.dom['disabled-mask'].classList.remove('display-none');\n            this.props.dom['container'].classList.add('blur');\n        }\n    };\n    this.actions.getOutboundCallerID = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.queryContacts = {\n        method: function method(finish, queryText) {\n            this.props.to = queryText;\n            return finish();\n        }\n    };\n    this.actions.setNumber = {\n        method: function method(finish, value) {\n            this.props['contact-picker'].setInput(value);\n            return finish();\n        }\n    };\n});","template":"\n    <div class='rc-panel rc-dial-pad'>\n        <div class='rc-panel__header --colored' data-info='header'>\n            <contact-picker data-info='contact-picker'></contact-picker>\n        </div>\n        <div data-info='container'>\n            <div class='rc-panel__content'>\n                \n                <dropdown data-info='dropdown'></dropdown>\n                <div class='margin-top-2'>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-1'\n                            data-value='1' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>1</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-2'\n                            data-value='2' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>2</div>\n                            <div class='dial-button__symbol'>ABC</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-3'\n                            data-value='3' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>3</div>\n                            <div class='dial-button__symbol'>DEF</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-4'\n                            data-value='4'\n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>4</div>\n                            <div class='dial-button__symbol'>GHI</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-5'\n                            data-value='5'\n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>5</div>\n                            <div class='dial-button__symbol'>JKL</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-6'\n                            data-value='6'\n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>6</div>\n                            <div class='dial-button__symbol'>MNO</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-7'\n                            data-value='7' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>7</div>\n                            <div class='dial-button__symbol'>PQRS</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-8'\n                            data-value='8' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>8</div>\n                            <div class='dial-button__symbol'>TUV</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-9'\n                            data-value='9' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>9</div>\n                            <div class='dial-button__symbol'>WXYZ</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button' \n                            data-info='dial-button-0'\n                            data-value='0' \n                            data-event='click:dialing'>\n                            <div class='dial-button__number'>0</div>\n                            <div class='dial-button__symbol'>+</div>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <button \n            class='rc-button --circle call-button' \n            data-info='callout' \n            data-event='click:callout'>\n            </button>\n        </div>\n        <div class='rc-dial-pad__mask display-none' data-info='disabled-mask'>\n            <p>Your account doesn't not have Web Phone permission.</p>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['dropdown'] = {"script":"'use strict';\n\nw.register(function () {\n    var enlarge = w.transition('enlarge');\n    this.actions = {\n        init: {\n            after: function after() {\n                if (this.data.defaultValue) this.switchTitle(this.data.defaultValue);\n            }\n        },\n        mount: {\n            after: function after() {\n                var _this = this;\n\n                enlarge.init(this.props.dom['list']);\n                document.addEventListener('click', function (e) {\n                    var currentNode = e.target;\n                    while (currentNode.parentNode) {\n                        currentNode = currentNode.parentNode;\n                        if (currentNode.isEqualNode(_this.props.root)) return;\n                    }\n                    _this.hide();\n                });\n            }\n        },\n        collapse: {\n            after: function after() {\n                enlarge.toggle(this.props.dom['list']);\n            }\n        },\n        hide: {\n            after: function after() {\n                enlarge.out(this.props.dom['list']);\n            }\n        },\n        getData: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        addItem: {\n            after: function after(text) {\n                var _this2 = this;\n\n                var item = document.createElement('div');\n                // FIXME\n                item.classList.add('rc-list__item', 'rc-dropdown__item');\n                item.textContent = text;\n                item.addEventListener('click', function (e) {\n                    _this2.switchTitle(text);\n                });\n                this.props.dom['list'].appendChild(item);\n            }\n        },\n        getSelected: {\n            method: function method() {\n                return this.props.dom['dropdown'].textContent;\n            }\n        },\n        removeItem: {},\n        disable: {\n            method: function method() {\n                this.props.dom.dropdown.disabled = true;\n            }\n        },\n        switchTitle: {\n            method: function method(finish, text) {\n                finish(text);\n            },\n            after: function after(text) {\n                this.props.dom['dropdown'].textContent = text;\n                this.hide();\n            }\n        }\n    };\n});\n//# sourceURL=dropdown.html","template":"\n    <div class='rc-dropdown'>\n        <button class='rc-dropdown__trigger rc-button'\n                data-info='dropdown'\n                data-event='click:collapse'>From: </button>\n        <div    class='rc-dropdown__list rc-list' \n                data-info='list'>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['message-detail'] = {"script":"\"use strict\";\n\nw.register(function () {\n    this.actions = {\n        init: {},\n        mount: {}\n    };\n});","template":"<div class=\"rc-panel\">\n    <div class=\"rc-panel__content\">\n        <div class=\"rc-message-detail\">\n            <div>Conversation with</div>\n            <div class=\"rc-message-detail__contact\">\n                <div class=\"__name\">Colin Liu</div>\n                <div><span>6508370092</span></div>\n            </div>\n            <img class=\"rc-avatar --big rc-message-detail__avatar\">\n            <!--<div>\n                <div ng-show=\"['SMS','Pager'].indexOf(message.type)>=0\" class=\"status\">{{STRINGS.MESSAGEDETAILS.activityLabel}}</div>\n                <div ng-hide=\"['SMS','Pager'].indexOf(message.type)>=0\" class=\"status\">{{ STRINGS.MESSAGE_STATUS[message.messageStatus] || STRINGS.MESSAGE_STATUS.default }}</div>\n                <div class=\"time\">{{ message.creationTime | formatDate:\"long\" }}</div>\n            </div>-->\n            <div>&nbsp</div>\n            <div class=\"rc-button --positive rc-message-detail__button\">\n                Call\n            </div>\n            <div class=\"rc-button --positive rc-message-detail__button\">\n                Send\n            </div>\n        \n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['message-item-fax'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(message) {\n            var parent = this;\n            var t = w.t(this.data.lang);\n            w.customize(this, 'message-item', {\n                data: parent.data,\n                actions: {\n                    init: {\n                        method: function method() {\n                            return message;\n                        },\n                        after: function after() {\n                            this.setShortText();\n                        }\n                    },\n                    setShortText: {\n                        method: function method() {\n                            return t('message-item-fax-text');\n                        }\n                    },\n                    viewInfo: {\n                        method: function method() {\n                            parent.viewInfo();\n                        }\n                    },\n                    enter: {\n                        method: function method() {\n                            parent.enter();\n                        }\n                    }\n                }\n            });\n            this.props.message = message;\n        }\n    };\n    this.actions.viewInfo = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.enter = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after() {}\n    };\n});","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['message-item-text'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(message) {\n            var parent = this;\n            w.customize(this, 'message-item', {\n                data: parent.data,\n                actions: {\n                    init: {\n                        method: function method() {\n                            return message;\n                        },\n                        after: function after() {\n                            this.setShortText();\n                        }\n                    },\n                    setShortText: {\n                        method: function method() {\n                            return message.subject;\n                        }\n                    },\n                    viewInfo: {\n                        method: function method() {\n                            parent.viewInfo();\n                        }\n                    },\n                    enter: {\n                        method: function method() {\n                            parent.enter();\n                        }\n                    }\n                }\n            });\n            this.props.message = message;\n        }\n    };\n    this.actions.viewInfo = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.enter = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after() {}\n    };\n});","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['message-item-voicemail'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(message) {\n            var parent = this;\n            var t = w.t(this.data.lang);\n            w.customize(this, 'message-item', {\n                data: parent.data,\n                actions: {\n                    init: {\n                        method: function method() {\n                            return message;\n                        },\n                        after: function after() {\n                            this.setShortText();\n                        }\n                    },\n                    setShortText: {\n                        method: function method() {\n                            return t('message-item-voicemail-text');\n                        }\n                    },\n                    viewInfo: {\n                        method: function method() {\n                            parent.viewInfo();\n                        }\n                    },\n                    enter: {\n                        method: function method() {\n                            parent.enter();\n                        }\n                    }\n                }\n            });\n            this.props.message = message;\n        }\n    };\n    this.actions.viewInfo = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.enter = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after() {}\n    };\n});","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['message-item'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = w.action('interaction');\n    this.actions.init = {\n        method: function method(finish) {\n            var item = finish();\n            this.props.message = item;\n            return item;\n        },\n        after: function after(item) {\n            if (item.readStatus === 'Unread') {\n                this.props.dom.icon.classList.add('--not-read');\n                this.props.dom.contact.classList.add('--not-read');\n            }\n            this.props.dom.icon.classList.add(\"--\" + item.type.toLowerCase());\n            this.props.dom.time.textContent = item.time;\n            this.props.dom.contact.textContent = item.contact;\n        }\n    };\n    this.actions.setShortText = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after(text) {\n            this.props.dom.text.textContent = text;\n        }\n    };\n    this.actions.open = {\n        method: function method(finish) {\n            return finish();\n        }\n    };\n    this.actions.viewInfo = {\n        method: function method(finish, event) {\n            event.stopPropagation();\n            return finish();\n        }\n    };\n    this.actions.enter = {\n        method: function method(finish) {\n            return finish();\n        },\n        after: function after() {}\n    };\n});","template":"<div data-info='message' class=\"rc-message-item\" data-event='click:open'>\n    <i data-info='icon' class=\"rc-message-item__icon\"></i>\n    <a class=\"rc-message-item__info\" data-event='click:viewInfo'></a>\n    <span class=\"rc-message-item__time\" data-info='time'></span>\n    <div class=\"rc-message-item__body\">\n        <span class=\"__contact\" data-info='contact' data-event='click:enter'>\n        </span>\n        <div class=\"__text\" data-info='text' data-event='click:enter'>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['messages'] = {"script":"'use strict';\n\nw.register(function () {\n\n    var currentEnabledTab = null;\n\n    function enableTab(toEnableTab, toDisableTab) {\n        if (toEnableTab.classList.contains('--active') === false) {\n            toEnableTab.classList.add('--active');\n            toDisableTab.classList.remove('--active');\n        }\n    }\n\n    function createMessageWidget(type, message, parent) {\n        return w(type, {\n            data: parent.data,\n            actions: {\n                init: {\n                    method: function method() {\n                        return message;\n                    }\n                },\n                viewInfo: {\n                    method: function method() {\n                        parent.viewMessageInfo(this.props.message);\n                    }\n                },\n                enter: {\n                    method: function method() {\n                        return parent.enterMessage(this.props.message);\n                    }\n                }\n            }\n        });\n    }\n\n    function createMessageWidgets(messages, parent) {\n        messages.forEach(function (message) {\n            var widget = null;\n            if (message.type === 'Fax') {\n                widget = createMessageWidget('message-item-fax', message, parent);\n            } else if (message.type === 'VoiceMail') {\n                widget = createMessageWidget('message-item-voicemail', message, parent);\n            } else {\n                widget = createMessageWidget('message-item-text', message, parent);\n            }\n            widget.mount(parent.props.dom.messages);\n            parent.props.widgetItems.push(widget);\n        });\n    }\n\n    function filterMessageWidget(widgetItems, type) {\n        widgetItems.forEach(function (item) {\n            if (type === 'all') {\n                item.show();\n            } else {\n                if (type.indexOf(item.props.message.type.toLowerCase()) >= 0) {\n                    item.show();\n                } else {\n                    item.hide();\n                }\n            }\n        });\n    }\n\n    this.actions = {\n        init: {\n            before: function before() {\n                this.props.widgetItems = [];\n            },\n            after: function after() {\n                // currentEnabledTab = this.props.dom.allTab;\n                var t = w.t(this.data.lang);\n                // this.props.dom.allTab.textContent = t('messages-tab-all');\n                // this.props.dom.voiceMailTab.textContent = t('messages-tab-voicemail');\n                // this.props.dom.faxTab.textContent = t('messages-tab-fax');\n                // this.props.dom.textTab.textContent = t('messages-tab-text');\n            }\n        },\n        mount: {\n            after: function after() {\n                this.refreshMessages();\n            }\n        },\n        enableTab: {\n            after: function after(event, type) {\n                enableTab(event.target, currentEnabledTab);\n                currentEnabledTab = event.target;\n                filterMessageWidget(this.props.widgetItems, event.target.getAttribute('data-value'));\n            }\n        },\n        refreshMessages: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(messages) {\n                console.log(messages);\n                var root = this.props.dom.messages;\n                while (root.firstChild) {\n                    root.removeChild(root.firstChild);\n                }\n                createMessageWidgets(messages, this);\n            }\n        },\n        viewMessageInfo: {\n            method: function method(finish, message) {\n                this.props.selectedMessage = message;\n                return finish();\n            }\n        },\n        enterMessage: {\n            method: function method(finish, message) {\n                this.props.selectedMessage = message;\n                return finish();\n            }\n        },\n        compose: {\n            before: function before() {\n                this.props.dom.compose.classList.add('--active');\n            },\n            method: function method(finish) {\n                return new Promise(function (resolve) {\n                    return setTimeout(function () {\n                        return resolve(finish());\n                    }, 500);\n                });\n            },\n            after: function after() {\n                var _this = this;\n\n                setTimeout(function () {\n                    return _this.props.dom.compose.classList.remove('--active');\n                }, 1000);\n            }\n        }\n    };\n});\n//# sourceURL=messages.html","template":"<div class=\"rc-panel rc-messages\">\n    <div class='rc-panel__header --flat'>\n        <div class=\"rc-contacts__searchBox\">\n            <input class=\"__input\" type=\"text\" data-info=\"searchText\" data-event=\"input:search\">\n        </div>\n    </div>\n    <div class=\"rc-panel__content\">\n        <button \n            class='rc-button --circle compose-button' \n            data-info='compose' \n            data-event='click:compose'>\n        </button>\n        <div data-info='messages'>\n            <message-item-text dynamic></message-item-text>\n            <message-item-fax dynamic></message-item-fax>\n            <message-item-voicemail dynamic></message-item-voicemail>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['notification'] = {"script":"'use strict';\n\nvar slideDown = w.transition('slide-down');\nw.register(function () {\n    this.actions = {\n        mount: {\n            method: function method() {},\n            after: function after() {\n                slideDown.in(this.props.root);\n            }\n        },\n        msg: {\n            method: function method(finish, msg) {\n                this.props.dom.msg.textContent = msg;\n                return finish();\n            }\n        },\n        show: {\n            method: function method(finish, target, sec) {\n                var _this = this;\n\n                this.mount(target);\n                finish();\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        slideDown.out(_this.props.root, {\n                            after: function after() {\n                                return resolve(_this.unmount());\n                            }\n                        });\n                    }, sec);\n                });\n            }\n        }\n    };\n});\n//# sourceURL=notification.html","template":"<div>\n    <div class='rc-notification' data-event='click:unmount'>\n        <span class='rc-notification__icon'></span>\n        <span class='rc-notification__text' data-info='msg'>Error occur</span>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['rc-phone'] = {"script":"'use strict';\n\nvar phone = w.register(function () {\n    this.actions = {\n        getService: {\n            method: function method() {\n                return {\n                    phoneService: w.service()['phoneService'],\n                    loginService: w.service()['loginService'],\n                    callLogService: w.service()['callLogService'],\n                    accountService: w.service()['accountService'],\n                    rcContactService: w.service()['rcContactService'],\n                    contactSearchService: w.service()['contactSearchService'],\n                    rcContactSearchProvider: w.service()['rcContactSearchProvider'],\n                    rcMessageService: w.service()['rcMessageService'],\n                    rcMessageProvider: w.service()['rcMessageProvider'],\n                    rcConferenceSerivce: w.service()['rcConferenceSerivce'],\n                    contactDetailWidgetAdapter: w.service()['contactDetailWidgetAdapter'],\n                    dialPadSearchProviders: [rcContactSearchProvider]\n                };\n            }\n        },\n        loadData: {\n            method: function method() {\n                this.getService().rcMessageService.subscribeToMessageUpdate();\n                this.getService().rcMessageService.syncMessages(this.props.cachedMessageHours);\n                this.getService().accountService.getAccountInfo();\n                this.getService().accountService.getPhoneNumber();\n                this.getService().rcContactService.syncCompanyContact();\n                this.getService().phoneService.registerSIP();\n                this.getService().callLogService.getCallLogs();\n                this.getService().phoneService.listen();\n            }\n        },\n        createWidgets: {\n            method: function method() {\n                var _getService = this.getService();\n\n                var phoneService = _getService.phoneService;\n                var loginService = _getService.loginService;\n                var callLogService = _getService.callLogService;\n                var accountService = _getService.accountService;\n                var rcContactService = _getService.rcContactService;\n                var contactSearchService = _getService.contactSearchService;\n                var rcContactSearchProvider = _getService.rcContactSearchProvider;\n                var rcMessageService = _getService.rcMessageService;\n                var rcMessageProvider = _getService.rcMessageProvider;\n                var rcConferenceSerivce = _getService.rcConferenceSerivce;\n                var contactDetailWidgetAdapter = _getService.contactDetailWidgetAdapter;\n                var dialPadSearchProviders = _getService.dialPadSearchProviders;\n\n                var phone = this;\n                this.props.conversation = undefined;\n                this.props.contactDetail = undefined;\n                this.props.dialPad = w('dial-pad', {\n                    data: phone.data,\n                    actions: {\n                        mount: {\n                            after: function after() {\n                                if (!accountService.hasServiceFeature(\"VoipCalling\")) this.disable();\n                            }\n                        },\n                        callout: {\n                            method: function method(fromNo, toNo) {\n                                return phoneService.callout(fromNo, toNo);\n                            },\n                            after: function after() {\n                                phone.props.callPanel.mount('#call-panel');\n                            },\n                            error: function error(e) {\n                                console.error(e);\n                                phone.props.notification.show('#notification', 4000);\n                                phone.props.notification.msg(e.message);\n                            }\n                        },\n                        queryContacts: {\n                            method: function method() {\n                                var _this = this;\n\n                                var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                    return provider.search(_this.props.to);\n                                });\n                                return contactSearchService.query(dialPadSearchFunctions);\n                            }\n                        },\n                        getOutboundCallerID: {\n                            method: function method() {\n                                return accountService.listNumber(\"VoiceFax\", 'CallerId');\n                            }\n                        }\n                    }\n                });\n                this.props.callPanel = w('call-panel', {\n                    data: phone.data,\n                    actions: {\n                        init: {\n                            method: function method() {\n                                phoneService.on('callStarted', this.callStarted);\n                                phoneService.on('callRejected', this.callRejected);\n                                phoneService.on('callEnded', this.callEnded);\n                                phoneService.on('callFailed', this.callFailed);\n                            }\n                        },\n                        answer: {\n                            method: function method() {\n                                phoneService.answer();\n                            }\n                        },\n                        hangup: {\n                            method: function method() {\n                                return phoneService.hangup();\n                            }\n                        }\n                    }\n                });\n                this.props.callPanelIncoming = w('call-panel-incoming', {\n                    data: phone.data,\n                    actions: {\n                        init: {\n                            method: function method() {\n                                phoneService.on('called', this.called);\n                            }\n                        },\n                        called: {\n                            method: function method() {\n                                this.mount('#call-panel-incoming');\n                            }\n                        }\n                    }\n                });\n                this.props.callLog = w('call-log', {\n                    actions: {\n                        init: {\n                            method: function method() {\n                                return callLogService.getCallLogs();\n                            }\n                        }\n                    }\n                });\n                this.props.messageWidget = w('messages', {\n                    data: phone.data,\n                    actions: {\n                        mount: {\n                            after: function after() {\n                                rcMessageProvider.onMessageUpdated(this.refreshMessages);\n                            }\n                        },\n                        refreshMessages: {\n                            method: function method() {\n                                return rcMessageProvider.getLastMessagesOfAllType();\n                            }\n                        },\n                        viewMessageInfo: {\n                            method: function method() {\n                                alert(this.props.selectedMessage.type);\n                            }\n                        },\n                        enterMessage: {\n                            before: function before() {},\n                            method: function method() {\n                                // TODO: makes the div temp\n                                var messages = this;\n                                if (phone.props.conversation) phone.props.conversation.destroy();\n                                phone.props.conversation = w('conversation', {\n                                    data: {\n                                        new: false,\n                                        fromNumber: messages.props.selectedMessage.author,\n                                        toNumber: messages.props.selectedMessage.contact\n                                    },\n                                    actions: {\n                                        init: {\n                                            after: function after() {\n                                                this.props.hourFrom = phone.props.cachedMessageHours;\n                                                this.props.convId = messages.props.selectedMessage.convId;\n                                            }\n                                        },\n                                        mount: {\n                                            after: function after() {\n                                                rcMessageService.onMessageUpdated(this.confirmMessages);\n                                                rcMessageService.onMessageUpdated(this.addIncomingMessages);\n                                            }\n                                        },\n                                        send: {\n                                            method: function method() {\n                                                return rcMessageService.sendSMSMessage(this.props.message, this.props.fromNumber, this.props.toNumber);\n                                            }\n                                        },\n                                        queryContacts: {\n                                            method: function method() {\n                                                var _this2 = this;\n\n                                                var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                                    return provider.search(_this2.props.to);\n                                                });\n                                                return contactSearchService.query(dialPadSearchFunctions);\n                                            }\n                                        },\n                                        getOutboundCallerID: {\n                                            method: function method() {\n                                                return accountService.listNumber(\"VoiceFax\", 'SmsSender');\n                                            }\n                                        },\n                                        reachTop: {\n                                            method: function method() {\n                                                this.props.hourFrom += 100;\n                                                console.log(this.props.hourFrom);\n                                                return rcMessageProvider.getConversation(this.props.convId, this.props.hourFrom);\n                                            }\n                                        }\n                                    }\n                                });\n                                phone.props.conversation.mount('#conversation');\n\n                                return rcMessageProvider.getConversation(this.props.selectedMessage.convId, this.props.hourFrom).then(phone.props.conversation.appendMessages);\n                            }\n                        },\n                        compose: {\n                            method: function method() {\n                                phone.props.conversation = w('conversation', {\n                                    data: {\n                                        new: true\n                                    },\n                                    actions: {\n                                        init: {\n                                            after: function after() {\n                                                this.props.hourFrom = phone.props.cachedMessageHours;\n                                            }\n                                        },\n                                        mount: {\n                                            after: function after() {\n                                                rcMessageService.onMessageUpdated(this.confirmMessages);\n                                                rcMessageService.onMessageUpdated(this.addIncomingMessages);\n                                            }\n                                        },\n                                        send: {\n                                            before: function before() {\n                                                this.disable();\n                                            },\n                                            method: function method() {\n                                                return rcMessageService.sendSMSMessage(this.props.message, this.props.fromNumber, this.props.toNumber);\n                                            },\n                                            after: function after(response) {\n                                                this.props.convId = response.id;\n                                                return rcMessageProvider.getConversation(response.id, 24).then(this.appendMessages);\n                                            }\n                                        },\n                                        queryContacts: {\n                                            method: function method() {\n                                                var _this3 = this;\n\n                                                var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                                    return provider.search(_this3.props.to);\n                                                });\n                                                return contactSearchService.query(dialPadSearchFunctions);\n                                            }\n                                        },\n                                        getOutboundCallerID: {\n                                            method: function method() {\n                                                return accountService.listNumber(\"VoiceFax\", 'SmsSender');\n                                            }\n                                        },\n                                        reachTop: {\n                                            method: function method() {\n                                                this.props.hourFrom += 100;\n                                                console.log(this.props.hourFrom);\n                                                return rcMessageProvider.getConversation(this.props.convId, this.props.hourFrom);\n                                            }\n                                        }\n                                    }\n                                });\n                                phone.props.conversation.mount('#conversation');\n                            },\n                            after: function after() {}\n                        }\n                    }\n                });\n                this.props.conference = w('conference', {\n                    data: phone.data,\n                    actions: {\n                        getConferenceInfo: {\n                            method: function method() {\n                                return rcConferenceSerivce.getConferenceInfo();\n                            }\n                        },\n                        inviteWithText: {\n                            method: function method() {\n                                phone.props.conversation = w('conversation', {\n                                    data: {\n                                        new: true,\n                                        message: phone.props.conference.props.inviteMessage\n                                    },\n                                    actions: {\n                                        init: {\n                                            after: function after() {\n                                                this.props.hourFrom = phone.props.cachedMessageHours;\n                                            }\n                                        },\n                                        mount: {\n                                            after: function after() {\n                                                rcMessageService.onMessageUpdated(this.confirmMessages);\n                                                rcMessageService.onMessageUpdated(this.addIncomingMessages);\n                                            }\n                                        },\n                                        send: {\n                                            before: function before() {\n                                                this.disable();\n                                            },\n                                            method: function method() {\n                                                return rcMessageService.sendSMSMessage(this.props.message, this.props.fromNumber, this.props.toNumber);\n                                            },\n                                            after: function after(response) {\n                                                this.props.convId = response.id;\n                                                return rcMessageProvider.getConversation(response.id, 24).then(this.appendMessages);\n                                            }\n                                        },\n                                        queryContacts: {\n                                            method: function method() {\n                                                var _this4 = this;\n\n                                                var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                                    return provider.search(_this4.props.to);\n                                                });\n                                                return contactSearchService.query(dialPadSearchFunctions);\n                                            }\n                                        },\n                                        getOutboundCallerID: {\n                                            method: function method() {\n                                                return accountService.listNumber(\"VoiceFax\", 'SmsSender');\n                                            }\n                                        },\n                                        reachTop: {\n                                            method: function method() {\n                                                this.props.hourFrom += 100;\n                                                console.log(this.props.hourFrom);\n                                                return rcMessageProvider.getConversation(this.props.convId, this.props.hourFrom);\n                                            }\n                                        }\n                                    }\n                                });\n                                phone.props.conversation.mount('#conversation');\n                            }\n                        },\n                        joinAsHost: {\n                            method: function method() {\n                                phone.props.dom.container.style.transform = 'translateX(0px)';\n                                phone.props.dialPad.mount('#dial-pad');\n                                phone.props.dialPad.setNumber(phone.props.conference.props.dialInNumber);\n                            }\n                        }\n                    }\n                });\n                this.props.contacts = w('contacts', {\n                    data: phone.data,\n                    actions: {\n                        fetchContacts: {\n                            method: function method() {\n                                var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                    return provider.searchAll();\n                                });\n                                return contactSearchService.query(dialPadSearchFunctions);\n                            }\n                        },\n                        selectContact: {\n                            method: function method() {\n                                var selectedContact = this.props.selectedContact;\n                                var contact = contactDetailWidgetAdapter.getContact(selectedContact.id, selectedContact.type);\n                                phone.props.contactDetail = w('contact-detail', {\n                                    actions: {\n                                        init: {\n                                            method: function method() {\n                                                return contact;\n                                            }\n                                        }\n                                    }\n                                });\n                                phone.props.contactDetail.mount('#contact-detail');\n                            }\n                        }\n                    }\n                });\n                this.props.toolbar = w('tool-bar', {\n                    data: phone.data,\n                    actions: {\n                        init: {\n                            after: function after() {\n                                console.log(phone.switchWidgets());\n                                this.clickItem(this.addItem('<span class=\"icon-uniA4\"></span><span class=\"icon-RC_shapes_1-40_pressed\"></span>'), phone.switchWidgets(phone.props.dialPad, '#dial-pad', 0).fn);\n                                this.clickItem(this.addItem('<span class=\"icon-uni2487\"></span></span><span class=\"icon-RC_shapes_1_30_pressed\"></span>'), phone.switchWidgets(phone.props.messageWidget, '#messages-panel', 1).fn);\n                                this.clickItem(this.addItem('<span class=\"icon-uni7D\"></span><span class=\"icon-contact_info_pressed\"></span>'), phone.switchWidgets(phone.props.contacts, '#contacts', 2).fn);\n                                this.clickItem(this.addItem('<span class=\"icon-uniC8\"></span><span class=\"icon-RC_shapes_2-30_pressed\"></span>'), phone.switchWidgets(phone.props.callLog, '#call-log', 3).fn);\n                                this.clickItem(this.addItem('<span class=\"icon-uniA3\"></span>', 'Conference'), phone.switchWidgets(phone.props.conference, '#conference', 4).fn);\n                                this.clickItem(this.addItem('<span class=\"icon-uni47\"></span>', 'Meeting'), function () {\n                                    phone.props.dom.container.style.transform = 'translateX(-750px)';\n                                    if (phone.props.conversation) {\n                                        phone.props.conversation.destroy();\n                                        phone.props.conversation = null;\n                                    }\n                                });\n                                // this.addItem('<img src=\"../src/styles/images/settings_normal.png\">');\n                            }\n                        },\n                        mount: {\n                            after: function after() {\n                                phone.props.dialPad.mount('#dial-pad');\n                            }\n                        }\n                    }\n                });\n                this.props.authPanel = w('auth-panel', {\n                    data: phone.data,\n                    actions: {\n                        login: {\n                            method: function method() {\n                                return loginService.login(PhoneFormat.formatE164('US', this.props.username), this.props.extension, this.props.password);\n                            },\n                            after: function after() {\n                                this.unmount();\n                                phone.loadData();\n                                phone.props.toolbar.mount('#toolbar');\n                            }\n                        }\n                    }\n                });\n                this.props.notification = w('notification', {});\n                this.props.panels = [this.props.dialPad, this.props.callPanel, this.props.callPanelIncoming, this.props.callLog, this.props.messageWidget, this.props.conference, this.props.contacts, this.props.toolbar, this.props.authPanel];\n            }\n        },\n        switchWidgets: {\n            method: function method(finish, source, target, index) {\n                var _this5 = this;\n\n                return {\n                    fn: function fn() {\n                        if (_this5.props.conversation) {\n                            _this5.props.conversation.destroy();\n                            _this5.props.conversation = null;\n                        }\n                        if (_this5.props.contactDetail) {\n                            _this5.props.contactDetail.destroy();\n                            _this5.props.contactDetail = null;\n                        }\n                        _this5.props.dom.container.style.transform = 'translateX(' + (0 - index * 250) + 'px)';\n                        _this5.props.dom.container.removeEventListener('transitionend', h);\n                        _this5.props.dom.container.addEventListener('transitionend', h);\n                        source.mount(target);\n                        var h = function h(e) {\n                            _this5.props.panels.filter(function (p, idx) {\n                                return idx !== index;\n                            }).forEach(function (p) {\n                                return p.unmount();\n                            });\n                            _this5.removeEventListener('transitionend', h);\n                        };\n                    }\n                };\n            }\n        },\n        init: {\n            after: function after() {\n                this.props.cachedMessageHours = 7 * 24;\n            }\n        },\n        mount: {\n            after: function after() {\n                var _this6 = this;\n\n                this.createWidgets();\n                this.getService().loginService.checkLoginStatus().then(function (isLoggedIn) {\n                    if (isLoggedIn) {\n                        _this6.loadData();\n                        _this6.props.toolbar.mount('#toolbar');\n                    } else {\n                        _this6.props.authPanel.mount('#auth-panel');\n                    }\n                }).catch(function (err) {\n                    return console.error(err);\n                });\n                // this.props.authPanel.mount('#auth-panel');\n            }\n        }\n    };\n});\n//# sourceURL=rc-phone.html","template":"<div>\n    <div id='phone' class='rc-phone'>\n        <div id=\"auth-panel\"></div>\n        <div id=\"toolbar\"></div>\n        <div class='container' data-info='container'>\n            <div class='panel float-left' id=\"dial-pad\"></div>\n            <div class='panel float-left' id=\"messages-panel\"></div>\n            <div class='panel float-left' id=\"contacts\"></div>\n            <div class='panel float-left' id=\"call-log\"></div>\n            <div class='panel float-left' id=\"conference\"></div>\n        </div>\n        <div class='panel --extra' id=\"call-panel\"></div>\n        <div class='panel --extra' id=\"call-panel-incoming\"></div>\n        <div class='panel --extra' id=\"conversation\"></div>\n        <div class='panel --extra' id=\"contact-detail\"></div>\n        <div class='panel --extra' id=\"notification\"></div>\n    </div>\n</div>","style":"\n    .rc-phone {\n        position: relative;\n        width: 250px;\n        height: 100%;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n        overflow: hidden;\n        margin: 0 auto;\n    }\n\n    .rc-phone .container {\n        width: 3000px;\n        -webkit-transition: -webkit-transform .1s ease-out;\n        transition: -webkit-transform .1s ease-out;\n        transition: transform .1s ease-out;\n        transition: transform .1s ease-out, -webkit-transform .1s ease-out;\n    }\n    .rc-phone .panel {\n        width: 250px;\n        min-height: 1px;\n    }\n    .rc-phone .panel.--extra {\n        position: absolute;\n        left: 0;\n    }\n","imports":{"scripts":[],"styles":[]}};
__w_widgets['time-line-item'] = {"script":"'use strict';\n\nw.register(function () {\n    this.actions = {\n        init: {\n            after: function after() {\n                this.props.selectedMessage = null;\n                this.props.content = null;\n                this.props.contact = null;\n                this.props.time = null;\n                this.props.subject = null;\n                this.props.count = 0;\n                this.fillData(this.data);\n            }\n        },\n        fillData: {\n            before: function before() {\n                this.props.root.style['background-color'] = '#eee';\n            },\n            method: function method(finish, data) {\n                var _this = this;\n\n                this.props.content = data;\n                var time = new Date(data.time);\n                if (data.type === 'SMS') this.props.dom.icon.classList.add('icon-uni2487');else if (data.type === 'Voice') this.props.dom.icon.classList.add('icon-uniAE');else if (data.type === 'Pager') this.props.dom.icon.classList.add('icon-uniCB');\n                this.props.dom.subject.textContent = this.props.subject = data.subject;\n                data.contact && (this.props.dom.contact.textContent = this.props.contact = data.contact.displayName);\n                this.props.dom.time.textContent = this.props.time = '\\n                ' + (time.getMonth() + 1) + '/' + time.getDate() + ', \\n                ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '\\n                ';\n\n                if (data.others && data.others.length > 0) {\n                    this.props.dom['count-wrapper'].classList.remove('display-none');\n                    this.props.dom.count.textContent = this.props.count = data.others.length;\n                    var currentDate;\n\n                    while (this.props.dom.collapse.firstChild) {\n                        this.props.dom.collapse.removeChild(this.props.dom.collapse.firstChild);\n                    }data.others.forEach(function (content) {\n                        var time = new Date(content.time);\n                        var div = document.createElement('div');\n                        var month = time.getMonth() + 1;\n                        var date = time.getDate();\n                        var calender = date > currentDate ? month + '/' + date + ',' : '';\n                        div.innerHTML = '<div class=\\'timeline-extra clearfix\\'>\\n                            <div class=\\'timeline-extra__content\\'>' + content.subject + '</div>\\n                            <div class=\\'rc-timeline-item__time\\'>\\n                                ' + calender + ' \\n                                ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '\\n                            </div>\\n                        </div>';\n                        div.firstChild.addEventListener('click', function (event) {\n                            event.stopPropagation();\n                            _this.enter(null, content); // null for event\n                        });\n                        currentDate = date;\n                        _this.props.dom.collapse.appendChild(div.firstChild);\n                    });\n                }\n            },\n            after: function after(data) {\n                var _this2 = this;\n\n                setTimeout(function () {\n                    return _this2.props.root.style['background-color'] = '#fff';\n                }, 1000);\n            }\n        },\n        mount: {\n            after: function after() {}\n        },\n        collapse: {\n            after: function after(event) {\n                event.stopPropagation();\n\n                // FIXME: double clicks will cause problems\n                var element = this.props.dom.collapse;\n                if (element.classList.contains('--collapsing')) return;\n                if (!element.classList.contains('--active')) {\n                    var prevWidth = element.style.height;\n                    element.style.height = 'auto';\n                    var endWidth = getComputedStyle(element).height;\n                    element.style.height = prevWidth;\n                    element.offsetWidth; // force repaint\n                    element.style.height = endWidth;\n                    element.classList.add('--collapsing');\n                    element.addEventListener('transitionend', function transitionEnd(event) {\n                        if (event.propertyName == 'height') {\n                            element.style.transition = '';\n                            element.style.height = 'auto';\n                            element.classList.remove('--collapsing');\n                            element.removeEventListener('transitionend', transitionEnd, false);\n                        }\n                    }, false);\n                    element.classList.add('--active');\n                } else {\n                    element.style.height = getComputedStyle(element).height;\n                    element.offsetWidth; // force repaint\n                    element.style.height = '0px';\n                    element.classList.remove('--active');\n                    element.classList.add('--collapsing');\n                    element.addEventListener('transitionend', function transitionEnd(event) {\n                        if (event.propertyName == 'height') {\n                            element.classList.remove('--collapsing');\n                            element.removeEventListener('transitionend', transitionEnd, false);\n                        }\n                    }, false);\n                }\n            }\n        },\n        enter: {\n            method: function method(finish, event, message) {\n                message && (this.props.selectedMessage = message);\n            }\n        }\n    };\n});\n//# sourceURL=time-line-item.html","template":"\n    <div class='rc-panel rc-timeline-item' data-event='click:enter'>\n        <div class='rc-timeline-item__content'>\n        <div class='rc-timeline-item__line'>\n            <span class='rc-timeline-item__icon' data-info='icon'></span>\n            <span class='rc-timeline-item__contact' data-info='contact'></span>\n        </div>\n            <div class='rc-timeline-item__time' data-info='time'></div>\n            <div class='rc-timeline-item__subject' data-info='subject'></div>\n        </div>\n        <div    class='rc-timeline-item__count display-none' \n                data-info='count-wrapper'\n                data-event='click:collapse'>\n            <span class='__number' data-info='count'></span>\n            <span class='icon-uni2466'></span>\n        </div>\n        <div data-info='collapse' class='rc-timeline-item__collapse'>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['time-line'] = {"script":"'use strict';\n\nw.register(function () {\n    var syncedMessages = [];\n\n    this.data = {};\n    this.actions = {\n        init: {\n            after: function after() {\n                this.props.mounted = false;\n                this.props.latestMessage = null;\n            }\n        },\n        mount: {\n            after: function after() {\n                if (!this.props.mounted) {\n                    this.fetchData();\n                    this.props.mounted = true;\n                }\n            }\n        },\n        fetchData: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(contents) {\n                var _this = this;\n\n                this.props.latestMessage = contents[0];\n                this.props.dom.loading.classList.add('display-none');\n                contents.forEach(function (content) {\n                    return _this.addLine(content);\n                });\n            }\n        },\n        updateTimeline: {\n            after: function after(contents) {\n                var _this2 = this;\n\n                // FIXME: The action of combining messages should be in service\n                contents\n                // Avoid duplicated notifications\n                .filter(function (content) {\n                    return syncedMessages.indexOf(content.id) === -1;\n                }).forEach(function (content) {\n                    if (_this2.props.latestMessage && _this2.props.latestMessage.type === content.type && _this2.props.latestMessage.contact.id === content.contact.id) {\n\n                        _this2.props.latestMessage.others = _this2.props.latestMessage.others || [];\n                        content.others = content.others || [];\n                        content.others.push(_this2.props.latestMessage);\n                        content.others = content.others.concat(_this2.props.latestMessage.others);\n                        _this2.props.latestMessage.widget.unmount();\n                    }\n                    _this2.addLine(content, true);\n                    _this2.props.latestMessage = content;\n                    syncedMessages.push(content.id);\n                });\n            }\n        },\n        addLine: {\n            after: function after(content, prepend) {\n                var parent = this;\n                var item = w('time-line-item', {\n                    data: content,\n                    actions: {\n                        enter: {\n                            after: function after() {\n                                parent.props.selectedContent = this.props.selectedMessage || this.props.content;\n                                parent.enterItem();\n                            }\n                        }\n                    }\n                });\n                content.widget = item;\n                item.mount(this.props.dom.timeline, prepend);\n            }\n        },\n        search: {\n            method: function method(finish) {\n                return finish();\n            }\n        },\n        focusSearchBox: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        },\n        blurSearchBox: {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        },\n        switchContent: {\n            method: function method() {},\n            after: function after() {}\n        },\n        enterItem: {\n            method: function method() {},\n            after: function after() {}\n        }\n    };\n});\n//# sourceURL=time-line.html","template":"\n    <div class='rc-panel rc-timeline'>\n        <div class='rc-panel__header --flat'>\n            <div class='rc-contacts__searchBox'>\n                <input \n                    class='__input' \n                    type='text' \n                    data-info='searchText' \n                    data-event='input:search|focus:focusSearchBox|blur:blurSearchBox'\n                >\n            </div>\n        </div>\n        <div class='rc-panel__content' data-info='content'>\n            <div class='rc-timeline__loading' data-info='loading'>Loading ...</div>\n            <div class='rc-timeline__list' data-info='timeline'>\n                <!-- timeline-item -->\n            </div>\n            <div class='rc-timeline__mask display-none' data-info='mask'></div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]}};
__w_widgets['tool-bar'] = {"script":"'use strict';\n\nw.register(function () {\n    var slideDown = w.transition('slide-down');\n    this.actions = Object.assign(w.action('interaction'), {\n        init: {\n            method: function method() {\n                this.state = [];\n                this.itemCount = 0;\n            }\n        },\n        mount: {\n            after: function after() {\n                var _this = this;\n\n                slideDown.init(this.props.dom.menu);\n                window.addEventListener('click', function (e) {\n                    _this.hideMenu();\n                }, false);\n                this.props.root.addEventListener('click', function (e) {\n                    e.stopPropagation();\n                });\n            }\n        },\n        adjustMenuButton: {\n            after: function after() {\n                Array.from(this.props.dom['toolbar'].childNodes).forEach(function (node) {\n                    if (node.nodeType === 3) node.parentNode.removeChild(node);\n                });\n                var mid = Math.floor((Array.from(this.props.dom['toolbar'].childNodes).length - 1) / 2) + 1;\n                var target = this.props.dom['toolbar'].childNodes[mid];\n                target.parentNode.insertBefore(this.props.dom['menu-button'], target);\n            }\n        },\n        addItem: {\n            method: function method() {},\n            after: function after(icon, text, direction) {\n                // use innerHTML here, because content could be image or something else.\n                var div = document.createElement('div');\n                var item;\n                if (this.itemCount > 3) {\n                    var template = '<div class=\\'rc-toolbar__more-item text-center\\'>\\n                                        <button class=\\'rc-button --circle\\'>\\n                                            ' + icon + '\\n                                        </button>\\n                                        <div>' + text + '</div>\\n                                    </div>';\n\n                    div.innerHTML = template;\n                    item = div.childNodes[0];\n                    this.props.dom['menu'].appendChild(item);\n                } else {\n                    var template = '<button class=\\'rc-toolbar__item rc-button --ghost rc-icon-switch\\'>\\n                                        ' + icon + '\\n                                    </button>';\n                    div.innerHTML = template;\n                    item = div.childNodes[0];\n                    this.props.dom['toolbar'].appendChild(item);\n                }\n                this.adjustMenuButton();\n                ++this.itemCount;\n                return item;\n            }\n        },\n        clickItem: {\n            method: function method(finish, item, event) {\n                var _this2 = this;\n\n                if (typeof item === 'number') {} else {\n                    item.addEventListener('click', function () {\n                        event.call(_this2);\n                        _this2.hideMenu();\n                        _this2.state.push(event);\n                    });\n                }\n            }\n        },\n        pop: {\n            method: function method() {\n                console.log(this.state);\n                if (this.state.length > 1) {\n                    this.state.pop(); // current state, no need to call again\n                    this.state[this.state.length - 1].call(this);\n                }\n            }\n        },\n        toggleMenu: {\n            after: function after() {\n                slideDown.toggle(this.props.dom.menu);\n            }\n        },\n        hideMenu: {\n            after: function after() {\n                slideDown.out(this.props.dom.menu);\n            }\n        }\n    });\n});","template":"<div class='rc-toolbar'>\n    <div class='rc-toolbar__bar text-center' data-info='toolbar'>\n        <button \n            class='rc-button rc-toolbar__menu-button' \n            data-info='menu-button'\n            data-event='click:toggleMenu'>\n            <span class='icon-ActionButtons_down'></span>\n        </button>\n    </div>\n    <div class='rc-toolbar__panel' data-info='menu'>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]}};
