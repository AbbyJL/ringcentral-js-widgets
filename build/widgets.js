__w_widgets = {};__w_widgets['auth-panel'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n\n        this.props = {\n            country: 'United States',\n            username: null,\n            extension: null,\n            password: null\n        };\n        this.actions = {\n            init: {\n                before: function before() {},\n                method: function method(finish) {\n                    finish();\n                },\n                after: function after() {\n                    var t = w.t(this.data.lang);\n                    var _data = this.data;\n                    var color = _data.color;\n                    var lang = _data.lang;\n                    var logo = _data.logo;\n\n                    this.dom['login-button'].style['background-color'] = color || '#fff';\n                    this.dom.logo.src = logo || './ringcentral_logo.png';\n                    this.dom['login-button'].textContent = t('login') || 'login';\n                }\n            },\n            mount: {\n                before: function before() {},\n                after: function after() {\n                    this.dom.username.value = localStorage.getItem('username');\n                    this.dom.extension.value = localStorage.getItem('extension');\n                    this.dom.password.value = localStorage.getItem('password');\n                    fade.in(this.root);\n                }\n            },\n            login: {\n                before: function before() {\n                    this.dom['login-button'].disabled = true;\n                    this.dom.error.textContent = '';\n                    this.dom['login-button'].classList.add('rc-button-loading');\n                },\n                method: function method(finish) {\n                    this.props.username = this.dom.username.value;\n                    this.props.extension = this.dom.extension.value;\n                    this.props.password = this.dom.password.value;\n                    return finish();\n                },\n                after: function after() {\n                    // this.dom['login-button'].disabled = false;\n                    if (this.dom.remember.checked) {\n                        localStorage.setItem('username', this.dom.username.value || '');\n                        localStorage.setItem('extension', this.dom.extension.value || '');\n                        localStorage.setItem('password', this.dom.password.value || '');\n                    }\n                },\n                error: function error(err) {\n                    console.error(err);\n                    this.dom.error.textContent = err.message;\n                    this.dom['login-button'].disabled = false;\n                }\n            },\n            showCountry: {\n                before: function before(event) {\n                    this.dom['country-list'].classList.toggle('display-none');\n                }\n            },\n            switchCountry: {\n                before: function before(event) {\n                    var target = event.target || event;\n                    this.dom['country-dropdown'].textContent = target.textContent;\n                    this.dom['country-list'].classList.add('display-none');\n                    this.props.country = target.textContent;\n                }\n            },\n            // this.actions.focus = {\n            //     before: function(event) {\n            //         var target = event.target || event\n            //         target.classList.add('--focus')\n            //     }\n            // }\n            // this.actions.blur = {\n            //     before: function(event) {\n            //         var target = event.target || event\n            //         target.classList.remove('--focus')\n            //     }\n            // },\n            click: {\n                method: function method(finish, event) {\n                    if (event.target === this.dom['login-button']) this.login();\n                }\n            }\n        };\n    });\n\n    //# sourceURL=auth-panel.html\n\n}());","template":"\n    <div class='rc-panel rc-auth-panel'>\n        <div class='rc-panel__header rc-auth-panel__header rc-auth-panel__header--color'>\n            <img    class='rc-img rc-auth-panel__img'\n                    src='./ringcentral_logo.png'\n                    data-info='logo'>\n        </div>\n        <div class='rc-panel__content rc-auth-panel__content rc-auth-panel__content--color'>\n            <div class='input-panel' data-info='input-panel'>\n              <div \n                data-info='country-selector'\n                class='input-panel__flag'>\n                  <img class='rc-img' data-info='flag' src=''>\n              </div>\n              <input \n                  class='rc-input --clean input-panel__phone' \n                  data-info='username' \n                  placeholder='username'>\n              </input>\n            </div>\n            <input \n                class='rc-input --round' \n                data-info='extension'\n                placeholder=\"extension\"\n                ></input>\n            <input \n                class='rc-input --round' \n                data-info='password'\n                placeholder=\"password\"\n                 type='password'></input>\n            <button \n                class='rc-button --round rc-auth-panel__button rc-auth-panel__button--color' \n                data-info='login-button'>Login\n            </button>\n            <div class='rc-label'>\n                <label for='remember'>Remember me:</label>\n                <input id='remember' type='checkbox' data-info='remember' checked>\n            </div>\n            <div class='rc-label' data-info='error'></div>\n        </div>\n        <!-- <div class='rc-panel__footer' data-info='footer'></div> -->\n        </div>\n    </div>\n","style":"/* rc-input.--round, rc-button.--round */\n/* rc-panel */\n.rc-auth-panel .input-panel {\n    border-radius: 3px;\n    border: 1px solid #bdc3c7;\n}\n.rc-auth-panel .input-panel > .rc-input {}\n.rc-auth-panel .input-panel__flag {\n    float: left;\n    width: 40px;\n    /* For test, the position is for country flag */\n    height: 30px;\n    background: #000;\n}\n.rc-auth-panel .input-panel__phone {\n    float: left;\n    width: calc(100% - 40px);\n}\n.rc-auth-panel .input-panel.--focus {\n    border-color: #7f8c8d;\n}\n.rc-auth-panel__content {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -webkit-flex-direction: column;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    padding: 10px;\n}\n.rc-auth-panel__content > .rc-input {\n    margin: 5px 0;\n}\n.rc-auth-panel__content > .rc-button {\n    width: 100%;\n    /* Move to the bottom of flex container */\n    margin-top: auto;\n}\n.rc-auth-panel__container {\n    /* used as a positioned reference */\n    position: relative;\n}\n.rc-auth-panel__header {\n    text-align: center;\n}\n.rc-auth-panel__img {\n    width: 60%;\n}\n\n","imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['auto-complete'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = {\n            init: {\n                before: function before() {},\n                after: function after() {}\n            },\n            mount: {\n                before: function before() {},\n                method: function method(finish) {\n                    finish();\n                },\n                after: function after() {\n                    var _this = this;\n\n                    window.addEventListener('click', function (e) {\n                        if (e.target !== _this.dom.input && !e.target.classList.contains('candidate')) {\n                            _this.hide();\n                        }\n                    });\n                }\n            },\n            hide: {\n                after: function after() {\n                    this.dom.candidates.classList.add('display-none');\n                    if (this.showingTimeout) {\n                        window.clearTimeout(this.showingTimeout);\n                        this.showingTimeout = null;\n                    }\n                }\n            },\n            show: {\n                after: function after() {\n                    var _this2 = this;\n\n                    if (this.showingTimeout) return;\n                    this.showingTimeout = window.setTimeout(function () {\n                        if (_this2.dom.input === document.activeElement) _this2.dom.candidates.classList.remove('display-none');\n                    }, 300);\n                }\n            },\n            appendInput: {\n                before: function before(value) {\n                    this.dom.input.value += value;\n                    this.dom.input.focus();\n                }\n            },\n            autoComplete: {\n                before: function before() {},\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(candidates) {\n                    var _this3 = this;\n\n                    if (!candidates) return;\n                    while (this.dom.candidates.firstChild) {\n                        this.dom.candidates.removeChild(this.dom.candidates.firstChild);\n                    }if (candidates.length > 0) this.show();else this.hide();\n                    candidates.forEach(function (candidate) {\n                        var template = _this3.dom['candidate-template'].cloneNode(true);\n                        template.addEventListener('click', function (e) {\n                            _this3.dom.input.value = template.textContent;\n                            _this3.hide();\n                        });\n                        template.textContent = candidate.from.phoneNumber;\n                        _this3.dom.candidates.appendChild(template);\n                    });\n                }\n            }\n        };\n    });\n\n}());","template":"<div class='auto-complete'>\n    <input class='rc-input' placeholder=\"To: Enter name or number\" data-info='input' data-event='input:autoComplete'></input>\n    <div data-info='candidates' class='candidates display-none'>\n        <div data-info='candidate-template' class='candidate'></div>\n    </div>\n</div>","style":"\n.auto-complete .candidates {\n    position: absolute;\n    background-color: #fff;\n    width: 228px;\n    padding: 2px 0;\n    margin-top: 1px;\n    border: 1px solid #878787;\n    color: #878787;\n}\n\n.auto-complete .candidate {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n.auto-complete .candidate:hover {\n    background-color: #3498db;\n    color: #fff;\n}\n","imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['call-log-item'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(item) {\n                this.props.item = item;\n                if (item.result === 'Missed') this.dom.callResult.classList.add('--missed');\n                if (item.direction === 'Outbound') {\n                    this.dom.time.innerHTML = item.startTime;\n                    if (item.to.name) this.dom.contact.innerHTML = item.to.name;else this.dom.contact.innerHTML = item.to.phoneNumber;\n                    if (item.to.location) this.dom.location.innerHTML = item.to.location;\n                    if (item.result !== 'Missed') this.dom.callResult.classList.add('--outbound');\n                } else {\n                    this.dom.time.innerHTML = item.startTime;\n                    if (item.from.name) this.dom.contact.innerHTML = item.from.name;else this.dom.contact.innerHTML = item.from.phoneNumber;\n                    if (item.result !== 'Missed') this.dom.callResult.classList.add('--inbound');\n                }\n            }\n        };\n    });\n\n}());","template":"<div class=\"rc-call-log-item\" data-info=\"entry\">\n    <i data-info=\"callResult\" class=\"rc-call-log-item__icon\"></i>\n    <span class=\"rc-call-log-item__time\" data-info=\"time\"></span>\n    <div class=\"rc-call-log-item__body\">\n        <a class=\"__contact\" data-info=\"contact\">\n            <!--Display name or number here-->\n        </a>\n        <p class=\"__location\" data-info=\"location\"></p>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['call-log'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        function createWidgetItems(logItems, parent) {\n            if (!logItems) return;\n            logItems.forEach(function (item) {\n                var widget = w('call-log-item', {\n                    actions: {\n                        init: {\n                            method: function method() {\n                                return item;\n                            }\n                        }\n                    }\n                });\n                widget.mount(parent.dom.logs);\n                parent.props.widgetItems.push(widget);\n            });\n        }\n\n        function filterWidgetItems(widgetItems, filter) {\n            widgetItems.forEach(function (widget) {\n                if (filter(widget)) {\n                    widget.show();\n                } else {\n                    widget.hide();\n                }\n            });\n        }\n\n        function enableTab(toEnableTab, toDisableTab) {\n            if (toEnableTab.classList.contains('--active') === false) {\n                toEnableTab.classList.add('--active');\n                toDisableTab.classList.remove('--active');\n            }\n        }\n        this.actions = Object.assign(w.action('interaction'), {\n            init: {\n                before: function before() {\n                    this.props.widgetItems = [];\n                },\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(items) {\n                    this.props.logItems = items;\n                    this.refreshCallLogs();\n                }\n            },\n            mount: {\n                after: function after() {\n                    this.refreshCallLogs();\n                }\n            },\n            refreshCallLogs: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    // We already have widgets in view\n                    if (this.props.widgetItems.length > 0) return;\n                    createWidgetItems(this.props.logItems, this);\n                }\n            },\n            enableAllCallTab: {\n                after: function after() {\n                    enableTab(this.dom.allCallTab, this.dom.missedCallTab);\n                    filterWidgetItems(this.props.widgetItems, function () {\n                        return true;\n                    });\n                }\n            },\n            enableMissedCallTab: {\n                after: function after() {\n                    enableTab(this.dom.missedCallTab, this.dom.allCallTab);\n                    filterWidgetItems(this.props.widgetItems, function (widget) {\n                        if (widget.props.item.result === 'Missed') {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    });\n                }\n            }\n        });\n    });\n\n}());","template":"<div class=\"rc-panel\">\n    <div class='rc-panel__header'>\n        <div class=\"rc-tabs\">\n            <a \n                class=\"rc-tabs__tab --active --color --width2\" \n                data-info=\"allCallTab\" \n                data-event=\"click:enableAllCallTab\">\n                All\n            </a>\n            <a \n                class=\"rc-tabs__tab --color --width2\" \n                data-info=\"missedCallTab\" \n                data-event=\"click:enableMissedCallTab\">\n                Missed\n            </a>\n        </div>\n    </div>\n    <div class=\"rc-panel__content rc-call-log__content\" data-info=\"logs\">\n        <call-log-item dynamic></call-log-item>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['call-panel-incoming'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var circle = w.transition('circle');\n        var fade = w.transition('fade');\n        this.actions = {\n            init: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            mount: {\n                after: function after() {\n                    fade.init(this.root);\n                    fade.in(this.root);\n                }\n            },\n            called: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            ignore: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    this.unmount();\n                }\n            }\n        };\n    });\n\n}());","template":"<div class='rc-panel rc-call-panel'>\n    <div class='rc-panel__header --colored --center'>\n        <h2>Incoming Call</h2>\n        <h1>Howard Zhang</h1>\n    </div>\n    <div class='rc-panel__content'>\n        <div class='rc-call-panel__center'>\n            <img class='rc-img' src=''>\n        </div>\n        <div class='rc-call-panel__footer'>\n            <button class='rc-button rc-call-panel__reply'>Reply with Messages</button>\n            <div class='action-panel text-center'>\n                <button class='rc-button --positive --round action-panel__action'>Accept</button>\n                <button class='rc-button --negative --round action-panel__action'>Ignore</button>\n            </div>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['call-panel'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n        this.actions = {\n            init: {},\n            mount: {\n                after: function after() {\n                    fade.init(this.root);\n                    fade.in(this.root);\n                }\n            },\n            callStarted: {},\n            callRejected: {\n                after: function after() {\n                    this.unmount();\n                }\n            },\n            callEnded: {\n                after: function after() {\n                    this.unmount();\n                }\n            },\n            callFailed: {\n                after: function after() {\n                    this.unmount();\n                }\n            },\n            hangup: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    this.unmount();\n                }\n            }\n        };\n    });\n\n}());","template":"\n    <div class='rc-panel rc-call-panel'>\n        <section class='rc-panel__header --colored --center'>\n            <div class='text-right'>\n                Time 00:07\n            </div>\n            <div>\n                <h1>Howard Zhang</h1>\n                <h4>From <span>(650)555-1234</span></h4>\n            </div>\n        </section>\n        <section class='rc-panel__content'>\n            <div class='rc-call-panel__center control-panel'>\n                <h4 class='control-panel__title'>\n                    You're on a VoIP call. If your WiFi signal gets weak, switch the call to carrier service.\n                </h4>\n                <div class='control-panel__line'>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni28\"></span>\n                            <span class=\"icon-uni35\"></span>\n                        </button>\n                        <div class='text-center'>Hold</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni21\"></span>\n                            <span class=\"icon-uni2D\"></span>\n                        </button>\n                        <div class='text-center'>Keypad</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni24\"></span>\n                            <span class=\"icon-uni30\"></span>\n                        </button>\n                        <div class='text-center'>Record</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni26\"></span>\n                            <span class=\"icon-uni33\"></span>\n                        </button>\n                        <div class='text-center'>Audio</div>\n                    </div>\n                </div>\n                <div class='control-panel__line'>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni27\"></span>\n                            <span class=\"icon-uni34\"></span>\n                        </button>\n                        <div class='text-center'>Flip</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni23\"></span>\n                            <span class=\"icon-uni2F\"></span>\n                        </button>\n                        <div class='text-center'>Transfer</div>\n                    </div>\n                    <div class='control-panel__item'>\n                        <button class='rc-button --circle --ghost --dense rc-icon-switch control-panel__button'>\n                            <span class=\"icon-uni22\"></span>\n                            <span class=\"icon-uni2E\"></span>\n                        </button>\n                        <div class='text-center'>Park</div>\n                    </div>\n                </div>\n            </div>\n            <div class='rc-call-panel__footer'>\n                <div class='action-panel'>\n                    <button class='rc-button --round action-panel__action'>\n                        <span class='icon-uniCE'></span>\n                    </button>\n                    <button class='rc-button --negative --round action-panel__action' data-event='click:hangup'>\n                        <span class='icon-uni44'></span>\n                    </button>\n                </div>\n            </div>\n        </section>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['compose-text'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            after: function after() {\n                var composeText = this;\n                w.customize(this, 'contact-picker', {\n                    actions: {\n                        autoComplete: {\n                            method: function method() {\n                                return composeText.queryContacts(this.props.inputValue);\n                            }\n                        }\n                    }\n                });\n                w.customize(this, 'dropdown', {\n                    actions: {\n                        getData: {\n                            method: function method() {\n                                return composeText.getOutboundCallerID();\n                            },\n                            after: function after(ids) {\n                                var _this = this;\n\n                                ids.forEach(function (id) {\n                                    return _this.addItem(id);\n                                });\n                            }\n                        },\n                        switchTitle: {\n                            method: function method(text) {\n                                composeText.props.fromNumber = text;\n                            }\n                        }\n                    }\n                });\n            }\n        };\n        this.actions.mount = {\n            after: function after() {\n                this.props['dropdown'].getData();\n            }\n        };\n        this.actions.send = {\n            method: function method(finish) {\n                this.props.text = this.dom['text'].value;\n                this.props.fromNumber = this.props['dropdown'].getSelected();\n                this.props.toNumber = this.props['contact-picker'].getInput();\n                return finish();\n            },\n            after: function after(response) {\n                if (response.json().messageStatus === 'Sent') this.sent();\n            }\n        };\n        this.actions.sent = {\n            after: function after() {\n                this.dom['send'].textContent = 'Success!';\n                this.dom['text'].value = '';\n            }\n        };\n        this.actions.readyToSend = {\n            after: function after() {\n                this.dom['send'].textContent = 'Send';\n            }\n        };\n        this.actions.getOutboundCallerID = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n        this.actions.queryContacts = {\n            method: function method(finish, queryText) {\n                this.props.to = queryText;\n                return finish();\n            }\n        };\n    });\n\n}());","template":"<div class='rc-panel rc-compose-text'>\n    <div class='rc-panel__header --colored'>\n        <h5 class='text-center'>\n            Compose text\n        </h5>\n        <contact-picker data-info='contact-picker'></contact-picker>\n        <dropdown data-info='dropdown'></dropdown>\n    </div>\n    <div class='rc-panel__content'>\n        <textarea \n            class='rc-textarea rc-compose-text__textarea' \n            placeholder=\"Type any text...\" \n            data-info='text' \n            data-event='focus:readyToSend'></textarea>\n        <button \n            class='rc-button --circle --positive rc-compose-text__send' \n            data-info='send' \n            data-event='click:send'>\n            <span class='icon-uniB1'></span>\n        </button>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['conference'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = {\n            init: {\n                method: function method() {\n                    this.getConferenceInfo();\n                },\n                after: function after() {\n                    var t = w.t(this.data.lang);\n                    this.dom.dialInNumberLabel.textContent = t('conference-dialinnumber-text');\n                    this.dom.hostCodeLabel.textContent = t('conference-hostcode-text');\n                    this.dom.participantCodeLabel.textContent = t('conference-participantcode-text');\n                    this.dom.inviteWithTextButton.textContent = t('conference-invitewithtext-text');\n                    this.dom.joinAsHostButton.textContent = t('conference-joinashost-text');\n                }\n            },\n            getConferenceInfo: {\n                method: function method(finish) {\n                    var _this = this;\n\n                    return Promise.resolve(finish()).then(function (conferenceInfo) {\n                        _this.props.inviteMessage = 'Test';\n                        _this.props.dialInNumber = conferenceInfo.phoneNumber;\n                        return conferenceInfo;\n                    });\n                },\n                after: function after(conferenceInfo) {\n                    this.dom.dialInNumber.textContent = conferenceInfo.phoneNumber;\n                    this.dom.hostCode.textContent = conferenceInfo.hostCode;\n                    this.dom.participantCode.textContent = conferenceInfo.participantCode;\n                    this.enable();\n                }\n            },\n            inviteWithText: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            joinAsHost: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            enable: {\n                method: function method() {\n                    this.dom.inviteWithTextButton.disabled = false;\n                    this.dom.joinAsHostButton.disabled = false;\n                }\n            }\n        };\n    });\n\n}());","template":"<div class=\"rc-panel rc-conference --color\">\n    <div class='rc-panel__header'></div>\n    <div class=\"rc-panel__content rc-conference__content\">\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"dialInNumberLabel\"></label>\n            <div class=\"__value --right\" data-info=\"dialInNumber\">\n            </div>\n        </div>\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"hostCodeLabel\"></label>\n            <div class=\"__value --right\" data-info=\"hostCode\">\n            </div>\n        </div>\n        <div class=\"rc-conference__line\">\n            <label class=\"__label --color\" data-info=\"participantCodeLabel\"></label>\n            <div class=\"__value --right\" data-info=\"participantCode\">\n            </div>\n        </div>\n        <div class=\"rc-conference__buttons\">\n            <button \n                class=\"rc-button --clean --round __button\" \n                data-info=\"inviteWithTextButton\" \n                data-event=\"click:inviteWithText\"\n                disabled>\n            </button>\n            <button \n                class=\"rc-button --positive --round __button\" \n                data-info=\"joinAsHostButton\" \n                data-event=\"click:joinAsHost\"\n                disabled>\n            </button>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['contact-detail'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n\n        function createEmailElements(parent, contact) {\n            contact.emails.forEach(function (email) {\n                var htmlString = '<div class=\\'rc-contact-detail__section-line\\'>\\n                                <label class=\"__label\">Email</label>\\n                                <div class=\"__value\">\\n                                    ' + email + '\\n                                </div>\\n                            </div>';\n                var div = document.createElement('div');\n                div.innerHTML = htmlString;\n                parent.appendChild(div);\n            });\n        }\n\n        function createPhoneNumberElements(parent, contact) {\n            var htmlString = '<div class=\"rc-contact-detail__section-line\">\\n                            <label class=\"__label\">Extension</label>\\n                            <div class=\"__value\">' + contact.extension + '</div>\\n                        </div>';\n            var div = document.createElement('div');\n            div.innerHTML = htmlString;\n            parent.appendChild(div);\n            contact.phoneNumbers.forEach(function (number) {\n                htmlString = '<div class=\"rc-contact-detail__section-line\">\\n                            <label class=\"__label\">Direct Number</label>\\n                            <div class=\"__value\">' + number + '</div>\\n                        </div>';\n                div = document.createElement('div');\n                div.innerHTML = htmlString;\n                parent.appendChild(div);\n            });\n        }\n\n        this.actions = {\n            init: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(contact) {\n                    if (contact) {\n                        this.dom.displayName.textContent = contact.displayName;\n                        createEmailElements(this.dom.emails, contact);\n                        createPhoneNumberElements(this.dom.phoneNumbers, contact);\n                    }\n                    fade.init(this.root);\n                    fade.in(this.root);\n                }\n            }\n        };\n    });\n    //# sourceURL=contact-detail.html\n\n}());","template":"<div class=\"rc-contact-detail\">\n    <div class=\"rc-panel__header rc-contact-detail__info\">\n        <div class=\"rc-avatar --small __avatar\"></div>\n        <div class=\"__name\" data-info='displayName'>\n        </div>\n    </div>\n    <div class=\"rc-panel__content\">\n        <section class=\"rc-contact-detail__section\" data-info='emails'>\n            <!--<div class=\"rc-contact-detail__section-line\">\n                <label class=\"__label\">Email</label>\n                <div class=\"__value\">\n                    colin.liu@ringcentral.com\n                </div>\n            </div>-->\n        </section>\n        <section class=\"rc-contact-detail__section\" data-info='phoneNumbers'>\n        </section>\n    </div>    \n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['contact-item'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            before: function before() {\n                this.props.contact = null;\n            },\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(contact) {\n                this.props.contact = contact;\n                this.dom.name.textContent = contact.name;\n            }\n        };\n        this.actions.select = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n    });\n    //# sourceURL=contact-item.html\n\n}());","template":"\n    <div class=\"rc-contact-item\" data-event=\"click:select\">\n        <a class=\"rc-contact-item__body\">\n            <span class=\"__contact\" data-info=\"name\"></span>\n        </a>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['contact-picker-item'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = {\n            init: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(contact) {\n                    this.props.contact = contact;\n                    this.dom.name.textContent = contact.name;\n                    this.dom.value.textContent = contact.value;\n                }\n            },\n            select: {\n                method: function method(finish) {\n                    return finish();\n                }\n            }\n        };\n    });\n    //# sourceURL=contact-picker-item.html\n\n}());","template":"<div class='rc-contact rc-list__item' data-event='click:select'>\n    <div class='rc-contact__name' data-info='name'></div>\n    <div class='rc-contact__value' data-info='value'></div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['contact-picker'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var enlarge = w.transition('enlarge');\n        this.props = {\n            limit: 10,\n            show: false,\n            whiteList: null\n        };\n        this.actions = {\n            init: {\n                method: function method(finish) {\n                    this.data.whiteList && (this.props.whiteList = this.data.whiteList);\n                    return finish();\n                }\n            },\n            mount: {\n                method: function method(finish) {\n                    finish();\n                },\n                after: function after() {\n                    var _this = this;\n\n                    enlarge.init(this.dom.contacts);\n                    document.addEventListener('click', function (e) {\n                        var currentNode = e.target;\n                        while (currentNode.parentNode) {\n                            currentNode = currentNode.parentNode;\n                            if (currentNode.isEqualNode(_this.root) || _this.props.whiteList && currentNode.isEqualNode(_this.props.whiteList)) return;\n                        }\n                        _this.hide();\n                    });\n                    if (this.data.contact) this.dom.input.value = this.data.contact;\n                }\n            },\n            hide: {\n                after: function after() {\n                    var _this2 = this;\n\n                    if (this.props.show) {\n                        // delay the hidden process, make options clickable, then hide the panel\n                        setTimeout(function () {\n                            _this2.props.show = false;\n                            enlarge.out(_this2.dom.contacts);\n                        }, 50);\n                    }\n                }\n            },\n            show: {\n                after: function after() {\n                    if (!this.props.show) {\n                        this.props.show = true;\n                        enlarge.in(this.dom.contacts);\n                    }\n                }\n            },\n            getInput: {\n                method: function method() {\n                    return this.dom.input.value;\n                }\n            },\n            appendInput: {\n                before: function before(value) {\n                    this.dom.input.value += value;\n                    this.dom.input.focus();\n                }\n            },\n            setInput: {\n                before: function before(value) {\n                    this.dom.input.value = value;\n                    this.dom.input.focus();\n                }\n            },\n            disable: {\n                method: function method() {\n                    this.dom.input.readOnly = true;\n                }\n            },\n            focus: {\n                method: function method() {\n                    this.dom.input.focus();\n                }\n            },\n            autoComplete: {\n                method: function method(finish) {\n                    this.props.inputValue = this.dom.input.value;\n                    return finish();\n                },\n                after: function after(contacts) {\n                    var _this3 = this;\n\n                    if (!contacts) return;\n                    while (this.dom.contacts.firstChild) {\n                        this.dom.contacts.removeChild(this.dom.contacts.firstChild);\n                    }if (contacts.length > 0) this.show();else this.hide();\n                    var parent = this;\n                    var count = this.props.limit;\n                    contacts.forEach(function (contact) {\n                        if (--count) {\n                            w('contact-picker-item', {\n                                actions: {\n                                    init: {\n                                        method: function method() {\n                                            return contact;\n                                        }\n                                    },\n                                    select: {\n                                        method: function method() {\n                                            parent.setInput(this.props.contact.value);\n                                            parent.hide();\n                                        }\n                                    }\n                                }\n                            }).mount(_this3.dom.contacts);\n                        }\n                    });\n                }\n            }\n        };\n    });\n    //# sourceURL=contact-picker.html\n\n}());","template":"<div class='rc-contact-picker'>\n    <input  class='rc-input --clean' \n            data-info='input' \n            data-event='input:autoComplete'\n            placeholder=''>\n    </input>\n    <div class='rc-contact-picker__contacts rc-list' data-info='contacts'>\n        <contact-picker-item dynamic></contact-picker-item>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['contacts'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        function createContactWidget(parent, contact) {\n            return w('contact-item', {\n                actions: {\n                    init: {\n                        method: function method() {\n                            return contact;\n                        }\n                    },\n                    select: {\n                        method: function method() {\n                            parent.selectContact(this.props.contact);\n                        }\n                    }\n                }\n            });\n        }\n        this.data = {\n            loadingContacts: 30,\n            searchBox: true\n        };\n        this.actions = {\n            init: {\n                before: function before() {\n                    this.props.selectedContact = null;\n                    this.props.contactItemWidgets = [];\n                    this.props.currentIndex = 0;\n                },\n                after: function after() {\n                    if (typeof this.data.searchBox !== 'undefined' && !this.data.searchBox) this.dom['header'].classList.add('display-none');\n                }\n            },\n            mount: {},\n            fetchContacts: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(contacts) {\n                    var _this = this;\n\n                    // We already have widgets in view\n                    if (this.props.contactItemWidgets.length > 0) return;\n                    contacts.forEach(function (contact) {\n                        var con = createContactWidget(_this, contact);\n                        _this.props.contactItemWidgets.push(con);\n                    });\n                    this.displayContacts(this.props.currentIndex);\n                    // this.fetchRelatedContact()\n                }\n            },\n            displayContacts: {\n                method: function method(finish, beginIndex) {\n                    var _this2 = this;\n\n                    this.props.contactItemWidgets.slice(beginIndex, beginIndex + this.data.loadingContacts).forEach(function (contactWidget) {\n                        return contactWidget.mount(_this2.dom.contacts);\n                    });\n                    this.props.currentIndex = beginIndex + this.data.loadingContacts;\n                    return finish();\n                },\n                after: function after() {},\n                error: function error(_error) {\n                    console.error(_error);\n                }\n            },\n            fetchRelatedContact: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    this.pinContacts();\n                }\n            },\n            pinContacts: {\n                method: function method() {\n                    var _this3 = this;\n\n                    Object.keys(this.props.relateContacts).filter(function (id) {\n                        var matchedWidgets = _this3.props.contactItemWidgets.filter(function (widget) {\n                            // console.log(widget.props.contact.id + ',' + id);\n                            var contact = widget.props.contact.id == id;\n                            if (contact) {\n                                widget.mount(_this3.dom['pin-contacts']);\n                            }\n                            return contact;\n                        });\n                        return matchedWidgets.length === 0;\n                    }).forEach(function (id) {\n                        var unknownContact = _this3.props.relateContacts[id];\n                        // for contect-item model\n                        unknownContact.name = unknownContact.displayName;\n                        createContactWidget(_this3, unknownContact).mount(_this3.dom['pin-contacts']);\n                    });\n                    // this.props.contactItemWidgets\n                    //     .filter(widget =>\n                    //         Object.keys(this.props.relateContacts).indexOf(widget.props.contact.id + '') > -1\n                    //     )\n                    //     .forEach(relatedWidget => relatedWidget.mount(this.dom['pin-contacts']))\n                }\n            },\n            search: {\n                method: function method() {\n                    var _this4 = this;\n\n                    var searchText = this.dom.searchText.value;\n                    this.props.contactItemWidgets.forEach(function (contactWidget) {\n                        if (contactWidget.props.contact.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n                            contactWidget.mount(_this4.dom.contacts);\n                        } else {\n                            contactWidget.unmount();\n                        }\n                    });\n                }\n            },\n            selectContact: {\n                method: function method(finish, contact) {\n                    this.props.selectedContact = contact;\n                    return finish();\n                }\n            },\n            scroll: {\n                method: function method(finish, event) {\n                    if (event.target.scrollHeight - event.target.scrollTop < event.target.offsetHeight + 10) this.reachBottom();\n                }\n            },\n            reachBottom: {\n                before: function before() {},\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    // maintain the scoll position\n                    var scrollBottom = this.dom.contacts.offsetHeight;\n                    this.displayContacts(this.props.currentIndex);\n                    this.dom.container.scrollTop = this.dom.contacts.offsetHeight - scrollBottom;\n                }\n            },\n            focus: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {}\n            }\n        };\n    });\n    //# sourceURL=contacts.html\n\n}());","template":"\n    <div class='rc-panel'>\n        <div class='rc-panel__header --flat' data-info='header'>\n            <div data-info='search-box' class='rc-contacts__searchBox'>\n                <input \n                    class='__input' \n                    type='text' \n                    data-info='searchText' \n                    data-event='input:search|focus:focus'\n                >\n            </div>\n        </div>\n        <div class='rc-panel__content' data-info='container'>\n            <div class='rc-contacts__list' data-event='scroll:scroll'>\n                <div data-info='pin-contacts' class='rc-contacts__pins'>\n                </div>\n                <div data-info='contacts'>\n                    <contact-item dynamic></contact-item>\n                </div>\n            </div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['conversation-advanced'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n        this.actions = {\n            init: {\n                method: function method() {},\n                after: function after() {\n                    this.props.syncedMessages = [];\n                    this.props.toNumbers = [];\n                    this.props.toNumber = this.data.toNumber;\n                    this.props.fromNumber = this.data.fromNumber;\n                    this.props.fromNumbers = this.data.fromNumbers || [];\n\n                    var conversation = this;\n                    w.customize(this, 'dropdown', {\n                        data: {},\n                        actions: {\n                            mount: {\n                                after: function after() {\n                                    // this.getData()\n                                }\n                            },\n                            getData: {\n                                method: function method() {\n                                    return conversation.getOutboundCallerID();\n                                },\n                                after: function after(ids) {\n                                    var _this = this;\n\n                                    ids.forEach(function (id) {\n                                        return _this.addItem(id);\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            mount: {\n                method: function method(finish) {\n                    var _this2 = this;\n\n                    var currentContact = this.props.contact = this.data.contact;\n                    console.log(currentContact);\n                    // set default outbound caller id as first phone number\n                    this.props.toExtension = currentContact.extension;\n                    this.data.fromNumber && this.setSender(this.data.fromNumber);\n                    this.setReceiver(this.data.toNumber || currentContact.phoneNumber[0]);\n                    this.setReceiverCandidates(currentContact.phoneNumber);\n                    currentContact.msg && this.appendMessages(currentContact.msg);\n                    this.scrollToAnchor();\n\n                    this.setTitle(currentContact.displayName);\n\n                    // Fake contact\n                    if (!currentContact.profileImage) {\n                        var hash = md5(currentContact.id);\n                        this.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                        return;\n                    }\n\n                    // FIXME: API call in here is a anti-pattern, should be in services\n                    sdk.platform().get(currentContact.profileImage).then(function (r) {\n                        return r.response();\n                    }).then(function (r) {\n                        // Real contact, no avatar\n                        console.log(r);\n                        if (r.status === 204 || r.status === 404) {\n                            var hash = md5(currentContact.id);\n                            _this2.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                        } else {\n                            // Real contact, has avatar\n                            _this2.dom['profile-img'].src = currentContact.profileImage + ('?access_token=' + sdk.platform().auth().accessToken());\n                        }\n                    }).catch(function (e) {\n                        // Real contact, no avatar\n                        var hash = md5(currentContact.id);\n                        _this2.dom['profile-img'].src = 'http://www.gravatar.com/avatar/' + hash + '?d=retro';\n                    });\n                },\n                after: function after() {\n                    this.dom.input.value = this.data.message || '';\n                    fade.init(this.root);\n                    fade.in(this.root);\n                }\n            },\n            setTitle: {\n                after: function after(text) {\n                    this.dom.header.textContent = text;\n                }\n            },\n            enter: {\n                method: function method(finish, e) {\n                    if (e.keyCode === 13) {\n                        this.send();\n                        e.preventDefault();\n                    }\n                }\n            },\n            send: {\n                before: function before() {\n                    // send messages on UI\n                    this.props.message = this.dom.input.value;\n                    this.dom.input.value = '';\n                    var date = new Date();\n                    var bubble = this.addBubble(null, 'SMS', this.props.message, 'Outgoing', date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds());\n                    this.scrollToBottom();\n                    return bubble;\n                },\n                method: function method(finish, dom) {\n                    var _this3 = this;\n\n                    this.props.fromNumber = this.data.fromNumber || this.props.fromNumber;\n                    this.props.toNumber = this.data.toNumber || this.props.toNumber;\n                    return finish().then(function (response) {\n                        dom.setAttribute('data-id', response.id);\n                        _this3.unconfirm = _this3.unconfirm || [];\n                        _this3.unconfirm.push(dom);\n                        return response;\n                    }).catch(function (err) {\n                        return dom.parentNode.removeChild(dom);\n                    });\n                    // user actually send to message to server (SDK)\n                },\n                after: function after(response) {}\n            },\n            addBubble: {\n                after: function after(id, type, content, direction, time, prepend) {\n                    var opponent = direction === 'Inbound';\n                    var model = this.props.contact.msg && this.props.contact.msg.find(function (contact) {\n                        return contact.id === id;\n                    });\n                    var doc;\n                    if (type === 'SMS' || type === 'Pager') doc = this.createSMSTemplate(id, content, opponent, time);else if (type === 'VoiceMail') doc = this.createVoiceMailTemplate(id, content, opponent, time);else if (type === 'Voice') doc = this.createCallLogTemplate(id, content, opponent, time);\n\n                    if (model) {\n                        model.dom = doc;\n                        this.markBubble(model);\n                    }\n\n                    if (prepend) {\n                        this.dom.conversations.insertBefore(doc, this.dom.conversations.firstChild);\n                    } else {\n                        this.dom.conversations.appendChild(doc);\n                    }\n                    return this.dom.conversations.lastChild;\n                }\n            },\n            markBubble: {\n                method: function method(finish, model) {\n                    var _this4 = this;\n\n                    model.dom.addEventListener('mouseover', function (e) {\n                        if (!_this4.props.fromNumbers) return; // not yet loaded\n                        var fromNumber = model.from;\n                        var toNumber = model.to;\n                        if (_this4.props.contact.extension == fromNumber || _this4.props.fromNumbers.indexOf(fromNumber) > -1) {\n                            _this4.dom['from-number'].textContent = fromNumber;\n                            _this4.dom['to-number'].textContent = toNumber;\n                        } else {\n                            _this4.dom['from-number'].textContent = toNumber;\n                            _this4.dom['to-number'].textContent = fromNumber;\n                        }\n                        _this4.props.contact.msg.filter(function (contact) {\n                            return contact.from == fromNumber || contact.from == toNumber || contact.to == toNumber || contact.to == fromNumber;\n                        }).filter(function (msg) {\n                            return msg.dom;\n                        }).map(function (msg) {\n                            return msg.dom;\n                        }).map(function (dom) {\n                            return dom.classList.add('--marked');\n                        });\n                    });\n                    model.dom.addEventListener('mouseout', function (e) {\n                        if (!_this4.props.fromNumbers) return; // not yet loaded\n                        var fromNumber = model.from;\n                        var toNumber = model.to;\n                        if (_this4.props.contact.extension == fromNumber || _this4.props.fromNumbers.indexOf(fromNumber) > -1) {\n                            _this4.dom['from-number'].textContent = fromNumber;\n                            _this4.dom['to-number'].textContent = toNumber;\n                        } else {\n                            _this4.dom['from-number'].textContent = toNumber;\n                            _this4.dom['to-number'].textContent = fromNumber;\n                        }\n\n                        _this4.props.contact.msg.filter(function (msg) {\n                            return msg.dom;\n                        }).map(function (msg) {\n                            return msg.dom;\n                        }).map(function (dom) {\n                            return dom.classList.remove('--marked');\n                        });\n                    });\n                }\n            },\n            createSMSTemplate: {\n                method: function method(finish, id, text, opponent, time) {\n                    var div = document.createElement('div');\n                    div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\' \\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' \\'>\\n                                        ' + text + '\\n                                    </div>\\n                                </div>';\n\n                    return div.firstChild;\n                }\n            },\n            createVoiceMailTemplate: {\n                method: function method(finish, id, content, opponent, time) {\n                    var audio = new Audio(content.uri + '?access_token=' + sdk.platform().auth().accessToken());\n                    var div = document.createElement('div');\n                    div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\'\\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' --voice voice-bubble\\'>\\n                                        <span class=\\'voice-bubble__play icon-uni7C\\'></span>\\n                                        <span class=\\'voice-bubble__duration\\' data-length=' + content.vmDuration + '></span>\\n                                    </div>\\n                                </div>';\n                    div.firstChild.querySelector('.voice-bubble__duration').style.width = content.vmDuration * 2 + 'px';\n                    div.firstChild.addEventListener('click', function (e) {\n                        audio.play();\n                    });\n                    return div.firstChild;\n                }\n            },\n            createCallLogTemplate: {\n                method: function method(finish, id, content, opponent, time) {\n                    var div = document.createElement('div');\n                    div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\'\\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' --log\\'>\\n                                        <span class=\\'bubble--log icon-uniAE\\'>\\n                                        ' + (typeof content === 'string' ? '<span>' + content + '</span>' : \"<span class='voice-bubble__play icon-uni7C'></span>\") + '\\n                                    </div>\\n                                </div>';\n\n                    if (typeof content === 'string') {} else {\n                        // TODO:\n                        // get ${content.uri}?access_token=${sdk.platform().auth().accessToken()}\n                        // to get the duration of record\n                        var audio = new Audio(content.uri + '/content?access_token=' + sdk.platform().auth().accessToken());\n                        div.firstChild.addEventListener('click', function (e) {\n                            audio.play();\n                        });\n                    }\n                    return div.firstChild;\n                }\n            },\n            scroll: {\n                method: function method(finish, event) {\n                    if (event.target.scrollTop === 0) this.reachTop();\n                }\n            },\n            reachTop: {\n                before: function before() {},\n                method: function method(finish) {\n                    if (this.isLoading) return;\n                    this.isLoading = true;\n                    this.dom.loading.classList.remove('display-none');\n                    return finish();\n                },\n                after: function after(messages) {\n                    if (messages) {\n                        // maintain the scoll position\n                        var scrollBottom = this.dom.conversations.offsetHeight;\n                        // We prepend the messages, so the order is reversed,\n                        // and we don't want to modify the original msgs, so shallow copy first\n                        this.prependMessages(messages.slice().reverse(), false);\n                        this.dom.container.scrollTop = this.dom.conversations.offsetHeight - scrollBottom;\n\n                        this.isLoading = false;\n                        this.dom.loading.classList.add('display-none');\n                    }\n                }\n            },\n            addTimestamp: {\n                method: function method(finish, time, prepend) {\n                    var div = document.createElement('div');\n                    div.innerHTML = '<div class=\\'clearfix conversations__conv\\'>\\n                                    <div class=\\'timestamp\\'>\\n                                        ' + time + '\\n                                    </div>\\n                                </div>';\n                    if (prepend) this.dom.conversations.insertBefore(div.firstChild, this.dom.conversations.firstChild);else this.dom.conversations.appendChild(div.firstChild);\n                }\n            },\n            parseMessages: {\n                method: function method(finish, messages, prepend) {\n                    var _this5 = this;\n\n                    messages.map(function (msg) {\n                        var time = new Date(msg.time);\n                        msg.displayTime = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                        msg.status.sendConfirmed = true;\n                        msg.status.receiveConfirmed = true;\n                        return msg;\n                    }).forEach(function (msg) {\n                        _this5.addBubble(msg.id, msg.type, msg.subject, msg.direction, msg.displayTime, prepend);\n                        var time = new Date(msg.time);\n                        var date = time.getDate();\n                        var month = time.getMonth() + 1;\n                        if (!prepend && date > _this5.props.convDate && month >= _this5.props.convMonth || prepend && date < _this5.props.convDate && month <= _this5.props.convMonth) _this5.addTimestamp(month + '/' + date, prepend);\n                        _this5.props.convDate = date;\n                        _this5.props.convMonth = month;\n                    });\n                }\n            },\n            appendMessages: {\n                method: function method(finish, messages, scroll) {\n                    if (messages) this.parseMessages(messages, false);\n                },\n                after: function after(messages) {\n                    var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                    if (scroll) this.scrollToBottom();\n                }\n            },\n            prependMessages: {\n                before: function before() {},\n                method: function method(finish, messages, scroll) {\n                    this.props.contact.msg = this.props.contact.msg || [];\n                    // this.props.contact.msg = this.props.contact.msg.concat(messages)\n                    if (messages) this.parseMessages(messages, true);\n                },\n                after: function after(messages) {\n                    var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                    if (scroll) this.scrollToBottom();\n                }\n            },\n            addIncomingMessages: {\n                method: function method(finish) {\n                    var _this6 = this;\n\n                    this.props.contact.msg = this.props.contact.msg || [];\n                    console.log('incoming');\n                    this.parseMessages(this.props.contact.msg.filter(function (msg) {\n                        return !msg.status.receiveConfirmed;\n                    }).filter(function (msg) {\n                        return _this6.props.syncedMessages.indexOf(msg.id) === -1;\n                    }).map(function (msg) {\n                        _this6.props.syncedMessages.push(msg.id);\n                        return msg;\n                    }).filter(function (msg) {\n                        return msg.direction === 'Inbound';\n                    }), false);\n                },\n                after: function after() {\n                    this.scrollToBottom();\n                }\n            },\n            confirmMessages: {\n                method: function method(finish) {\n                    var _this7 = this;\n\n                    if (!this.unconfirm) return [];\n                    this.props.contact.msg = this.props.contact.msg || [];\n                    return this.props.contact.msg.filter(function (msg) {\n                        return !msg.status.sendConfirmed;\n                    }).map(function (msg) {\n                        // FIXME: cache getAttribute, perf\n                        var index = _this7.unconfirm.findIndex(function (dom) {\n                            return dom.getAttribute('data-id') == msg.id;\n                        });\n                        var dom = _this7.unconfirm[index] || null;\n                        console.log(msg);\n                        if (dom) {\n                            dom.removeAttribute('data-id');\n                            msg.dom = dom;\n                            msg.status.sendConfirmed = true;\n                            _this7.unconfirm.splice(index, 1);\n                            _this7.markBubble(msg);\n                        }\n                        return dom;\n                    });\n                }\n            },\n            scrollToAnchor: {\n                after: function after() {\n                    var _this8 = this;\n\n                    var anchor;\n                    if (this.data.anchorContent && (anchor = this.props.contact.msg.find(function (content) {\n                        return content.id == _this8.data.anchorContent.id;\n                    }))) {\n                        this.dom.container.scrollTop = anchor.dom.offsetTop - anchor.dom.offsetHeight;\n                    }\n                }\n            },\n            warnBubble: {\n                after: function after(id) {}\n            },\n            scrollToBottom: {\n                after: function after() {\n                    this.dom.container.scrollTop = this.dom.container.scrollHeight;\n                }\n            },\n            getOutboundCallerID: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(numbers) {\n                    // If we didn't get the default number, set to the first one of candidates\n                    if (!this.props.fromNumber) this.setSender(numbers[0]);\n                    this.setSenderCandidates(numbers);\n                }\n            },\n            queryContacts: {\n                method: function method(finish, queryText) {\n                    this.props.to = queryText;\n                    return finish();\n                }\n            },\n            setSender: {\n                method: function method(finish, fromNumber) {\n                    this.props.fromNumber = fromNumber;\n                }\n            },\n            setSenderCandidates: {\n                method: function method(finish, fromNumbers) {\n                    this.props.fromNumbers = fromNumbers;\n                }\n            },\n            setReceiver: {\n                method: function method(finish, toNumber) {\n                    this.props.toNumber = toNumber;\n                }\n            },\n            setReceiverCandidates: {\n                method: function method(finish, toNumbers) {\n                    this.props.toNumbers = toNumbers;\n                }\n            },\n            togglePhoneModal: {\n                before: function before() {\n                    this.dom['phone-mask'].classList.toggle('display-none');\n                }\n            },\n            back: {\n                after: function after() {}\n            }\n        };\n    });\n    //# sourceURL=conversation-advanced.html\n\n}());","template":"\n    <div class='rc-panel rc-conversation'>\n        <div class='rc-panel__header --colored'>\n            <span class='close icon-uni3E' data-event='click:back'></span>\n            <div class='header'>\n                <div class='avatar-wrapper'>\n                    <img class='avatar' data-info='profile-img' src=\"\">\n                </div>\n                <div class='header-title' data-info='header'></div>\n            </div>\n        </div>\n        <div    class='rc-panel__content container' \n                data-info='panel'>\n            <div class='bar'>\n                <div class='hint' data-info='to-number'>to</div>\n                <div class='hint' data-info='from-number'>from</div>\n            </div>\n            <div    class='content'\n                    data-info='container'\n                    data-event='scroll:scroll'>\n                <div    class='conversations__loading display-none'\n                        data-info='loading'>\n                    loading...\n                </div>\n                <div    class='conversations' \n                        data-info='conversations'>\n                </div>\n            </div>\n            <div class='textarea-wrapper'>\n                <textarea \n                data-info='input'\n                data-event='keydown:enter'\n                placeholder='messages...'\n                ></textarea>\n                <button \n                    class='rc-button --circle --positive callout'\n                    data-info='callout'\n                    data-event='click:togglePhoneModal'\n                >\n                </button>\n            </div>\n        </div>\n        <div    class='mask display-none'\n                data-info='phone-mask'\n                data-event='click:togglePhoneModal'>\n            <div \n                class='modal'\n                data-info='phone-modal'>\n                <h2>\n                    <span class='voice-bubble__play icon-uniAE'></span>\n                    <span>Phone call</span>\n                </h2>\n                <div>\n                    <dropdown data-info='from-number-dropdown'></dropdown>\n                    <dropdown data-info='to-number-dropdown'></dropdown>\n                </div>\n                <button class='rc-button --round --positive'>Call out</button>\n            </div>\n        </div>\n    </div>\n","style":"/* rc-input.--round, rc-button.--round */\n\n/* rc-panel */\n\n/* TODO */\n\nconversation-advanced .close {\n    position: absolute;\n    cursor: pointer;\n}\nconversation-advanced .container {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -webkit-flex-direction: column;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    /* Adjust all conversation related font size */\n    font-size: .8em;\n    -webkit-transition: -webkit-transform .2s ease-in;\n    transition: -webkit-transform .2s ease-in;\n    transition: transform .2s ease-in;\n    transition: transform .2s ease-in, -webkit-transform .2s ease-in;\n}\nconversation-advanced .content {\n    overflow: auto;\n    height: 100%;\n}\nconversation-advanced .textarea-wrapper {\n    position: relative;\n    width: 100%;\n}\nconversation-advanced .textarea-wrapper > textarea {\n    padding: .5em .7em;\n    width: 100%;\n    border: 0;\n    border-top: 1px solid #bdc3c7;\n    resize: none;\n}\nconversation-advanced .bar {\n    margin-bottom: 5px;\n}\nconversation-advanced .hint {\n    padding: .5em .7em;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n    /* overlay bubbles */\n    position: relative;\n    z-index: 1;\n    display: inline-block;\n    width: 49%;\n    text-align: center;\n    font-size: .9em;\n}\nconversation-advanced .callout {\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n    position: absolute;\n    bottom: 10px;\n    right: 10px;\n    width: 40px;\n    height: 40px;\n}\nconversation-advanced .mask {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(10,10,10,.6);\n}\nconversation-advanced .modal {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n    padding: .9em 1.1em;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -webkit-flex-direction: column;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    position: absolute;\n    z-index: 2;\n    top: 5%;\n    left: 5%;\n    width: 90%;\n    height: 50%;\n    border: 1px solid #bdc3c7;\n    border-radius: 4px;\n    background-color: #fff;\n    text-align: center\n}\nconversation-advanced .modal > .rc-button {\n    width: 100%;\n    margin-top: auto;\n    -webkit-align-self: center;\n    -ms-flex-item-align: center;\n    align-self: center;\n}\nconversation-advanced .timestamp {\n    padding: .5em .7em;\n    text-align: center;\n    color: #bdc3c7;\n}\nconversation-advanced .header {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -webkit-flex-direction: row;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-pack: center;\n    -webkit-justify-content: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n}\nconversation-advanced .header-title {\n    -webkit-align-self: center;\n        -ms-flex-item-align: center;\n            align-self: center;\n    font-size: 1.2em;\n}\nconversation-advanced .avatar-wrapper {\n    width: 40px;\n    height: 40px;\n    margin-right: .8em;\n    border-radius: 50%;\n    overflow: hidden;\n    line-height: 2;\n}\nconversation-advanced .avatar {\n    max-width: 100%;\n}\n\nconversation-advanced .conversations {\n}\n\nconversation-advanced .conversations__conv {\n    padding-left: 1em;\n    padding-right: 1em;\n}\n\nconversation-advanced .conversations__conv.--marked {\n    background-color: #eee;\n}\n\nconversation-advanced .conversations__bubble {\n    padding: .5em .7em;\n    position: relative;\n    word-break: break-word;\n    border: 1px solid #bdc3c7;\n    border-radius: 10px;\n    margin-bottom: 5px;\n}\n\nconversation-advanced .conversations__bubble.--opponent {\n    float: left;\n}\n\nconversation-advanced .conversations__bubble.--opponent:after {\n    left: 100%;\n}\n\nconversation-advanced .conversations__bubble.--self {\n    float: right;\n    background-color: #ecf0f1;\n}\n\nconversation-advanced .conversations__bubble.--self:after {\n    right: 100%;\n}\n\nconversation-advanced .conversations__bubble.--log {\n    background-color: #B7C1A9;\n    border-color: #B7C1A9;\n}\n\nconversation-advanced .conversations__bubble.--voice {\n    background-color: #CAC3A9;\n    border-color: #CAC3A9;\n}\n\nconversation-advanced .conversations__bubble:hover {\n}\n\nconversation-advanced .conversations__bubble:hover:after {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 2;\n    content: attr(data-tooltip);\n    top: 0;\n    background-color: #000;\n    color: #fff;\n    font-size: .8em;\n    border-radius: 2px;\n    padding: .5em .7em;\n    text-align: center;\n    min-width: calc(100%-1px);\n    word-break: normal;\n}\n\nconversation-advanced .conversations__timestamp {\n    text-align: center;\n    color: #bdc3c7;\n}\n\nconversation-advanced .conversations__loading {\n    padding: .5em .7em;\n    text-align: center;\n}\nconversation-advanced .voice-bubble {\n}\nconversation-advanced .voice-bubble__play {\n}\nconversation-advanced .voice-bubble__duration {\n    height: 10px;\n    border: 1px solid#878787;\n    display: inline-block;\n}\n\n","imports":{"scripts":["https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.3.0/js/md5.min.js"],"styles":[]},"options":{"scopedStyle":true}};
__w_widgets['conversation-item-voice'] = {"script":"(function () {\n\t'use strict';\n\n\n\n}());","template":"<div class='clearfix'>\n    <div\n        data-tooltip='$' \n        class='conversations__bubble --self'>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['conversation'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n        this.actions = {\n            init: {\n                method: function method() {},\n                after: function after() {\n                    var conversation = this;\n                    w.customize(this, 'contact-picker', {\n                        data: {\n                            contact: conversation.data.toNumber\n                        },\n                        actions: {\n                            autoComplete: {\n                                method: function method() {\n                                    return conversation.queryContacts(this.props.inputValue);\n                                }\n                            }\n                        }\n                    });\n                    w.customize(this, 'dropdown', {\n                        data: {\n                            defaultValue: conversation.data.fromNumber\n                        },\n                        actions: {\n                            getData: {\n                                method: function method() {\n                                    return conversation.getOutboundCallerID();\n                                },\n                                after: function after(ids) {\n                                    var _this = this;\n\n                                    ids.forEach(function (id) {\n                                        return _this.addItem(id);\n                                    });\n                                }\n                            },\n                            switchTitle: {\n                                method: function method(text) {\n                                    conversation.props.fromNumber = text;\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            mount: {\n                method: function method() {\n                    // There is two type of conversation: 1. to new users 2. existing conversation\n                    // will be determined by this.data\n                    if (!this.data.new) {\n                        this.refs['contact-picker'].disable();\n                        this.refs.dropdown.disable();\n                    }\n                },\n                after: function after() {\n                    var _this2 = this;\n\n                    this.refs['dropdown'].getData();\n                    this.dom.input.value = this.data.message || '';\n                    fade.init(this.root);\n                    fade.in(this.root, {\n                        after: function after() {\n                            return _this2.refs['contact-picker'].focus();\n                        }\n                    });\n                }\n            },\n            enter: {\n                method: function method(finish, e) {\n                    if (e.keyCode === 13) {\n                        this.send();\n                        e.preventDefault();\n                    }\n                }\n            },\n            send: {\n                before: function before() {\n                    // send messages on UI\n                    this.props.message = this.dom.input.value;\n                    this.dom.input.value = '';\n                    var date = new Date();\n                    var bubble = this.addBubble(this.props.message, 'Outgoing', date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds());\n                    this.scrollToBottom();\n                    return bubble;\n                },\n                method: function method(finish, dom) {\n                    var _this3 = this;\n\n                    this.props.fromNumber = this.data.fromNumber || this.props.fromNumber;\n                    this.props.toNumber = this.data.toNumber || this.refs['contact-picker'].dom.input.value;\n                    return finish().then(function (response) {\n                        dom.setAttribute('data-id', response.id);\n                        _this3.unconfirm = _this3.unconfirm || [];\n                        _this3.unconfirm.push(dom);\n                        return response;\n                    }).catch(function (err) {\n                        return dom.parentNode.removeChild(dom);\n                    });\n                    // user actually send to message to server (SDK)\n                },\n                after: function after(response) {}\n            },\n            addBubble: {\n                after: function after(text, direction, time, prepend) {\n                    var opponent = direction === 'Inbound';\n                    var template = '<div class=\\'clearfix\\'>\\n                                    <div\\n                                        data-tooltip=\\'' + time + '\\' \\n                                        class=\\'conversations__bubble ' + (opponent ? \"--opponent\" : \"--self\") + ' \\'>\\n                                        ' + text + '\\n                                    </div>\\n                                </div>';\n                    var div = document.createElement('div');\n                    div.innerHTML = template;\n                    if (prepend) {\n                        this.dom.conversations.insertBefore(div.childNodes[0], this.dom.conversations.firstChild);\n                    } else {\n                        this.dom.conversations.appendChild(div.childNodes[0]);\n                    }\n                    return this.dom.conversations.lastChild;\n                }\n            },\n            disable: {\n                after: function after() {\n                    this.refs['contact-picker'].disable();\n                    this.refs.dropdown.disable();\n                }\n            },\n            scroll: {\n                method: function method(finish, event) {\n                    if (event.target.scrollTop === 0) this.reachTop();\n                }\n            },\n            reachTop: {\n                before: function before() {},\n                method: function method(finish) {\n                    var _this4 = this;\n\n                    if (this.isLoading) return;\n                    this.isLoading = true;\n                    this.dom.loading.classList.remove('display-none');\n                    return finish().then(function (result) {\n                        _this4.isLoading = false;\n                        _this4.dom.loading.classList.add('display-none');\n                        return result;\n                    });\n                },\n                after: function after(messages) {\n                    if (messages) {\n                        // maintain the scoll position\n                        var scrollBottom = this.dom.conversations.offsetHeight;\n                        this.prependMessages(messages, false);\n                        this.dom.container.scrollTop = this.dom.conversations.offsetHeight - scrollBottom;\n                    }\n                }\n            },\n            appendMessages: {\n                method: function method(finish, msgs, scroll) {\n                    var _this5 = this;\n\n                    if (msgs) msgs.map(function (msg) {\n                        var time = new Date(msg.lastModifiedTime);\n                        msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                        return msg;\n                    }).forEach(function (msg) {\n                        return _this5.addBubble(msg.subject, msg.direction, msg.time);\n                    });\n                },\n                after: function after(msgs) {\n                    var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                    if (scroll) this.scrollToBottom();\n                }\n            },\n            prependMessages: {\n                before: function before() {},\n                method: function method(finish, msgs, scroll) {\n                    var _this6 = this;\n\n                    if (msgs) msgs.map(function (msg) {\n                        var time = new Date(msg.lastModifiedTime);\n                        msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                        return msg;\n                    }).forEach(function (msg) {\n                        return _this6.addBubble(msg.subject, msg.direction, msg.time, true);\n                    });\n                },\n                after: function after(msgs) {\n                    var scroll = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n                    if (scroll) this.scrollToBottom();\n                }\n            },\n            warnBubble: {\n                after: function after(id) {}\n            },\n            scrollToBottom: {\n                after: function after() {\n                    this.dom.container.scrollTop = this.dom.container.scrollHeight;\n                }\n            },\n            getOutboundCallerID: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            queryContacts: {\n                method: function method(finish, queryText) {\n                    this.props.to = queryText;\n                    return finish();\n                }\n            },\n            addIncomingMessages: {\n                method: function method(finish, messages) {\n                    var _this7 = this;\n\n                    messages.filter(function (msg) {\n                        return msg.availability === 'Alive';\n                    }).filter(function (msg) {\n                        return msg.messageStatus === 'Received';\n                    }).filter(function (msg) {\n                        return msg.direction === 'Inbound';\n                    }).filter(function (msg) {\n                        return msg.readStatus === 'Unread';\n                    }).map(function (msg) {\n                        console.log(msg);\n                        var time = new Date(msg.lastModifiedTime);\n                        msg.time = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();\n                        return msg;\n                    }).forEach(function (msg) {\n                        return _this7.addBubble(msg.subject, msg.direction, msg.time);\n                    });\n                },\n                after: this.scrollToBottom\n            },\n            confirmMessages: {\n                method: function method(finish, messages) {\n                    if (!this.unconfirm) return [];\n                    if (!messages) return [];\n                    return this.unconfirm.filter(function (dom) {\n                        return messages.map(function (msg) {\n                            return msg.id;\n                        }).indexOf(parseInt(dom.getAttribute('data-id'))) > -1;\n                    }).forEach(function (dom) {\n                        return dom.removeAttribute('data-id');\n                    });\n                }\n            }\n        };\n    });\n    //# sourceURL=conversation.html\n\n}());","template":"\n    <div class='rc-panel rc-conversation'>\n        <div class='rc-panel__header --colored' data-info='header'>\n            <contact-picker data-info='contact-picker'></contact-picker>\n        </div>\n        <div    class='rc-panel__content rc-conversation__container' \n                data-info='panel'>\n            <dropdown class='' data-info='dropdown'></dropdown>\n            <div    class='rc-conversation__content' \n                    data-info='container'\n                    data-event='scroll:scroll'>\n                <div    class='conversations__loading display-none'\n                        data-info='loading'>\n                    loading...\n                </div>\n                <div    class='conversations' \n                        data-info='conversations'>\n                </div>\n            </div>\n            <div class='rc-conversation__textarea-wrapper'>\n                <textarea \n                data-info='input' \n                data-event='keydown:enter'\n                placeholder='messages...'\n                ></textarea>\n            </div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['dial-pad'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var fade = w.transition('fade');\n\n        this.props = {\n            fromNumber: null,\n            toNumber: null\n        };\n        this.actions = {\n            init: {\n                before: function before() {},\n                method: function method() {},\n                after: function after() {\n                    var dialPad = this;\n                    var _data = this.data;\n                    var color = _data.color;\n                    var lang = _data.lang;\n                    var logo = _data.logo;\n\n                    this.dom.header.style['background-color'] = color || '#fff';\n                    w.customize(this, 'contact-picker', {\n                        data: {\n                            whiteList: this.dom['dialing-panel']\n                        },\n                        actions: {\n                            autoComplete: {\n                                method: function method() {\n                                    return dialPad.queryContacts(this.props.inputValue);\n                                }\n                            }\n                        }\n                    });\n                    w.customize(this, 'dropdown', {\n                        actions: {\n                            getData: {\n                                method: function method() {\n                                    return dialPad.getOutboundCallerID();\n                                },\n                                after: function after(ids) {\n                                    var _this = this;\n\n                                    ids.forEach(function (id) {\n                                        return _this.addItem(id);\n                                    });\n                                }\n                            },\n                            switchTitle: {\n                                method: function method(text) {\n                                    dialPad.props.fromNumber = text;\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            mount: {\n                before: function before() {},\n                method: function method() {},\n                after: function after() {\n                    this.refs['dropdown'].getData();\n                    this.refs['contact-picker'].focus();\n                    // fade.in(this.root);\n                }\n            },\n            dialing: {\n                method: function method(finish, value) {\n                    var cp = this.refs['contact-picker'];\n                    cp.appendInput(value);\n                    cp.autoComplete();\n                    return finish();\n                },\n                after: function after() {\n                    this.refs['contact-picker'].dom.input.focus();\n                }\n            },\n            callout: {\n                before: function before() {\n                    this.dom.callout.classList.add('--active');\n                },\n                method: function method(finish, event) {\n                    // TODO: Do some basic validation.\n                    var ac = this.refs['contact-picker'];\n                    this.props.toNumber = ac.dom.input.value;\n                    this.props.fromNumber = localStorage.getItem('username');\n                    return finish();\n                },\n                after: function after() {\n                    var _this2 = this;\n\n                    setTimeout(function () {\n                        return _this2.dom.callout.classList.remove('--active');\n                    }, 1000);\n                },\n                error: function error(err) {\n                    this.dom.callout.classList.remove('--active');\n                }\n            },\n            disable: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {\n                    this.dom['disabled-mask'].classList.remove('display-none');\n                    this.dom['container'].classList.add('blur');\n                }\n            },\n            getOutboundCallerID: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            queryContacts: {\n                method: function method(finish, queryText) {\n                    this.props.toNumber = queryText;\n                    return finish();\n                }\n            },\n            setNumber: {\n                method: function method(finish, value) {\n                    this.refs['contact-picker'].setInput(value);\n                    return finish();\n                }\n            },\n            click: {\n                method: function method(finish, event) {\n                    for (var i = 0; i < 10; i++) {\n                        if (event.target === this.dom['dial-button-' + i] || event.target.parentNode === this.dom['dial-button-' + i]) this.dialing(i);\n                    }\n                    if (event.target === this.dom.callout) this.callout();\n                }\n            }\n        };\n    });\n\n    //# sourceURL=dial-pad.html\n\n}());","template":"\n    <div class='rc-panel rc-dial-pad'>\n        <div class='rc-panel__header --colored' data-info='header'>\n            <contact-picker data-info='contact-picker'></contact-picker>\n        </div>\n        <div data-info='container'>\n            <div class='rc-panel__content'>\n                <dropdown data-info='dropdown'></dropdown>\n                <div data-info='dialing-panel' class='margin-top-2'>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-1'>\n                            <div class='dial-button__number'>1</div>\n                        </button>\n                        <button\n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-2'>\n                            <div class='dial-button__number'>2</div>\n                            <div class='dial-button__symbol'>ABC</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-3'>\n                            <div class='dial-button__number'>3</div>\n                            <div class='dial-button__symbol'>DEF</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-4'>\n                            <div class='dial-button__number'>4</div>\n                            <div class='dial-button__symbol'>GHI</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-5'>\n                            <div class='dial-button__number'>5</div>\n                            <div class='dial-button__symbol'>JKL</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-6'>\n                            <div class='dial-button__number'>6</div>\n                            <div class='dial-button__symbol'>MNO</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-7'>\n                            <div class='dial-button__number'>7</div>\n                            <div class='dial-button__symbol'>PQRS</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-8'>\n                            <div class='dial-button__number'>8</div>\n                            <div class='dial-button__symbol'>TUV</div>\n                        </button>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-9'>\n                            <div class='dial-button__number'>9</div>\n                            <div class='dial-button__symbol'>WXYZ</div>\n                        </button>\n                    </div>\n                    <div class='rc-dial-pad__line'>\n                        <button \n                            class='rc-button --circle dial-button dial-button--color' \n                            data-info='dial-button-0'>\n                            <div class='dial-button__number'>0</div>\n                            <div class='dial-button__symbol'>+</div>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <button \n            class='rc-button --circle call-button call-button--color' \n            data-info='callout'>\n            </button>\n        </div>\n        <div class='rc-dial-pad__mask display-none' data-info='disabled-mask'>\n            <p>Your account doesn't not have Web Phone permission.</p>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['dropdown'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var enlarge = w.transition('enlarge');\n        this.actions = {\n            init: {\n                after: function after() {\n                    if (this.data.defaultValue) this.switchTitle(this.data.defaultValue);\n                }\n            },\n            mount: {\n                after: function after() {\n                    var _this = this;\n\n                    enlarge.init(this.dom['list']);\n                    document.addEventListener('click', function (e) {\n                        var currentNode = e.target;\n                        while (currentNode.parentNode) {\n                            currentNode = currentNode.parentNode;\n                            if (currentNode.isEqualNode(_this.root)) return;\n                        }\n                        _this.hide();\n                    });\n                }\n            },\n            collapse: {\n                after: function after() {\n                    enlarge.toggle(this.dom['list']);\n                }\n            },\n            hide: {\n                after: function after() {\n                    enlarge.out(this.dom['list']);\n                }\n            },\n            getData: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            addItem: {\n                after: function after(text) {\n                    var _this2 = this;\n\n                    var item = document.createElement('div');\n                    // FIXME\n                    item.classList.add('rc-list__item', 'rc-dropdown__item');\n                    item.textContent = text;\n                    item.addEventListener('click', function (e) {\n                        _this2.switchTitle(text);\n                    });\n                    this.dom['list'].appendChild(item);\n                }\n            },\n            getSelected: {\n                method: function method() {\n                    return this.dom['dropdown'].textContent;\n                }\n            },\n            removeItem: {},\n            disable: {\n                method: function method() {\n                    this.dom.dropdown.disabled = true;\n                }\n            },\n            switchTitle: {\n                method: function method(finish, text) {\n                    finish(text);\n                },\n                after: function after(text) {\n                    this.dom['dropdown'].textContent = text;\n                    this.hide();\n                }\n            }\n        };\n    });\n    //# sourceURL=dropdown.html\n\n}());","template":"\n    <div class='rc-dropdown'>\n        <button class='rc-dropdown__trigger rc-button'\n                data-info='dropdown'\n                data-event='click:collapse'>From: </button>\n        <div    class='rc-dropdown__list rc-list' \n                data-info='list'>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['message-detail'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = {\n            init: {},\n            mount: {}\n        };\n    });\n\n}());","template":"<div class=\"rc-panel\">\n    <div class=\"rc-panel__content\">\n        <div class=\"rc-message-detail\">\n            <div>Conversation with</div>\n            <div class=\"rc-message-detail__contact\">\n                <div class=\"__name\">Colin Liu</div>\n                <div><span>6508370092</span></div>\n            </div>\n            <img class=\"rc-avatar --big rc-message-detail__avatar\">\n            <!--<div>\n                <div ng-show=\"['SMS','Pager'].indexOf(message.type)>=0\" class=\"status\">{{STRINGS.MESSAGEDETAILS.activityLabel}}</div>\n                <div ng-hide=\"['SMS','Pager'].indexOf(message.type)>=0\" class=\"status\">{{ STRINGS.MESSAGE_STATUS[message.messageStatus] || STRINGS.MESSAGE_STATUS.default }}</div>\n                <div class=\"time\">{{ message.creationTime | formatDate:\"long\" }}</div>\n            </div>-->\n            <div>&nbsp</div>\n            <div class=\"rc-button --positive rc-message-detail__button\">\n                Call\n            </div>\n            <div class=\"rc-button --positive rc-message-detail__button\">\n                Send\n            </div>\n        \n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['message-item-fax'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(message) {\n                var parent = this;\n                var t = w.t(this.data.lang);\n                w.customize(this, 'message-item', {\n                    data: parent.data,\n                    actions: {\n                        init: {\n                            method: function method() {\n                                return message;\n                            },\n                            after: function after() {\n                                this.setShortText();\n                            }\n                        },\n                        setShortText: {\n                            method: function method() {\n                                return t('message-item-fax-text');\n                            }\n                        },\n                        viewInfo: {\n                            method: function method() {\n                                parent.viewInfo();\n                            }\n                        },\n                        enter: {\n                            method: function method() {\n                                parent.enter();\n                            }\n                        }\n                    }\n                });\n                this.props.message = message;\n            }\n        };\n        this.actions.viewInfo = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n        this.actions.enter = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        };\n    });\n\n}());","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['message-item-text'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(message) {\n                var parent = this;\n                w.customize(this, 'message-item', {\n                    data: parent.data,\n                    actions: {\n                        init: {\n                            method: function method() {\n                                return message;\n                            },\n                            after: function after() {\n                                this.setShortText();\n                            }\n                        },\n                        setShortText: {\n                            method: function method() {\n                                return message.subject;\n                            }\n                        },\n                        viewInfo: {\n                            method: function method() {\n                                parent.viewInfo();\n                            }\n                        },\n                        enter: {\n                            method: function method() {\n                                parent.enter();\n                            }\n                        }\n                    }\n                });\n                this.props.message = message;\n            }\n        };\n        this.actions.viewInfo = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n        this.actions.enter = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        };\n    });\n\n}());","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['message-item-voicemail'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(message) {\n                var parent = this;\n                var t = w.t(this.data.lang);\n                w.customize(this, 'message-item', {\n                    data: parent.data,\n                    actions: {\n                        init: {\n                            method: function method() {\n                                return message;\n                            },\n                            after: function after() {\n                                this.setShortText();\n                            }\n                        },\n                        setShortText: {\n                            method: function method() {\n                                return t('message-item-voicemail-text');\n                            }\n                        },\n                        viewInfo: {\n                            method: function method() {\n                                parent.viewInfo();\n                            }\n                        },\n                        enter: {\n                            method: function method() {\n                                parent.enter();\n                            }\n                        }\n                    }\n                });\n                this.props.message = message;\n            }\n        };\n        this.actions.viewInfo = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n        this.actions.enter = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        };\n    });\n\n}());","template":"<div>\n    <message-item></message-item>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['message-item'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = w.action('interaction');\n        this.actions.init = {\n            method: function method(finish) {\n                var item = finish();\n                this.props.message = item;\n                return item;\n            },\n            after: function after(item) {\n                if (item.readStatus === 'Unread') {\n                    this.dom.icon.classList.add('--not-read');\n                    this.dom.contact.classList.add('--not-read');\n                }\n                this.dom.icon.classList.add(\"--\" + item.type.toLowerCase());\n                this.dom.time.textContent = item.time;\n                this.dom.contact.textContent = item.contact;\n            }\n        };\n        this.actions.setShortText = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after(text) {\n                this.dom.text.textContent = text;\n            }\n        };\n        this.actions.open = {\n            method: function method(finish) {\n                return finish();\n            }\n        };\n        this.actions.viewInfo = {\n            method: function method(finish, event) {\n                event.stopPropagation();\n                return finish();\n            }\n        };\n        this.actions.enter = {\n            method: function method(finish) {\n                return finish();\n            },\n            after: function after() {}\n        };\n    });\n\n}());","template":"<div data-info='message' class=\"rc-message-item\" data-event='click:open'>\n    <i data-info='icon' class=\"rc-message-item__icon\"></i>\n    <a class=\"rc-message-item__info\" data-event='click:viewInfo'></a>\n    <span class=\"rc-message-item__time\" data-info='time'></span>\n    <div class=\"rc-message-item__body\">\n        <span class=\"__contact\" data-info='contact' data-event='click:enter'>\n        </span>\n        <div class=\"__text\" data-info='text' data-event='click:enter'>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['messages'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n\n        var currentEnabledTab = null;\n\n        function enableTab(toEnableTab, toDisableTab) {\n            if (toEnableTab.classList.contains('--active') === false) {\n                toEnableTab.classList.add('--active');\n                toDisableTab.classList.remove('--active');\n            }\n        }\n\n        function createMessageWidget(type, message, parent) {\n            return w(type, {\n                data: parent.data,\n                actions: {\n                    init: {\n                        method: function method() {\n                            return message;\n                        }\n                    },\n                    viewInfo: {\n                        method: function method() {\n                            parent.viewMessageInfo(this.props.message);\n                        }\n                    },\n                    enter: {\n                        method: function method() {\n                            return parent.enterMessage(this.props.message);\n                        }\n                    }\n                }\n            });\n        }\n\n        function createMessageWidgets(messages, parent) {\n            messages.forEach(function (message) {\n                var widget = null;\n                if (message.type === 'Fax') {\n                    widget = createMessageWidget('message-item-fax', message, parent);\n                } else if (message.type === 'VoiceMail') {\n                    widget = createMessageWidget('message-item-voicemail', message, parent);\n                } else {\n                    widget = createMessageWidget('message-item-text', message, parent);\n                }\n                widget.mount(parent.dom.messages);\n                parent.props.widgetItems.push(widget);\n            });\n        }\n\n        function filterMessageWidget(widgetItems, type) {\n            widgetItems.forEach(function (item) {\n                if (type === 'all') {\n                    item.show();\n                } else {\n                    if (type.indexOf(item.props.message.type.toLowerCase()) >= 0) {\n                        item.show();\n                    } else {\n                        item.hide();\n                    }\n                }\n            });\n        }\n\n        this.actions = {\n            init: {\n                before: function before() {\n                    this.props.widgetItems = [];\n                },\n                after: function after() {\n                    // currentEnabledTab = this.dom.allTab;\n                    var t = w.t(this.data.lang);\n                    // this.dom.allTab.textContent = t('messages-tab-all');\n                    // this.dom.voiceMailTab.textContent = t('messages-tab-voicemail');\n                    // this.dom.faxTab.textContent = t('messages-tab-fax');\n                    // this.dom.textTab.textContent = t('messages-tab-text');\n                }\n            },\n            mount: {\n                after: function after() {\n                    this.refreshMessages();\n                }\n            },\n            enableTab: {\n                after: function after(event, type) {\n                    enableTab(event.target, currentEnabledTab);\n                    currentEnabledTab = event.target;\n                    filterMessageWidget(this.props.widgetItems, event.target.getAttribute('data-value'));\n                }\n            },\n            refreshMessages: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(messages) {\n                    console.log(messages);\n                    var root = this.dom.messages;\n                    while (root.firstChild) {\n                        root.removeChild(root.firstChild);\n                    }\n                    createMessageWidgets(messages, this);\n                }\n            },\n            viewMessageInfo: {\n                method: function method(finish, message) {\n                    this.props.selectedMessage = message;\n                    return finish();\n                }\n            },\n            enterMessage: {\n                method: function method(finish, message) {\n                    this.props.selectedMessage = message;\n                    return finish();\n                }\n            },\n            compose: {\n                before: function before() {\n                    this.dom.compose.classList.add('--active');\n                },\n                method: function method(finish) {\n                    return new Promise(function (resolve) {\n                        return setTimeout(function () {\n                            return resolve(finish());\n                        }, 500);\n                    });\n                },\n                after: function after() {\n                    var _this = this;\n\n                    setTimeout(function () {\n                        return _this.dom.compose.classList.remove('--active');\n                    }, 1000);\n                }\n            }\n        };\n    });\n    //# sourceURL=messages.html\n\n}());","template":"<div class=\"rc-panel rc-messages\">\n    <div class='rc-panel__header --flat'>\n        <div class=\"rc-contacts__searchBox\">\n            <input class=\"__input\" type=\"text\" data-info=\"searchText\" data-event=\"input:search\">\n        </div>\n    </div>\n    <div class=\"rc-panel__content\">\n        <button \n            class='rc-button --circle compose-button' \n            data-info='compose' \n            data-event='click:compose'>\n        </button>\n        <div data-info='messages'>\n            <message-item-text dynamic></message-item-text>\n            <message-item-fax dynamic></message-item-fax>\n            <message-item-voicemail dynamic></message-item-voicemail>\n        </div>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['notification'] = {"script":"(function () {\n    'use strict';\n\n    var slideDown = w.transition('slide-down');\n    w.register(function () {\n        this.actions = {\n            mount: {\n                method: function method() {},\n                after: function after() {\n                    slideDown.in(this.root);\n                }\n            },\n            msg: {\n                method: function method(finish, msg) {\n                    this.dom.msg.textContent = msg;\n                    return finish();\n                }\n            },\n            show: {\n                method: function method(finish, target, sec) {\n                    var _this = this;\n\n                    this.mount(target);\n                    finish();\n                    return new Promise(function (resolve) {\n                        setTimeout(function () {\n                            slideDown.out(_this.root, {\n                                after: function after() {\n                                    return resolve(_this.unmount());\n                                }\n                            });\n                        }, sec);\n                    });\n                }\n            }\n        };\n    });\n    //# sourceURL=notification.html\n\n}());","template":"<div>\n    <div class='rc-notification' data-event='click:unmount'>\n        <span class='rc-notification__icon'></span>\n        <span class='rc-notification__text' data-info='msg'>Error occur</span>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['rc-phone'] = {"script":"(function () {\n    'use strict';\n\n    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n    var phone = w.register(function () {\n        this.actions = {\n            getService: {\n                method: function method() {\n                    return {\n                        phoneService: w.service()['phoneService'],\n                        loginService: w.service()['loginService'],\n                        callLogService: w.service()['callLogService'],\n                        accountService: w.service()['accountService'],\n                        rcContactService: w.service()['rcContactService'],\n                        contactSearchService: w.service()['contactSearchService'],\n                        rcContactSearchProvider: w.service()['rcContactSearchProvider'],\n                        rcMessageService: w.service()['rcMessageService'],\n                        rcMessageProvider: w.service()['rcMessageProvider'],\n                        rcConferenceSerivce: w.service()['rcConferenceSerivce'],\n                        contactDetailWidgetAdapter: w.service()['contactDetailWidgetAdapter'],\n                        dialPadSearchProviders: [rcContactSearchProvider]\n                    };\n                }\n            },\n            loadData: {\n                method: function method() {\n                    this.getService().rcMessageService.subscribeToMessageUpdate();\n                    this.getService().rcMessageService.syncMessages(this.props.cachedMessageHours);\n                    this.getService().accountService.getAccountInfo();\n                    this.getService().accountService.getPhoneNumber();\n                    // this.getService().rcContactService.syncCompanyContact();\n                    // this.getService().phoneService.registerSIP();\n                    this.getService().callLogService.getCallLogs();\n                    this.getService().phoneService.listen();\n                }\n            },\n            createWidgets: {\n                method: function method() {\n                    var _getService = this.getService();\n\n                    var phoneService = _getService.phoneService;\n                    var loginService = _getService.loginService;\n                    var callLogService = _getService.callLogService;\n                    var accountService = _getService.accountService;\n                    var rcContactService = _getService.rcContactService;\n                    var contactSearchService = _getService.contactSearchService;\n                    var rcContactSearchProvider = _getService.rcContactSearchProvider;\n                    var rcMessageService = _getService.rcMessageService;\n                    var rcMessageProvider = _getService.rcMessageProvider;\n                    var rcConferenceSerivce = _getService.rcConferenceSerivce;\n                    var contactDetailWidgetAdapter = _getService.contactDetailWidgetAdapter;\n                    var dialPadSearchProviders = _getService.dialPadSearchProviders;\n\n                    var phone = this;\n                    this.props.conversation = undefined;\n                    this.props.contactDetail = undefined;\n                    this.props.dialPad = w('dial-pad', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: phone.data,\n                        actions: {\n                            mount: {\n                                after: function after() {\n                                    if (!accountService.hasServiceFeature(\"VoipCalling\")) this.disable();\n                                }\n                            },\n                            callout: {\n                                method: function method() {\n                                    return phoneService.callout(this.props.fromNumber, this.props.toNumber);\n                                },\n                                after: function after() {\n                                    phone.props.callPanel.mount('#call-panel');\n                                },\n                                error: function error(e) {\n                                    console.error(e);\n                                    phone.props.notification.show('#notification', 4000);\n                                    phone.props.notification.msg(e.message);\n                                }\n                            },\n                            queryContacts: {\n                                method: function method() {\n                                    var _this = this;\n\n                                    var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                                        return provider.search(_this.props.toNumber);\n                                    });\n                                    return contactSearchService.query(dialPadSearchFunctions);\n                                }\n                            },\n                            getOutboundCallerID: {\n                                method: function method() {\n                                    return accountService.listNumber(\"VoiceFax\", 'CallerId');\n                                }\n                            }\n                        }\n                    });\n                    this.props.callPanel = w('call-panel', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: phone.data,\n                        actions: {\n                            init: {\n                                method: function method() {\n                                    phoneService.on('callStarted', this.callStarted);\n                                    phoneService.on('callRejected', this.callRejected);\n                                    phoneService.on('callEnded', this.callEnded);\n                                    phoneService.on('callFailed', this.callFailed);\n                                }\n                            },\n                            answer: {\n                                method: function method() {\n                                    phoneService.answer();\n                                }\n                            },\n                            hangup: {\n                                method: function method() {\n                                    return phoneService.hangup();\n                                }\n                            }\n                        }\n                    });\n                    this.props.callPanelIncoming = w('call-panel-incoming', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: phone.data,\n                        actions: {\n                            init: {\n                                method: function method() {\n                                    console.log(this);\n                                    phoneService.on('called', this.called);\n                                }\n                            },\n                            called: {\n                                method: function method() {\n                                    this.mount('#call-panel-incoming');\n                                }\n                            }\n                        }\n                    });\n                    this.props.callLog = w('call-log', {\n                        shadowRoot: phone.data.shadowRoot,\n                        actions: {\n                            init: {\n                                method: function method() {\n                                    return callLogService.getCallLogs();\n                                }\n                            }\n                        }\n                    });\n                    this.props.timeline = w('time-line', {\n                        shadowRoot: phone.data.shadowRoot,\n                        actions: {\n                            mount: {\n                                after: function after() {\n                                    var _this2 = this;\n\n                                    rcMessageService.subscribeToMessageUpdate();\n                                    rcMessageProvider.onMessageUpdated(function (msg) {\n                                        _this2.updateTimeline(conversationService.syncContent(_this2.props.contacts, msg));\n                                        if (_this2.props.currentConv) {\n                                            _this2.props.currentConv.confirmMessages();\n                                            _this2.props.currentConv.addIncomingMessages();\n                                        }\n                                    });\n                                    return rcContactService.cacheContacts().then(function (contacts) {\n                                        return _this2.props.contacts = contacts;\n                                    });\n                                }\n                            },\n                            fetchData: {\n                                method: function method() {\n                                    return Promise.all([rcContactService.cacheContacts(), // first one must be the contacts\n                                    rcMessageService.syncMessages(conversationService.cachedHour), callLogService.getCallLogs()]).then(function (result) {\n                                        var _conversationService;\n\n                                        return (_conversationService = conversationService).organizeContent.apply(_conversationService, _toConsumableArray(result));\n                                    });\n                                }\n                            },\n                            search: {\n                                method: function method() {\n                                    contacts.dom.searchText.value = this.dom.searchText.value;\n                                    contacts.search();\n                                }\n                            },\n                            enterItem: {\n                                after: function after() {\n                                    var _this3 = this;\n\n                                    // this.unmount()\n                                    var contact = this.props.selectedContent.contact;\n                                    var fromNumber = contact.msg[0].direction === 'Outbound' ? contact.msg[0].from : contact.msg[0].to;\n                                    var toNumber = contact.msg[0].direction === 'Outbound' ? contact.msg[0].to : contact.msg[0].from;\n                                    this.props.currentConv = conv(contact, function () {\n                                        _this3.props.currentConv.unmount();\n                                    }, {\n                                        fromNumber: fromNumber,\n                                        toNumber: toNumber,\n                                        anchorContent: this.props.selectedContent\n                                    });\n                                    this.props.currentConv.mount('#conversation');\n                                }\n                            }\n                        }\n                    });\n                    this.props.conference = w('conference', {\n                        data: phone.data,\n                        actions: {\n                            getConferenceInfo: {\n                                method: function method() {\n                                    return rcConferenceSerivce.getConferenceInfo();\n                                }\n                            },\n                            inviteWithText: {\n                                method: function method() {}\n                            },\n                            joinAsHost: {\n                                method: function method() {\n                                    phone.dom.container.style.transform = 'translateX(0px)';\n                                    phone.props.dialPad.mount('#dial-pad');\n                                    phone.props.dialPad.setNumber(phone.props.conference.props.dialInNumber);\n                                }\n                            }\n                        }\n                    });\n                    this.props.contacts = w('contacts', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: {},\n                        actions: {\n                            init: {\n                                after: function after() {}\n                            },\n                            mount: {\n                                after: function after() {\n                                    this.fetchContacts();\n                                }\n                            },\n                            fetchRelatedContact: {\n                                method: function method() {\n                                    var _this4 = this;\n\n                                    return Promise.all([rcMessageService.syncMessages(conversationService.cachedHour), callLogService.getCallLogs(), rcContactService.cacheContacts()]).then(function (result) {\n                                        var _result = _slicedToArray(result, 3);\n\n                                        var msgs = _result[0];\n                                        var logs = _result[1];\n                                        var contacts = _result[2];\n\n                                        _this4.props.contacts = contacts.reduce(function (result, contact) {\n                                            result[contact.id] = contact;\n                                            return result;\n                                        }, {});\n                                        return conversationService.getConversations(contacts, msgs, logs);\n                                    }).then(function (relateContacts) {\n                                        _this4.props.relateContacts = relateContacts;\n                                        return relateContacts;\n                                    }).then(function (relateContacts) {\n                                        return Object.keys(relateContacts).map(function (index) {\n                                            // adapt to messages template format\n                                            relateContacts[index].msg[0].contact = relateContacts[index].displayName;\n                                            // for conversation-advance temaplate\n                                            relateContacts[index].msg[0].contactId = index;\n                                            return relateContacts[index].msg[0];\n                                        });\n                                    });\n                                }\n                            },\n                            fetchContacts: {\n                                method: function method() {\n                                    var _this5 = this;\n\n                                    // var dialPadSearchFunctions = dialPadSearchProviders.map(provider => {\n                                    //     return provider.searchAll();\n                                    // });\n                                    // return contactSearchService.query(dialPadSearchFunctions);\n                                    return rcContactService.cacheContacts().then(function (contacts) {\n                                        _this5.props.contacts = contacts.reduce(function (result, contact) {\n                                            result[contact.id] = contact;\n                                            return result;\n                                        }, {});\n                                        return contacts.map(function (contact) {\n                                            return {\n                                                name: contact.displayName,\n                                                type: 'rc',\n                                                id: contact.id\n                                            };\n                                        });\n                                    }).catch(function (e) {\n                                        return console.error(e);\n                                    });\n                                }\n                            },\n                            selectContact: {\n                                method: function method() {\n                                    var contact = this.props.relateContacts && this.props.relateContacts[this.props.selectedContact.id] || this.props.contacts[this.props.selectedContact.id];\n                                    var conversation = phone.props.timeline.props.currentConv = conv(contact, function () {\n                                        phone.props.timeline.mount('#contact-detail');\n                                    });\n                                    conversation.mount('#contact-detail');\n                                }\n                            },\n                            focus: {\n                                after: function after() {\n                                    console.log('focus');\n                                }\n                            }\n                        }\n                    });\n                    this.props.toolbar = w('tool-bar', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: phone.data,\n                        actions: {\n                            init: {\n                                after: function after() {\n                                    this.clickItem(this.addItem('<span class=\"icon-uniA4\"></span><span class=\"icon-RC_shapes_1-40_pressed\"></span>'), phone.switchWidgets(phone.props.dialPad, '#dial-pad', 0).fn);\n                                    this.clickItem(this.addItem('<span class=\"icon-uni2487\"></span></span><span class=\"icon-RC_shapes_1_30_pressed\"></span>'), phone.switchWidgets(phone.props.timeline, '#messages-panel', 1).fn);\n                                    this.clickItem(this.addItem('<span class=\"icon-uni7D\"></span><span class=\"icon-contact_info_pressed\"></span>'), phone.switchWidgets(phone.props.contacts, '#contacts', 2).fn);\n                                    this.clickItem(this.addItem('<span class=\"icon-uniC8\"></span><span class=\"icon-RC_shapes_2-30_pressed\"></span>'), phone.switchWidgets(phone.props.callLog, '#call-log', 3).fn);\n                                    this.clickItem(this.addItem('<span class=\"icon-uniA3\"></span>', 'Conference'), phone.switchWidgets(phone.props.conference, '#conference', 4).fn);\n                                    this.clickItem(this.addItem('<span class=\"icon-uni47\"></span>', 'Meeting'), function () {\n                                        phone.dom.container.style.transform = 'translateX(-750px)';\n                                        if (phone.props.conversation) {\n                                            phone.props.conversation.destroy();\n                                            phone.props.conversation = null;\n                                        }\n                                    });\n                                    // this.addItem('<img src=\"../src/styles/images/settings_normal.png\">');\n                                }\n                            },\n                            mount: {\n                                after: function after() {\n                                    phone.props.dialPad.mount('#dial-pad');\n                                }\n                            }\n                        }\n                    });\n                    this.props.authPanel = w('auth-panel', {\n                        shadowRoot: phone.data.shadowRoot,\n                        data: phone.data,\n                        actions: {\n                            login: {\n                                method: function method() {\n                                    return loginService.login(PhoneFormat.formatE164('US', this.props.username), this.props.extension, this.props.password);\n                                },\n                                after: function after() {\n                                    this.unmount();\n                                    phone.loadData();\n                                    if (phone.data.shadowRoot) phone.props.toolbar.mount(phone.data.shadowRoot.querySelector('#toolbar'));else phone.props.toolbar.mount('#toolbar');\n                                }\n                            }\n                        }\n                    });\n                    this.props.notification = w('notification', {});\n                    this.props.panels = [this.props.dialPad, this.props.callPanel, this.props.callPanelIncoming, this.props.callLog, this.props.timeline, this.props.conference, this.props.contacts, this.props.toolbar, this.props.authPanel];\n                }\n            },\n            switchWidgets: {\n                method: function method(finish, source, target, index) {\n                    var _this6 = this;\n\n                    return {\n                        fn: function fn() {\n                            if (_this6.props.conversation) {\n                                _this6.props.conversation.destroy();\n                                _this6.props.conversation = null;\n                            }\n                            if (_this6.props.contactDetail) {\n                                _this6.props.contactDetail.destroy();\n                                _this6.props.contactDetail = null;\n                            }\n                            _this6.dom.container.style.transform = 'translateX(' + (0 - index * 250) + 'px)';\n                            _this6.dom.container.removeEventListener('transitionend', h);\n                            _this6.dom.container.addEventListener('transitionend', h);\n                            source.mount(target);\n                            var h = function h(e) {\n                                _this6.props.panels.filter(function (p, idx) {\n                                    return idx !== index;\n                                }).forEach(function (p) {\n                                    return p.unmount();\n                                });\n                                _this6.removeEventListener('transitionend', h);\n                            };\n                        }\n                    };\n                }\n            },\n            init: {\n                after: function after() {\n                    this.props.cachedMessageHours = 7 * 24;\n                }\n            },\n            mount: {\n                after: function after() {\n                    var _this7 = this;\n\n                    this.createWidgets();\n                    this.getService().loginService.checkLoginStatus().then(function (isLoggedIn) {\n                        if (_this7.data.shadowRoot) _this7.props.authPanel.mount(_this7.data.shadowRoot.querySelector('#auth-panel'));else _this7.props.authPanel.mount('#auth-panel');\n                    }).catch(function (err) {\n                        return console.error(err);\n                    });\n                    // this.props.authPanel.mount('#auth-panel');\n                }\n            }\n        };\n    });\n\n    function conv(contact, afterBack) {\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        return w('conversation-advanced', {\n            data: {\n                new: true,\n                contact: contact,\n                fromNumber: options.fromNumber,\n                toNumber: options.toNumber,\n                anchorContent: options.anchorContent\n            },\n            actions: {\n                init: {\n                    after: function after() {\n                        this.props.hourOffset = 3 * 24;\n                    }\n                },\n                mount: {\n                    after: function after() {\n                        var _this8 = this;\n\n                        return accountService.getAccountInfo().then(function (info) {\n                            return _this8.props.fromExtension = info.extensionNumber;\n                        }).then(this.getOutboundCallerID);\n                    }\n                },\n                send: {\n                    method: function method() {\n                        if (this.props.toNumber === this.props.toExtension) {\n                            return rcMessageService.sendPagerMessage(this.props.message, this.props.fromExtension, this.props.toExtension);\n                        } else {\n                            return rcMessageService.sendSMSMessage(this.props.message, this.props.fromNumber, this.props.toNumber);\n                        }\n                    }\n                },\n                queryContacts: {\n                    method: function method() {\n                        var _this9 = this;\n\n                        var dialPadSearchFunctions = dialPadSearchProviders.map(function (provider) {\n                            return provider.search(_this9.props.to);\n                        });\n                        return contactSearchService.query(dialPadSearchFunctions);\n                    }\n                },\n                getOutboundCallerID: {\n                    method: function method() {\n                        return accountService.getPhoneNumber().then(function () {\n                            return accountService.listNumber(\"VoiceFax\", 'SmsSender');\n                        });\n                    }\n                },\n                reachTop: {\n                    method: function method() {\n                        return conversationService.loadContent(this.props.contact, this.props.hourOffset);\n                    }\n                },\n                back: {\n                    after: function after() {\n                        this.unmount();\n                        if (afterBack && typeof afterBack === 'function') afterBack();\n                    }\n                }\n            }\n        });\n    }\n\n    //# sourceURL=rc-phone.html\n\n}());","template":"<div>\n    <div id='phone' class='rc-phone'>\n        <div id=\"auth-panel\"></div>\n        <div id=\"toolbar\"></div>\n        <div class='container' data-info='container'>\n            <div class='panel float-left' id=\"dial-pad\"></div>\n            <div class='panel float-left' id=\"messages-panel\"></div>\n            <div class='panel float-left' id=\"contacts\"></div>\n            <div class='panel float-left' id=\"call-log\"></div>\n            <div class='panel float-left' id=\"conference\"></div>\n        </div>\n        <div class='panel --extra' id=\"call-panel\"></div>\n        <div class='panel --extra' id=\"call-panel-incoming\"></div>\n        <div class='panel --extra' id=\"conversation\"></div>\n        <div class='panel --extra' id=\"contact-detail\"></div>\n        <div class='panel --extra' id=\"notification\"></div>\n    </div>\n</div>","style":"\n    .rc-phone {\n        position: relative;\n        width: 250px;\n        height: 100%;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n        overflow: hidden;\n        margin: 0 auto;\n    }\n\n    .rc-phone > .container {\n        width: 3000px;\n        -webkit-transition: -webkit-transform .1s ease-out;\n        transition: -webkit-transform .1s ease-out;\n        transition: transform .1s ease-out;\n        transition: transform .1s ease-out, -webkit-transform .1s ease-out;\n    }\n    .rc-phone .panel {\n        width: 250px;\n        min-height: 1px;\n    }\n    .rc-phone .panel.--extra {\n        position: absolute;\n        left: 0;\n    }\n","imports":{"scripts":["./bower_components/phoneformat/dist/phone-format-global.js","https://cdnjs.cloudflare.com/ajax/libs/lz-string/1.4.4/lz-string.min.js"],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['time-line-item'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        this.actions = {\n            init: {\n                after: function after() {\n                    this.props.selectedMessage = null;\n                    this.props.content = null;\n                    this.props.contact = null;\n                    this.props.time = null;\n                    this.props.subject = null;\n                    this.props.count = 0;\n                    this.fillData(this.data);\n                }\n            },\n            fillData: {\n                before: function before() {\n                    this.root.style['background-color'] = '#eee';\n                },\n                method: function method(finish, data) {\n                    var _this = this;\n\n                    this.props.content = data;\n                    var time = new Date(data.time);\n                    if (data.type === 'SMS') this.dom.icon.classList.add('icon-uni2487');else if (data.type === 'Voice') this.dom.icon.classList.add('icon-uniAE');else if (data.type === 'Pager') this.dom.icon.classList.add('icon-uniCB');\n                    this.dom.subject.textContent = this.props.subject = data.subject;\n                    data.contact && (this.dom.contact.textContent = this.props.contact = data.contact.displayName);\n                    this.dom.time.textContent = this.props.time = '\\n                ' + (time.getMonth() + 1) + '/' + time.getDate() + ', \\n                ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '\\n                ';\n\n                    if (data.others && data.others.length > 0) {\n                        this.dom['count-wrapper'].classList.remove('display-none');\n                        this.dom.count.textContent = this.props.count = data.others.length;\n                        var currentDate;\n\n                        while (this.dom.collapse.firstChild) {\n                            this.dom.collapse.removeChild(this.dom.collapse.firstChild);\n                        }data.others.forEach(function (content) {\n                            var time = new Date(content.time);\n                            var div = document.createElement('div');\n                            var month = time.getMonth() + 1;\n                            var date = time.getDate();\n                            var calender = date > currentDate ? month + '/' + date + ',' : '';\n                            div.innerHTML = '<div class=\\'timeline-extra clearfix\\'>\\n                            <div class=\\'timeline-extra__content\\'>' + content.subject + '</div>\\n                            <div class=\\'rc-timeline-item__time\\'>\\n                                ' + calender + ' \\n                                ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '\\n                            </div>\\n                        </div>';\n                            div.firstChild.addEventListener('click', function (event) {\n                                event.stopPropagation();\n                                _this.enter(null, content); // null for event\n                            });\n                            currentDate = date;\n                            _this.dom.collapse.appendChild(div.firstChild);\n                        });\n                    }\n                },\n                after: function after(data) {\n                    var _this2 = this;\n\n                    setTimeout(function () {\n                        return _this2.root.style['background-color'] = '#fff';\n                    }, 1000);\n                }\n            },\n            mount: {\n                after: function after() {}\n            },\n            collapse: {\n                after: function after(event) {\n                    event.stopPropagation();\n\n                    // FIXME: double clicks will cause problems\n                    var element = this.dom.collapse;\n                    if (element.classList.contains('--collapsing')) return;\n                    if (!element.classList.contains('--active')) {\n                        var prevWidth = element.style.height;\n                        element.style.height = 'auto';\n                        var endWidth = getComputedStyle(element).height;\n                        element.style.height = prevWidth;\n                        element.offsetWidth; // force repaint\n                        element.style.height = endWidth;\n                        element.classList.add('--collapsing');\n                        element.addEventListener('transitionend', function transitionEnd(event) {\n                            if (event.propertyName == 'height') {\n                                element.style.transition = '';\n                                element.style.height = 'auto';\n                                element.classList.remove('--collapsing');\n                                element.removeEventListener('transitionend', transitionEnd, false);\n                            }\n                        }, false);\n                        element.classList.add('--active');\n                    } else {\n                        element.style.height = getComputedStyle(element).height;\n                        element.offsetWidth; // force repaint\n                        element.style.height = '0px';\n                        element.classList.remove('--active');\n                        element.classList.add('--collapsing');\n                        element.addEventListener('transitionend', function transitionEnd(event) {\n                            if (event.propertyName == 'height') {\n                                element.classList.remove('--collapsing');\n                                element.removeEventListener('transitionend', transitionEnd, false);\n                            }\n                        }, false);\n                    }\n                }\n            },\n            enter: {\n                method: function method(finish, event, message) {\n                    message && (this.props.selectedMessage = message);\n                }\n            }\n        };\n    });\n    //# sourceURL=time-line-item.html\n\n}());","template":"\n    <div class='rc-panel rc-timeline-item' data-event='click:enter'>\n        <div class='rc-timeline-item__content'>\n        <div class='rc-timeline-item__line'>\n            <span class='rc-timeline-item__icon' data-info='icon'></span>\n            <span class='rc-timeline-item__contact' data-info='contact'></span>\n        </div>\n            <div class='rc-timeline-item__time' data-info='time'></div>\n            <div class='rc-timeline-item__subject' data-info='subject'></div>\n        </div>\n        <div    class='rc-timeline-item__count display-none' \n                data-info='count-wrapper'\n                data-event='click:collapse'>\n            <span class='__number' data-info='count'></span>\n            <span class='icon-uni2466'></span>\n        </div>\n        <div data-info='collapse' class='rc-timeline-item__collapse'>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['time-line'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var syncedMessages = [];\n        this.data = {};\n        this.actions = {\n            init: {\n                after: function after() {\n                    this.props.mounted = false;\n                    this.props.latestMessage = null;\n                }\n            },\n            mount: {\n                after: function after() {\n                    if (!this.props.mounted) {\n                        this.fetchData();\n                        this.props.mounted = true;\n                    }\n                }\n            },\n            fetchData: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after(contents) {\n                    var _this = this;\n\n                    this.props.latestMessage = contents[0];\n                    this.dom.loading.classList.add('display-none');\n                    contents.forEach(function (content) {\n                        return _this.addLine(content);\n                    });\n                }\n            },\n            updateTimeline: {\n                after: function after(contents) {\n                    var _this2 = this;\n\n                    // FIXME: The action of combining messages should be in service\n                    contents\n                    // Avoid duplicated notifications\n                    .filter(function (content) {\n                        return syncedMessages.indexOf(content.id) === -1;\n                    }).forEach(function (content) {\n                        if (_this2.props.latestMessage && _this2.props.latestMessage.type === content.type && _this2.props.latestMessage.contact.id === content.contact.id) {\n\n                            _this2.props.latestMessage.others = _this2.props.latestMessage.others || [];\n                            content.others = content.others || [];\n                            content.others.push(_this2.props.latestMessage);\n                            content.others = content.others.concat(_this2.props.latestMessage.others);\n                            _this2.props.latestMessage.widget.unmount();\n                        }\n                        _this2.addLine(content, true);\n                        _this2.props.latestMessage = content;\n                        syncedMessages.push(content.id);\n                    });\n                }\n            },\n            addLine: {\n                after: function after(content, prepend) {\n                    var parent = this;\n                    var item = w('time-line-item', {\n                        data: content,\n                        actions: {\n                            enter: {\n                                after: function after() {\n                                    parent.props.selectedContent = this.props.selectedMessage || this.props.content;\n                                    parent.enterItem();\n                                }\n                            }\n                        }\n                    });\n                    content.widget = item;\n                    item.mount(this.dom.timeline, prepend);\n                }\n            },\n            search: {\n                method: function method(finish) {\n                    return finish();\n                }\n            },\n            focusSearchBox: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {}\n            },\n            blurSearchBox: {\n                method: function method(finish) {\n                    return finish();\n                },\n                after: function after() {}\n            },\n            switchContent: {\n                method: function method() {},\n                after: function after() {}\n            },\n            enterItem: {\n                method: function method() {},\n                after: function after() {}\n            }\n        };\n    });\n    //# sourceURL=time-line.html\n\n}());","template":"\n    <div class='rc-panel rc-timeline'>\n        <div class='rc-panel__header --flat'>\n            <div class='rc-contacts__searchBox'>\n                <input \n                    class='__input' \n                    type='text' \n                    data-info='searchText' \n                    data-event='input:search|focus:focusSearchBox|blur:blurSearchBox'\n                >\n            </div>\n        </div>\n        <div class='rc-panel__content' data-info='content'>\n            <div class='rc-timeline__loading' data-info='loading'>Loading ...</div>\n            <div class='rc-timeline__list' data-info='timeline'>\n                <!-- timeline-item -->\n            </div>\n            <div class='rc-timeline__mask display-none' data-info='mask'></div>\n        </div>\n    </div>\n","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
__w_widgets['tool-bar'] = {"script":"(function () {\n    'use strict';\n\n    w.register(function () {\n        var slideDown = w.transition('slide-down');\n        this.actions = Object.assign(w.action('interaction'), {\n            init: {\n                method: function method() {\n                    this.state = [];\n                    this.itemCount = 0;\n                }\n            },\n            mount: {\n                after: function after() {\n                    var _this = this;\n\n                    slideDown.init(this.dom.menu);\n                    window.addEventListener('click', function (e) {\n                        _this.hideMenu();\n                    }, false);\n                    this.root.addEventListener('click', function (e) {\n                        e.stopPropagation();\n                    });\n                }\n            },\n            adjustMenuButton: {\n                after: function after() {\n                    Array.from(this.dom['toolbar'].childNodes).forEach(function (node) {\n                        if (node.nodeType === 3) node.parentNode.removeChild(node);\n                    });\n                    var mid = Math.floor((Array.from(this.dom['toolbar'].childNodes).length - 1) / 2) + 1;\n                    var target = this.dom['toolbar'].childNodes[mid];\n                    target.parentNode.insertBefore(this.dom['menu-button'], target);\n                }\n            },\n            addItem: {\n                method: function method() {},\n                after: function after(icon, text, direction) {\n                    // use innerHTML here, because content could be image or something else.\n                    var div = document.createElement('div');\n                    var item;\n                    if (this.itemCount > 3) {\n                        var template = '<div class=\\'rc-toolbar__more-item text-center\\'>\\n                                        <button class=\\'rc-button --circle\\'>\\n                                            ' + icon + '\\n                                        </button>\\n                                        <div>' + text + '</div>\\n                                    </div>';\n\n                        div.innerHTML = template;\n                        item = div.childNodes[0];\n                        this.dom['menu'].appendChild(item);\n                    } else {\n                        var template = '<button class=\\'rc-toolbar__item rc-button --ghost rc-icon-switch\\'>\\n                                        ' + icon + '\\n                                    </button>';\n                        div.innerHTML = template;\n                        item = div.childNodes[0];\n                        this.dom['toolbar'].appendChild(item);\n                    }\n                    this.adjustMenuButton();\n                    ++this.itemCount;\n                    return item;\n                }\n            },\n            clickItem: {\n                method: function method(finish, item, event) {\n                    var _this2 = this;\n\n                    if (typeof item === 'number') {} else {\n                        item.addEventListener('click', function () {\n                            event.call(_this2);\n                            _this2.hideMenu();\n                            _this2.state.push(event);\n                        });\n                    }\n                }\n            },\n            pop: {\n                method: function method() {\n                    console.log(this.state);\n                    if (this.state.length > 1) {\n                        this.state.pop(); // current state, no need to call again\n                        this.state[this.state.length - 1].call(this);\n                    }\n                }\n            },\n            toggleMenu: {\n                after: function after() {\n                    slideDown.toggle(this.dom.menu);\n                }\n            },\n            hideMenu: {\n                after: function after() {\n                    slideDown.out(this.dom.menu);\n                }\n            }\n        });\n    });\n    //# sourceURL=toolbar.html\n\n}());","template":"<div class='rc-toolbar'>\n    <div class='rc-toolbar__bar text-center' data-info='toolbar'>\n        <button \n            class='rc-button rc-toolbar__menu-button' \n            data-info='menu-button'\n            data-event='click:toggleMenu'>\n            <span class='icon-ActionButtons_down'></span>\n        </button>\n    </div>\n    <div class='rc-toolbar__panel' data-info='menu'>\n    </div>\n</div>","style":null,"imports":{"scripts":[],"styles":[]},"options":{"scopedStyle":false}};
