{"version":3,"sources":["lib/getWebpackConfig/index.js"],"names":["getWebpackConfig","getBaseConfig","themeFolder","module","rules","enforce","test","loader","use","exclude","options","plugins","includePaths","resolve","process","cwd","outputStyle","optimize","ModuleConcatenationPlugin","env","base","DefinePlugin","NODE_ENV","UglifyJsPlugin","compress","warnings","screw_ie8","comments","sourceMap","devtool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAmFwBA,gB;;AAnFxB;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,aAAT,OAEG;AAAA,MADDC,WACC,QADDA,WACC;;AACD,SAAO;AACLC,YAAQ;AACNC,aAAO,CACL;AACEC,iBAAS,KADX;AAEEC,cAAM,OAFR;AAGEC,gBAAQ;AAHV,OADK,EAML;AACED,cAAM,OADR;AAEEE,aAAK,CACH,cADG,EAEH,eAFG,CAFP;AAMEC,iBAAS;AANX,OANK,EAcL;AACEH,cAAM,SADR;AAEEE,aAAK,CACH,cADG,EAEH,YAFG;AAFP,OAdK,EAqBL;AACEF,cAAM,2BADR;AAEEE,aAAK;AAFP,OArBK,EAyBL;AACEF,cAAM,OADR;AAEEG,iBAAS,OAFX;AAGED,aAAK,CACH,cADG,EAEH,kBAFG;AAHP,OAzBK,EAiCL;AACEF,cAAM,uCADR;AAEEE,aAAK;AAFP,OAjCK,EAqCL;AACEF,cAAM,eADR;AAEEE,aAAK,CACH;AACED,kBAAQ;AADV,SADG,EAIH,yEAJG,EAKH;AACEA,kBAAQ,gBADV;AAEEG,mBAAS;AACPC,qBAAS;AAAA,qBAAM,wBAAN;AAAA;AADF;AAFX,SALG,EAaH;AACEJ,kBAAQ,aADV;AAEEG,mBAAS;AACPE,0BAAc,CAACV,WAAD,EAAc,eAAKW,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,cAA5B,CAAd,CADP;AAEPC,yBAAa;AAFN;AAFX,SAbG;AAFP,OArCK,EA6DL;AACEV,cAAM,QADR;AAEEE,aAAK;AAFP,OA7DK;AADD,KADH;AAqELG,aAAS,CACP,IAAI,kBAAQM,QAAR,CAAiBC,yBAArB,EADO;AArEJ,GAAP;AAyED;;AAGc,SAASlB,gBAAT,QAGZ;AAAA,wBAFDmB,GAEC;AAAA,MAFDA,GAEC,6BAFK,aAEL;AAAA,MADET,OACF;;AACD,MAAMU,OAAOnB,yCACRS,OADQ,EAAb;AAGA,MAAIS,QAAQ,YAAZ,EAA0B;AACxB,sCACKC,IADL;AAEET,0DACKS,KAAKT,OADV,IAEE,IAAI,kBAAQU,YAAZ,CAAyB;AACvB,uBAAe;AACbC,oBAAU,yBAAe,YAAf;AADG;AADQ,OAAzB,CAFF,EAOE,IAAI,kBAAQL,QAAR,CAAiBM,cAArB,CAAoC;AAClCC,kBAAU;AACRC,oBAAU,KADF;AAERC,qBAAW;AAFH,SADwB;AAKlCC,kBAAU,KALwB;AAMlCC,mBAAW;AANuB,OAApC,CAPF;AAFF;AAmBD;AACD,oCACKR,IADL;AAEES,aAAS,mBAFX;AAGElB,wDACKS,KAAKT,OADV,IAEE,IAAI,kBAAQU,YAAZ,CAAyB;AACvB,qBAAe;AACbC,kBAAU,yBAAe,aAAf;AADG;AADQ,KAAzB,CAFF;AAHF;AAYD","file":"index.js","sourcesContent":["import autoprefixer from 'autoprefixer';\r\nimport path from 'path';\r\nimport webpack from 'webpack';\r\n\r\nfunction getBaseConfig({\r\n  themeFolder,\r\n}) {\r\n  return {\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: 'pre',\r\n          test: /\\.js$/,\r\n          loader: 'source-map-loader',\r\n        },\r\n        {\r\n          test: /\\.js$/,\r\n          use: [\r\n            'babel-loader',\r\n            'locale-loader',\r\n          ],\r\n          exclude: /node_modules/,\r\n        },\r\n        {\r\n          test: /\\.css$/i,\r\n          use: [\r\n            'style-loader',\r\n            'css-loader',\r\n          ],\r\n        },\r\n        {\r\n          test: /\\.woff|\\.woff2|.eot|\\.ttf/,\r\n          use: 'url-loader?limit=15000&publicPath=./&name=fonts/[name]_[hash].[ext]',\r\n        },\r\n        {\r\n          test: /\\.svg/,\r\n          exclude: /fonts/,\r\n          use: [\r\n            'babel-loader',\r\n            'react-svg-loader',\r\n          ],\r\n        },\r\n        {\r\n          test: /\\.png|\\.jpg|\\.gif|fonts(\\/|\\\\).*\\.svg/,\r\n          use: 'url-loader?limit=20000&publicPath=./&name=images/[name]_[hash].[ext]',\r\n        },\r\n        {\r\n          test: /\\.sass|\\.scss/,\r\n          use: [\r\n            {\r\n              loader: 'style-loader',\r\n            },\r\n            'css-loader?modules&localIdentName=[path]_[name]_[local]_[hash:base64:5]',\r\n            {\r\n              loader: 'postcss-loader',\r\n              options: {\r\n                plugins: () => [\r\n                  autoprefixer\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              loader: 'sass-loader',\r\n              options: {\r\n                includePaths: [themeFolder, path.resolve(process.cwd(), 'node_modules')],\r\n                outputStyle: 'expanded'\r\n              }\r\n            }\r\n          ],\r\n        },\r\n        {\r\n          test: /\\.ogg$/,\r\n          use: 'file-loader?publicPath=./&name=audio/[name]_[hash].[ext]',\r\n        },\r\n      ],\r\n    },\r\n    plugins: [\r\n      new webpack.optimize.ModuleConcatenationPlugin()\r\n    ],\r\n  };\r\n}\r\n\r\n\r\nexport default function getWebpackConfig({\r\n  env = 'development',\r\n  ...options,\r\n}) {\r\n  const base = getBaseConfig({\r\n    ...options,\r\n  });\r\n  if (env === 'production') {\r\n    return {\r\n      ...base,\r\n      plugins: [\r\n        ...base.plugins,\r\n        new webpack.DefinePlugin({\r\n          'process.env': {\r\n            NODE_ENV: JSON.stringify('production'),\r\n          },\r\n        }),\r\n        new webpack.optimize.UglifyJsPlugin({\r\n          compress: {\r\n            warnings: false,\r\n            screw_ie8: true,\r\n          },\r\n          comments: false,\r\n          sourceMap: true,\r\n        }),\r\n      ],\r\n    };\r\n  }\r\n  return {\r\n    ...base,\r\n    devtool: 'inline-source-map',\r\n    plugins: [\r\n      ...base.plugins,\r\n      new webpack.DefinePlugin({\r\n        'process.env': {\r\n          NODE_ENV: JSON.stringify('development'),\r\n        },\r\n      }),\r\n    ],\r\n  };\r\n}\r\n"]}