{"version":3,"sources":["lib/extractAnnotations/index.js"],"names":["extractAnnotations","content","annotationRegExp","annotations","match","exec","set","JSON","parse","replace"],"mappings":";;;;;;;;;;kBAAwBA,kB;;;;AAAT,SAASA,kBAAT,CAA4BC,OAA5B,EAAqC;AAClD,MAAMC,mBAAmB,8CAAzB;AACA,MAAMC,cAAc,mBAApB;AACA,MAAIC,cAAJ;AACA;AACA,SAAO,CAACA,QAAQF,iBAAiBG,IAAjB,CAAsBJ,OAAtB,CAAT,MAA6C,IAApD,EAA0D;AACxDE,gBAAYG,GAAZ,CAAgBC,KAAKC,KAAL,CAAWJ,MAAM,CAAN,CAAX,CAAhB,EAAsCG,KAAKC,KAAL,CAAWJ,MAAM,CAAN,CAAX,CAAtC;AACD;AACD,SAAO;AACLH,aAASA,QAAQQ,OAAR,CAAgBP,gBAAhB,EAAkC,EAAlC,CADJ;AAELC;AAFK,GAAP;AAID","file":"index.js","sourcesContent":["export default function extractAnnotations(content) {\n  const annotationRegExp = /\\/\\/ @key: @#@(.*)@#@.*?@source: @#@(.*)@#@/g;\n  const annotations = new Map();\n  let match;\n  /* eslint { 'no-cond-assign': 0 } */\n  while ((match = annotationRegExp.exec(content)) !== null) {\n    annotations.set(JSON.parse(match[1]), JSON.parse(match[2]));\n  }\n  return {\n    content: content.replace(annotationRegExp, ''),\n    annotations\n  };\n}\n"]}