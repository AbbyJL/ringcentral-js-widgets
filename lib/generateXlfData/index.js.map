{"version":3,"sources":["lib/generateXlfData/index.js"],"names":["generateXlfData","generateBaseData","allLocales","data","locale","_declaration","_attributes","version","xliff","xmlns","localeData","sourceLocale","supportedLocales","sourceFolder","exportType","isFull","toLowerCase","onlyTranslated","filter","jsonData","result","folderPath","folderData","sourceFile","files","targetFile","fileName","file","original","path","relative","join","transUnits","key","get","source","value","unit","id","_text","target","push","diff","length","datatype","body","xlfData","xml","json2xml","compact","spaces"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport xml from 'xml-js';\nimport { reduce, forEach } from 'ramda';\n\n\nfunction generateBaseData(allLocales) {\n  return reduce(\n    (data, locale) => {\n      data[locale] = {\n        _declaration: {\n          _attributes: {\n            version: '1.0',\n          }\n        },\n        xliff: {\n          _attributes: {\n            version: '1.2',\n            xmlns: 'urn:oasis:names:tc:xliff:document:1.2',\n          },\n        },\n      };\n      return data;\n    },\n    {},\n    allLocales,\n  );\n}\n\nexport default function generateXlfData({\n  localeData,\n  sourceLocale,\n  supportedLocales,\n  sourceFolder,\n  exportType,\n}) {\n  const isFull = exportType.toLowerCase() === 'full';\n  const onlyTranslated = exportType.toLowerCase() === 'translated';\n  const allLocales = supportedLocales.filter(locale => locale !== sourceLocale);\n\n  const jsonData = reduce(\n    (result, folderPath) => {\n      const folderData = localeData[folderPath];\n      const sourceFile = folderData.files[sourceLocale];\n      if (sourceFile) {\n        forEach(\n          (locale) => {\n            if (locale !== sourceLocale) {\n              const targetFile = folderData.files[locale];\n              const fileName = (targetFile && targetFile.file) || `${locale}.js`;\n              const original = path.relative(\n                sourceFolder,\n                path.join(folderData.path, fileName),\n              );\n              const transUnits = reduce(\n                (transUnits, [key]) => {\n                  if (onlyTranslated) {\n                    if (\n                      targetFile &&\n                      targetFile.data.get(key) &&\n                      (\n                        !targetFile.data.get(key).source ||\n                        targetFile.data.get(key).source === sourceFile.data.get(key).value\n                      )\n                    ) {\n                      const unit = {\n                        _attributes: {\n                          id: `[${key}]`,\n                        },\n                        source: {\n                          _text: sourceFile.data.get(key).value,\n                        },\n                        target: {\n                          _text: targetFile.data.get(key).value\n                        },\n                      };\n                      transUnits.push(unit);\n                    }\n                  } else {\n                    const diff = (\n                      !targetFile ||\n                      !targetFile.data.get(key) ||\n                      (targetFile.data.get(key).source &&\n                        targetFile.data.get(key).source !== sourceFile.data.get(key).value)\n                    );\n                    if (!onlyTranslated && diff || isFull) {\n                      const unit = {\n                        _attributes: {\n                          id: `[${key}]`,\n                        },\n                        source: {\n                          _text: sourceFile.data.get(key).value,\n                        },\n                        target: {\n                          _text: diff ?\n                            sourceFile.data.get(key).value :\n                            targetFile.data.get(key).value\n                        },\n                      };\n                      transUnits.push(unit);\n                    }\n                  }\n                  return transUnits;\n                },\n                [],\n                sourceFile.data,\n              );\n              if (transUnits.length) {\n                const unit = {\n                  _attributes: {\n                    original,\n                    'source-language': sourceLocale,\n                    'target-language': locale,\n                    datatype: 'plaintext',\n                  },\n                  body: {\n                    'trans-unit': transUnits,\n                  },\n                };\n                if (!result[locale].xliff.file) {\n                  result[locale].xliff.file = [];\n                }\n                result[locale].xliff.file.push(unit);\n              }\n            }\n          },\n          supportedLocales,\n        );\n      }\n      return result;\n    },\n    generateBaseData(allLocales),\n    Object.keys(localeData),\n  );\n  return reduce(\n    (xlfData, locale) => {\n      xlfData[locale] = xml.json2xml(jsonData[locale], { compact: true, spaces: 4 });\n      return xlfData;\n    },\n    {},\n    allLocales,\n  );\n}\n"]}