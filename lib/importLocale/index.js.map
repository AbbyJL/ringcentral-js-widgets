{"version":3,"sources":["lib/importLocale/index.js"],"names":["importLocale","writeFiles","localeData","sourceFolder","sourceLocale","folderPath","locale","targetData","files","ast","code","annotations","result","key","value","push","join","output","fs","writeFileSync","path","resolve","file","mergeTranslationData","translations","sourceData","relativePath","relative","data","newData","has","get","source","set","console","log","chalk","red","fileName","filePath","dirname","originalData","translatedData","content","sourceType","defaultExport","item","type","program","body","properties","prop","entry","extra","raw","rawValue","declaration","defaultConfig","localizationFolder","supportedLocales","Error","mergedData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBAsLwBA,Y;;AAtLxB;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,UAAT,OAIG;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,YACC,QADDA,YACC;;AACD,sBACE,UAACC,UAAD,EAAgB;AACd,wBACE,UAACC,MAAD,EAAY;AACV,UAAIA,WAAWF,YAAf,EAA6B;AAC3B;AACA,YAAMG,aAAaL,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAnB;;AAF2B,wBAGV,8BAASC,WAAWE,GAApB,CAHU;AAAA,YAGnBC,IAHmB,aAGnBA,IAHmB;;AAI3B,YAAMC,cAAc,mBAClB,UAACC,MAAD,SAA0B;AAAA;AAAA,cAAhBC,GAAgB;AAAA,cAAXC,KAAW;;AACxBF,iBAAOG,IAAP,kBACiB,yBAAeF,GAAf,CADjB,wBACuD,yBAAeC,KAAf,CADvD;AAGA,iBAAOF,MAAP;AACD,SANiB,EAOlB,EAPkB,EAQlBL,WAAWI,WARO,EASlBK,IATkB,CASb,IATa,CAApB;AAUA,YAAMC,SAAYP,IAAZ,YAAuBC,WAAvB,OAAN;AACAO,0BAAGC,aAAH,CAAiBC,eAAKC,OAAL,CAAalB,YAAb,EAA2BE,UAA3B,EAAuCE,WAAWe,IAAlD,CAAjB,EAA0EL,MAA1E;AACD;AACF,KAnBH,EAoBE,oBAAYf,WAAWG,UAAX,EAAuBG,KAAnC,CApBF;AAsBD,GAxBH,EAyBE,oBAAYN,UAAZ,CAzBF;AA2BD;;AAED,SAASqB,oBAAT,QAKG;AAAA,MAJDrB,UAIC,SAJDA,UAIC;AAAA,iCAHDsB,YAGC;AAAA,MAHDA,YAGC,sCAHc,EAGd;AAAA,MAFDrB,YAEC,SAFDA,YAEC;AAAA,MADDC,YACC,SADDA,YACC;;AACD;AACA,sBACE,UAACC,UAAD,EAAgB;AACd,wBACE,UAACC,MAAD,EAAY;AACV,UAAIA,WAAWF,YAAf,EAA6B;AAC3B,YAAMG,aAAaL,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAnB;AACA,YAAMmB,aAAavB,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BJ,YAA7B,CAAnB;AACA,YAAMsB,eAAeN,eAAKO,QAAL,CACnBxB,YADmB,EAEnBiB,eAAKC,OAAL,CAAahB,UAAb,EAAyBE,WAAWe,IAApC,CAFmB,CAArB;AAIAf,mBAAWqB,IAAX,GAAkB,mBAChB,UAACC,OAAD,SAA2B;AAAA;AAAA,cAAhBhB,GAAgB;AAAA,cAAXC,KAAW;;AACzB,cAAIW,WAAWG,IAAX,CAAgBE,GAAhB,CAAoBjB,GAApB,CAAJ,EAA8B;AAC5B,gBAAIY,WAAWG,IAAX,CAAgBG,GAAhB,CAAoBlB,GAApB,EAAyBC,KAAzB,KAAmCA,MAAMkB,MAA7C,EAAqD;AACnDH,sBAAQI,GAAR,CAAYpB,GAAZ,EAAiBC,KAAjB;AACD,aAFD,MAEO;AACLoB,sBAAQC,GAAR,eAAwBC,gBAAMC,GAAN,CAAU,UAAV,CAAxB,gBAAuDxB,GAAvD,oBAAuEa,YAAvE;AACD;AACF,WAND,MAMO;AACLQ,oBAAQC,GAAR,eAAwBC,gBAAMC,GAAN,CAAU,UAAV,CAAxB,gBAAuDxB,GAAvD,oBAAuEa,YAAvE;AACD;AACD,iBAAOG,OAAP;AACD,SAZe,EAahB,mBAbgB,EAchBtB,WAAWqB,IAdK,CAAlB;AAgBD;AACF,KA1BH,EA2BE,oBAAY1B,WAAWG,UAAX,EAAuBG,KAAnC,CA3BF;AA6BD,GA/BH,EAgCE,oBAAYN,UAAZ,CAhCF;;AAmCA;AACA,sBACE,UAACI,MAAD,EAAY;AACV,wBACE,UAACgC,QAAD,EAAc;AACZ,UAAMC,WAAWnB,eAAKC,OAAL,CAAalB,YAAb,EAA2BmC,QAA3B,CAAjB;AACA,UAAMjC,aAAae,eAAKoB,OAAL,CAAaD,QAAb,CAAnB;;AAEA,UAAIrC,WAAWG,UAAX,KAA0BH,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BJ,YAA7B,CAA9B,EAA0E;AACxE,YAAMqB,aAAavB,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BJ,YAA7B,EAA2CwB,IAA9D;AACA,YAAI,CAAC1B,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAL,EAA2C;AACzCJ,qBAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,IAAuC;AACrCgB,kBAAS,4BAAahB,MAAb,CAAT;AADqC,WAAvC;AAGD;AACD,YAAI,CAACJ,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCsB,IAA1C,EAAgD;AAC9C1B,qBAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCsB,IAArC,GAA4C,mBAA5C;AACD;AACD,YAAMa,eAAevC,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCsB,IAA1D;AACA,YAAMc,iBAAiBlB,aAAalB,MAAb,EAAqBgC,QAArB,CAAvB;AACA,4BACE,UAACzB,GAAD,EAAS;AACP,cAAI,CAACY,WAAWK,GAAX,CAAejB,GAAf,CAAL,EAA0B;AACxBqB,oBAAQC,GAAR,eAAwBC,gBAAMC,GAAN,CAAU,QAAV,CAAxB,iBAAsDxB,GAAtD,qBAAuEyB,QAAvE;AACA;AACD;AACD,cAAIb,WAAWM,GAAX,CAAelB,GAAf,EAAoBC,KAApB,KAA8B4B,eAAe7B,GAAf,EAAoBmB,MAAtD,EAA8D;AAC5DE,oBAAQC,GAAR,eAAwBC,gBAAMC,GAAN,CAAU,QAAV,CAAxB,iBAAsDxB,GAAtD,qBAAuEyB,QAAvE;AACA;AACD;AACDG,uBAAaR,GAAb,CAAiBpB,GAAjB,6BACK6B,eAAe7B,GAAf,CADL;AAEEA;AAFF;AAID,SAdH,EAeE,oBAAY6B,cAAZ,CAfF;AAiBD;AACF,KAnCH,EAoCE,oBAAYlB,aAAalB,MAAb,CAAZ,CApCF;AAsCD,GAxCH,EAyCE,oBAAYkB,YAAZ,CAzCF;;AA4CA;AACA,sBACE,UAACnB,UAAD,EAAgB;AACd,wBACE,UAACC,MAAD,EAAY;AACV,UAAIA,WAAWF,YAAf,EAA6B;AAC3B,YAAMG,aAAaL,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAnB;AACA,YAAMmB,aAAavB,WAAWG,UAAX,EAAuBG,KAAvB,CAA6BJ,YAA7B,CAAnB;AACAG,mBAAWE,GAAX,GAAiB,oBAAMgB,WAAWkB,OAAjB,EAA0B,EAAEC,YAAY,QAAd,EAA1B,CAAjB;AACArC,mBAAWI,WAAX,GAAyB,mBAAzB;;AAEA,YAAMkC,gBAAgB,iBACpB;AAAA,iBAAQC,KAAKC,IAAL,KAAc,0BAAtB;AAAA,SADoB,EAEpBxC,WAAWE,GAAX,CAAeuC,OAAf,CAAuBC,IAFH,CAAtB;AAIA,YAAMC,aAAa,mBACjB,UAACC,IAAD,EAAU;AACR,cAAMtC,MAAMsC,KAAKtC,GAAL,CAASkC,IAAT,KAAkB,kBAAlB,SACN,8BAASI,KAAKtC,GAAd,EAAmBH,IADb,SAEV,8BAASyC,KAAKtC,GAAd,EAAmBH,IAFrB;AAGA,cAAM0C,QAAQ7C,WAAWqB,IAAX,CAAgBG,GAAhB,CAAoBlB,GAApB,CAAd;AACA,cAAIuC,SAASA,MAAMtC,KAAnB,EAA0B;AACxBqC,iBAAKrC,KAAL,GAAa;AACXiC,oBAAM,eADK;AAEXjC,qBAAOsC,MAAMtC,KAFF;AAGXuC,qBAAO;AACL;AACAC,qBAAK,yBAAeF,MAAMtC,KAArB,CAFA;AAGLyC,0BAAUH,MAAMtC;AAHX;AAHI,aAAb;AASAP,uBAAWI,WAAX,CAAuBsB,GAAvB,CAA2BpB,GAA3B,EAAgCY,WAAWG,IAAX,CAAgBG,GAAhB,CAAoBlB,GAApB,EAAyBC,KAAzD;AACA,mBAAO,IAAP;AACD;AACD,iBAAO,KAAP;AACD,SApBgB,EAqBjB+B,cAAcW,WAAd,CAA0BN,UArBT,CAAnB;AAuBAL,sBAAcW,WAAd,CAA0BN,UAA1B,GAAuCA,UAAvC;AACD;AACF,KArCH,EAsCE,oBAAYhD,WAAWG,UAAX,EAAuBG,KAAnC,CAtCF;AAwCD,GA1CH,EA2CE,oBAAYN,UAAZ,CA3CF;AA6CA,SAAOA,UAAP;AACD;;AAEc,SAASF,YAAT,GAKP;AAAA,kFAAJ,EAAI;AAAA,iCAJNG,YAIM;AAAA,MAJNA,YAIM,sCAJSsD,wBAActD,YAIvB;AAAA,oCAHNuD,kBAGM;AAAA,MAHNA,kBAGM,yCAHeD,wBAAcC,kBAG7B;AAAA,iCAFNtD,YAEM;AAAA,MAFNA,YAEM,sCAFSqD,wBAAcrD,YAEvB;AAAA,MADNuD,gBACM,SADNA,gBACM;;AACN,MAAI,CAACA,gBAAL,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;AACD,MAAM1D,aAAa,iCAAkB;AACnCC,8BADmC;AAEnCC,8BAFmC;AAGnCuD;AAHmC,GAAlB,CAAnB;AAKA,MAAMnC,eAAe,2BAAY;AAC/BkC,0CAD+B;AAE/BC;AAF+B,GAAZ,CAArB;AAIA,MAAME,aAAatC,qBAAqB;AACtCrB,0BADsC;AAEtCsB,8BAFsC;AAGtCrB,8BAHsC;AAItCC;AAJsC,GAArB,CAAnB;AAMAH,aAAW;AACTC,gBAAY2D,UADH;AAET1D,8BAFS;AAGTC;AAHS,GAAX;AAKD","file":"index.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { reduce, filter, forEach, find } from 'ramda';\nimport { parse } from 'babylon';\nimport generate from 'babel-generator';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\n\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport readXlfData from '../readXlfData';\n\nfunction writeFiles({\n  localeData,\n  sourceFolder,\n  sourceLocale,\n}) {\n  forEach(\n    (folderPath) => {\n      forEach(\n        (locale) => {\n          if (locale !== sourceLocale) {\n            // write file\n            const targetData = localeData[folderPath].files[locale];\n            const { code } = generate(targetData.ast);\n            const annotations = reduce(\n              (result, [key, value]) => {\n                result.push(\n                  `// @key: @#@${JSON.stringify(key)}@#@ @source: @#@${JSON.stringify(value)}@#@`\n                );\n                return result;\n              },\n              [],\n              targetData.annotations,\n            ).join('\\n');\n            const output = `${code}\\n\\n${annotations}\\n`;\n            fs.writeFileSync(path.resolve(sourceFolder, folderPath, targetData.file), output);\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n}\n\nfunction mergeTranslationData({\n  localeData,\n  translations = {},\n  sourceFolder,\n  sourceLocale,\n}) {\n  // clean up original Data\n  forEach(\n    (folderPath) => {\n      forEach(\n        (locale) => {\n          if (locale !== sourceLocale) {\n            const targetData = localeData[folderPath].files[locale];\n            const sourceData = localeData[folderPath].files[sourceLocale];\n            const relativePath = path.relative(\n              sourceFolder,\n              path.resolve(folderPath, targetData.file),\n            );\n            targetData.data = reduce(\n              (newData, [key, value]) => {\n                if (sourceData.data.has(key)) {\n                  if (sourceData.data.get(key).value === value.source) {\n                    newData.set(key, value);\n                  } else {\n                    console.log(`[locale] ${chalk.red('{Delete}')} Key: '${key}', File: '${relativePath}', Reason: Source value changed.`);\n                  }\n                } else {\n                  console.log(`[locale] ${chalk.red('{Delete}')} Key: '${key}', File: '${relativePath}', Reason: Source no longer exist.`);\n                }\n                return newData;\n              },\n              new Map(),\n              targetData.data,\n            );\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n\n  // merge in translations\n  forEach(\n    (locale) => {\n      forEach(\n        (fileName) => {\n          const filePath = path.resolve(sourceFolder, fileName);\n          const folderPath = path.dirname(filePath);\n\n          if (localeData[folderPath] && localeData[folderPath].files[sourceLocale]) {\n            const sourceData = localeData[folderPath].files[sourceLocale].data;\n            if (!localeData[folderPath].files[locale]) {\n              localeData[folderPath].files[locale] = {\n                file: `${formatLocale(locale)}.js`\n              };\n            }\n            if (!localeData[folderPath].files[locale].data) {\n              localeData[folderPath].files[locale].data = new Map();\n            }\n            const originalData = localeData[folderPath].files[locale].data;\n            const translatedData = translations[locale][fileName];\n            forEach(\n              (key) => {\n                if (!sourceData.has(key)) {\n                  console.log(`[locale] ${chalk.red('{Skip}')} Key: '[${key}]', File: '${fileName}', Reason: Source no longer exist.`);\n                  return;\n                }\n                if (sourceData.get(key).value !== translatedData[key].source) {\n                  console.log(`[locale] ${chalk.red('{Skip}')} Key: '[${key}]', File: '${fileName}', Reason: Source value changed.`);\n                  return;\n                }\n                originalData.set(key, {\n                  ...translatedData[key],\n                  key,\n                });\n              },\n              Object.keys(translatedData),\n            );\n          }\n        },\n        Object.keys(translations[locale]),\n      );\n    },\n    Object.keys(translations),\n  );\n\n  // Update ast and generate code\n  forEach(\n    (folderPath) => {\n      forEach(\n        (locale) => {\n          if (locale !== sourceLocale) {\n            const targetData = localeData[folderPath].files[locale];\n            const sourceData = localeData[folderPath].files[sourceLocale];\n            targetData.ast = parse(sourceData.content, { sourceType: 'module' });\n            targetData.annotations = new Map();\n\n            const defaultExport = find(\n              item => item.type === 'ExportDefaultDeclaration',\n              targetData.ast.program.body,\n            );\n            const properties = filter(\n              (prop) => {\n                const key = prop.key.type === 'MemberExpression' ?\n                  `[${generate(prop.key).code}]` :\n                  generate(prop.key).code;\n                const entry = targetData.data.get(key);\n                if (entry && entry.value) {\n                  prop.value = {\n                    type: 'StringLiteral',\n                    value: entry.value,\n                    extra: {\n                      // generate desired raw to by pass babel jsesc use\n                      raw: JSON.stringify(entry.value),\n                      rawValue: entry.value,\n                    }\n                  };\n                  targetData.annotations.set(key, sourceData.data.get(key).value);\n                  return true;\n                }\n                return false;\n              },\n              defaultExport.declaration.properties,\n            );\n            defaultExport.declaration.properties = properties;\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n  return localeData;\n}\n\nexport default function importLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n  const translations = readXlfData({\n    localizationFolder,\n    supportedLocales,\n  });\n  const mergedData = mergeTranslationData({\n    localeData,\n    translations,\n    sourceFolder,\n    sourceLocale,\n  });\n  writeFiles({\n    localeData: mergedData,\n    sourceFolder,\n    sourceLocale,\n  });\n}\n"]}