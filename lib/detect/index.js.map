{"version":3,"sources":["lib/detect/index.js"],"names":["detect","find7DigitNumbers","input","countryCode","output","regex","match","exec","isValid","phoneNumber","hasPlus","length","push","country","phone","startsAt","index","endsAt","byStartsAt","a","b","areaCode","sevenDigits","ref","slice","item","entry","sort"],"mappings":";;;;;kBAkCwBA,M;;AAlCxB;;AACA;;AACA;;;;;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,WAAlC,EAA+C;AAC7C,MAAMC,SAAS,EAAf;AACA,MAAMC,QAAQ,qDAAd;;AAEA,MAAIC,cAAJ;AACA,KAAG;AACDA,YAAQD,MAAME,IAAN,CAAWL,KAAX,CAAR;AACA,QAAII,KAAJ,EAAW;AAAA,mBAKL,qBAAM,EAAEJ,OAAOI,MAAM,CAAN,CAAT,EAAmBH,wBAAnB,EAAN,CALK;AAAA,UAEPK,OAFO,UAEPA,OAFO;AAAA,UAGPC,WAHO,UAGPA,WAHO;AAAA,UAIPC,OAJO,UAIPA,OAJO;;AAMT,UAAIF,WAAW,CAACE,OAAZ,IAAuBD,YAAYE,MAAZ,KAAuB,CAAlD,EAAqD;AACnDP,eAAOQ,IAAP,CAAY;AACVC,mBAASV,WADC;AAEVW,iBAAOL,WAFG;AAGVM,oBAAUT,MAAMU,KAHN;AAIVC,kBAAQX,MAAMU,KAAN,GAAcV,MAAM,CAAN,EAASK;AAJrB,SAAZ;AAMD;AACF;AACF,GAjBD,QAiBSL,KAjBT;AAkBA,SAAOF,MAAP;AACD;;AAED,SAASc,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,SAAOD,EAAEJ,QAAF,GAAaK,EAAEL,QAAtB;AACD;;AAEc,SAASf,MAAT,OAA8D;AAAA,MAA5CE,KAA4C,QAA5CA,KAA4C;AAAA,8BAArCC,WAAqC;AAAA,MAArCA,WAAqC,oCAAvB,IAAuB;AAAA,2BAAjBkB,QAAiB;AAAA,MAAjBA,QAAiB,iCAAN,EAAM;;AAC3E,MAAMjB,SAAS,wCAAiBF,KAAjB,EAAwBC,WAAxB,CAAf;AACA,MACE,CAACA,gBAAgB,IAAhB,IAAwBA,gBAAgB,IAAzC,KACAkB,SAASV,MAAT,KAAoB,CAFtB,EAGE;AACA,QAAMW,cAAcrB,kBAAkBC,KAAlB,EAAyBC,WAAzB,CAApB;AACA,QAAImB,YAAYX,MAAhB,EAAwB;AACtB;AACA,UAAMY,MAAMnB,OAAOoB,KAAP,EAAZ;AACA,0BACE,UAACC,IAAD,EAAU;AACR,YAAI,CAAC,iBACH;AAAA,iBACEC,MAAMX,QAAN,IAAkBU,KAAKV,QAAvB,IACAW,MAAMT,MAAN,IAAgBQ,KAAKV,QAFvB;AAAA,SADG,EAKHQ,GALG,CAAL,EAMG;AACDnB,iBAAOQ,IAAP,CAAYa,IAAZ;AACD;AACF,OAXH,EAYEH,WAZF;AAcD;AACF;AACD,SAAOlB,OAAOuB,IAAP,CAAYT,UAAZ,CAAP;AACD","file":"index.js","sourcesContent":["import { findPhoneNumbers } from 'libphonenumber-js';\nimport { forEach, find } from 'ramda';\nimport parse from '../parse';\n\nfunction find7DigitNumbers(input, countryCode) {\n  const output = [];\n  const regex = /(?:^|[^\\d\\w#/])((?:\\d[-\\s]{0,1}){7,12}(?=[^\\d]|$))/g;\n\n  let match;\n  do {\n    match = regex.exec(input);\n    if (match) {\n      const {\n        isValid,\n        phoneNumber,\n        hasPlus,\n      } = parse({ input: match[0], countryCode });\n      if (isValid && !hasPlus && phoneNumber.length === 7) {\n        output.push({\n          country: countryCode,\n          phone: phoneNumber,\n          startsAt: match.index,\n          endsAt: match.index + match[0].length,\n        });\n      }\n    }\n  } while (match);\n  return output;\n}\n\nfunction byStartsAt(a, b) {\n  return a.startsAt - b.startsAt;\n}\n\nexport default function detect({ input, countryCode = 'US', areaCode = '' }) {\n  const output = findPhoneNumbers(input, countryCode);\n  if (\n    (countryCode === 'US' || countryCode === 'CA') &&\n    areaCode.length === 3\n  ) {\n    const sevenDigits = find7DigitNumbers(input, countryCode);\n    if (sevenDigits.length) {\n      // keep a reference of the original output to search in\n      const ref = output.slice();\n      forEach(\n        (item) => {\n          if (!find(\n            entry => (\n              entry.startsAt <= item.startsAt &&\n              entry.endsAt >= item.startsAt\n            ),\n            ref,\n          )) {\n            output.push(item);\n          }\n        },\n        sevenDigits,\n      );\n    }\n  }\n  return output.sort(byStartsAt);\n}\n"]}