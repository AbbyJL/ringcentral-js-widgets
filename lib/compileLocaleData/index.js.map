{"version":3,"sources":["lib/compileLocaleData/index.js"],"names":["findLocaleFiles","compileData","compileLocaleData","folderPath","isLocaleFile","fs","readdirSync","sourceLocale","supportedLocales","data","file","locale","replace","indexOf","rawContent","readFileSync","path","resolve","files","sourceFolder","dirname"],"mappings":";;;;;;;;;;QAQgBA,e,GAAAA,e;QAOAC,W,GAAAA,W;kBAwBQC,iB;;AAvCxB;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,SAASF,eAAT,CAAyBG,UAAzB,EAAqC;AAC1C,SAAO,mBACLC,sBADK,EAELC,kBAAGC,WAAH,CAAeH,UAAf,CAFK,CAAP;AAID;;AAEM,SAASF,WAAT,OAAqE;AAAA,MAA9CE,UAA8C,QAA9CA,UAA8C;AAAA,MAAlCI,YAAkC,QAAlCA,YAAkC;AAAA,MAApBC,gBAAoB,QAApBA,gBAAoB;;AAC1E,SAAO,mBACL,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAMC,SAAS,4BAAaD,KAAKE,OAAL,CAAa,eAAb,EAA8B,EAA9B,CAAb,CAAf;AACA,QAAID,WAAWJ,YAAX,IAA2BC,iBAAiBK,OAAjB,CAAyBF,MAAzB,IAAmC,CAAC,CAAnE,EAAsE;AACpE,UAAMG,aAAaT,kBAAGU,YAAH,CAAgBC,eAAKC,OAAL,CAAad,UAAb,EAAyBO,IAAzB,CAAhB,EAAgD,MAAhD,CAAnB;AACAD,WAAKS,KAAL,CAAWP,MAAX;AACED,kBADF;AAEEC,sBAFF;AAGEG;AAHF,SAIK,+BAAgBA,UAAhB,CAJL;AAMD;AACD,WAAOL,IAAP;AACD,GAbI,EAcL;AACEO,UAAMb,UADR;AAEEe,WAAO;AAFT,GAdK,EAkBLlB,gBAAgBG,UAAhB,CAlBK,CAAP;AAoBD;;AAGc,SAASD,iBAAT,QAIZ;AAAA,MAHDiB,YAGC,SAHDA,YAGC;AAAA,MAFDZ,YAEC,SAFDA,YAEC;AAAA,MADDC,gBACC,SADDA,gBACC;;AACD,SAAO,mBACL,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAMP,aAAaa,eAAKC,OAAL,CAAaD,eAAKI,OAAL,CAAaV,IAAb,CAAb,CAAnB;AACAD,SAAKN,UAAL,IAAmBF,YAAY;AAC7BE,4BAD6B;AAE7BI,gCAF6B;AAG7BC;AAH6B,KAAZ,CAAnB;AAKA,WAAOC,IAAP;AACD,GATI,EAUL,EAVK,EAWL,+BAAgBU,YAAhB,CAXK,CAAP;AAaD","file":"index.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { filter, reduce } from 'ramda';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\nimport isLocaleFile from '../isLocaleFile';\nimport findLoaderFiles from '../findLoaderFiles';\nimport parseLocaleFile from '../parseLocaleFile';\n\nexport function findLocaleFiles(folderPath) {\n  return filter(\n    isLocaleFile,\n    fs.readdirSync(folderPath),\n  );\n}\n\nexport function compileData({ folderPath, sourceLocale, supportedLocales }) {\n  return reduce(\n    (data, file) => {\n      const locale = formatLocale(file.replace(/\\.(js|json)$/i, ''));\n      if (locale === sourceLocale || supportedLocales.indexOf(locale) > -1) {\n        const rawContent = fs.readFileSync(path.resolve(folderPath, file), 'utf8');\n        data.files[locale] = {\n          file,\n          locale,\n          rawContent,\n          ...parseLocaleFile(rawContent),\n        };\n      }\n      return data;\n    },\n    {\n      path: folderPath,\n      files: {},\n    },\n    findLocaleFiles(folderPath),\n  );\n}\n\n\nexport default function compileLocaleData({\n  sourceFolder,\n  sourceLocale,\n  supportedLocales,\n}) {\n  return reduce(\n    (data, file) => {\n      const folderPath = path.resolve(path.dirname(file));\n      data[folderPath] = compileData({\n        folderPath,\n        sourceLocale,\n        supportedLocales,\n      });\n      return data;\n    },\n    {},\n    findLoaderFiles(sourceFolder)\n  );\n}\n"]}