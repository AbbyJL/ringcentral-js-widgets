{"version":3,"sources":["lib/findLoaderFiles/index.js"],"names":["findLoaderFiles","folder","fs","statSync","file","isFile","readFileSync","glob","sync"],"mappings":";;;;;kBAWwBA,e;;AAXxB;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;;;;;AAMe,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC9C,SAAO,mBACL;AAAA,WAAQC,kBAAGC,QAAH,CAAYC,IAAZ,EAAkBC,MAAlB,MAA8B,4BAAaH,kBAAGI,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAb,CAAtC;AAAA,GADK,EAELG,eAAKC,IAAL,CAAaP,MAAb,SAFK,CAAP;AAID","file":"index.js","sourcesContent":["import fs from 'fs-extra';\nimport glob from 'glob';\nimport { filter } from 'ramda';\nimport isLoaderFile from '../isLoaderFile';\n\n/**\n * @function\n * @description Return all the loader file paths in the specified folder.\n * @param {String} folder\n * @returns {Promise<String[]>}\n */\nexport default function findLoaderFiles(folder) {\n  return filter(\n    file => fs.statSync(file).isFile() && isLoaderFile(fs.readFileSync(file, 'utf8')),\n    glob.sync(`${folder}/**`),\n  );\n}\n"]}