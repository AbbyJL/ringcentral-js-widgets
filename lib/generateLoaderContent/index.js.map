{"version":3,"sources":["lib/generateLoaderContent/index.js"],"names":["generateLoaderContent","byLocale","a","b","ta","tb","files","chunk","usedLang","cases","sort","map","f","basename","replace","locale","lang","split","padding","code","langDefaultCase","dedent","join"],"mappings":";;;;;;;;;;;;kBAsBwBA,qB;;AAtBxB;;;;AACA;;;;;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,MAAMC,KAAK,4BAAaF,CAAb,CAAX;AACA,MAAMG,KAAK,4BAAaF,CAAb,CAAX;AACA,MAAIC,OAAOC,EAAX,EAAe,OAAO,CAAP;AACf,SAAOD,KAAKC,EAAL,GACL,CADK,GAEL,CAAC,CAFH;AAGD;AACD;;;;;;AAMA;;;;;AAKe,SAASL,qBAAT,EAA+B,yBAA/B,MAGZ;AAAA,MAFDM,KAEC,QAFDA,KAEC;AAAA,wBADDC,KACC;AAAA,MADDA,KACC,8BADO,IACP;;AACD,MAAMC,WAAW,EAAjB;AACA,MAAMC,QAAQH,MAAMI,IAAN,CAAWT,QAAX,EAAqBU,GAArB,CAAyB,UAACC,CAAD,EAAO;AAC5C,QAAMC,WAAWD,EAAEE,OAAF,CAAU,eAAV,EAA2B,EAA3B,CAAjB;AACA,QAAMC,SAAS,4BAAaF,QAAb,CAAf;AACA,QAAMG,OAAOD,OAAOE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAMC,UAAUX,QAAQ,IAAR,GAAe,EAA/B;AACA,QAAIY,0BACMD,OADN,iCACwCL,QADxC,0BAEMK,OAFN,6DAAJ;AAGA,QAAIX,KAAJ,EAAW;AACTY,iHAE6BN,QAF7B,2BAE0DM,IAF1D,6BAGcJ,MAHd,kCAIgBI,IAJhB;AAMD;AACD,QAAIC,kBAAkB,EAAtB;AACA,QAAI,CAACZ,SAASQ,IAAT,CAAL,EAAqB;AACnBR,eAASQ,IAAT,IAAiB,IAAjB;AACAI,8CACUJ,IADV;AAGD;AACD,WAAUI,eAAV,2BACcL,MADd,aAC2BI,IAD3B;AAID,GA3Ba,CAAd;AA4BA,aAAOE,gBAAP,mBAEyBZ,MAAMa,IAAN,CAAW,EAAX,CAFzB;AASD","file":"index.js","sourcesContent":["import dedent from 'dedent';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\n\nfunction byLocale(a, b) {\n  const ta = formatLocale(a);\n  const tb = formatLocale(b);\n  if (ta === tb) return 0;\n  return ta > tb ?\n    1 :\n    -1;\n}\n/**\n * @typedef GLCOptions\n * @property {String[]} files\n * @property {Boolean} [chunk]\n *\n */\n/**\n * @function\n * @description Generate js code for localeLoader according the files listed.\n * @param {GLCOptions} options\n */\nexport default function generateLoaderContent(/** @type {GLCOptions} */ {\n  files,\n  chunk = true,\n}) {\n  const usedLang = {};\n  const cases = files.sort(byLocale).map((f) => {\n    const basename = f.replace(/\\.(js|json)$/i, '');\n    const locale = formatLocale(basename);\n    const lang = locale.split('-')[0];\n    const padding = chunk ? '  ' : '';\n    let code = `\n            ${padding}const data = require('./${basename}');\n            ${padding}resolve(data.__esModule === true ? data.default : data);`;\n    if (chunk) {\n      code = `\n            if (typeof require.ensure === 'function') {\n              require.ensure(['./${basename}'], (require) => {${code}\n              }, '${locale}');\n            } else {${code}\n            }`;\n    }\n    let langDefaultCase = '';\n    if (!usedLang[lang]) {\n      usedLang[lang] = true;\n      langDefaultCase = `\n        case '${lang}':\n      `;\n    }\n    return `${langDefaultCase}\n          case '${locale}': {${code}\n            break;\n          }`;\n  });\n  return dedent`export default function loadLocale(locale) {\n      return new Promise((resolve) => {\n        switch (locale) {${cases.join('')}\n          default:\n            resolve({});\n            break;\n        }\n      });\n    }\\n`;\n}\n"]}