{"version":3,"sources":["lib/OAuthBase/index.js"],"names":["OAuthBase","deps","dep","optional","alert","auth","brand","locale","tabManager","redirectUri","options","_alert","_auth","_brand","_locale","_tabManager","_redirectUri","_reducer","actionTypes","pending","ready","store","dispatch","type","init","initSuccess","callbackUri","refresh","query","_refreshWithCallbackQuery","_loginWithCallbackQuery","console","error","message","accessDenied","internalError","danger","payload","code","access_token","login","accessToken","expiresIn","expires_in","endpointId","endpoint_id","tokenType","token_type","refreshImplicitToken","enumMap","prefix","name","extendedQuery","stringify","force","localeId","currentLocale","ui_options","getLoginUrl","brandId","id","state","btoa","Date","now","display","implicit","isImplicit","prompt","status","oAuthReady","resolve","window","location","href"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from 'ringcentral-integration/lib/RcModule';\r\nimport { prefixEnum } from 'ringcentral-integration/lib/Enum';\r\nimport { Module } from 'ringcentral-integration/lib/di';\r\nimport ensureExist from 'ringcentral-integration/lib/ensureExist';\r\nimport proxify from 'ringcentral-integration/lib/proxy/proxify';\r\n\r\nimport required from 'ringcentral-integration/lib/required';\r\nimport qs from 'qs';\r\nimport url from 'url';\r\n\r\nimport parseCallbackUri from '../parseCallbackUri';\r\nimport baseActionTypes from './baseActionTypes';\r\nimport getOAuthBaseReducer from './getOAuthBaseReducer';\r\nimport oAuthMessages from './oAuthMessages';\r\n\r\n@Module({\r\n  deps: [\r\n    'Auth',\r\n    'Alert',\r\n    'Locale',\r\n    'Brand',\r\n    { dep: 'TabManager', optional: true },\r\n  ],\r\n})\r\nexport default class OAuthBase extends RcModule {\r\n  constructor({\r\n    alert,\r\n    auth,\r\n    brand,\r\n    locale,\r\n    tabManager,\r\n    redirectUri,\r\n    ...options\r\n  }) {\r\n    super({\r\n      ...options,\r\n    });\r\n    this._alert = this::ensureExist(alert, 'alert');\r\n    this._auth = this::ensureExist(auth, 'auth');\r\n    this._brand = this::ensureExist(brand, 'brand');\r\n    this._locale = this::ensureExist(locale, 'locale');\r\n    this._tabManager = tabManager;\r\n    this._redirectUri = this::ensureExist(redirectUri, 'redirectUri');\r\n    this._reducer = getOAuthBaseReducer(this.actionTypes);\r\n  }\r\n\r\n  get _actionTypes() {\r\n    return prefixEnum({ enumMap: baseActionTypes, prefix: this.name });\r\n  }\r\n\r\n  @required\r\n  get name() {\r\n    /* require implementation in descendent */\r\n    return null;\r\n  }\r\n\r\n  _onStateChange() {\r\n    if (\r\n      this.pending &&\r\n      (\r\n        this._auth.ready &&\r\n        this._locale.ready &&\r\n        this._alert.ready &&\r\n        (!this._tabManager || this._tabManager.ready)\r\n      )\r\n    ) {\r\n      this.store.dispatch({\r\n        type: this.actionTypes.init,\r\n      });\r\n      this.store.dispatch({\r\n        type: this.actionTypes.initSuccess,\r\n      });\r\n    }\r\n  }\r\n\r\n  @proxify\r\n  async _handleCallbackUri(callbackUri, refresh = false) {\r\n    try {\r\n      const query = parseCallbackUri(callbackUri);\r\n      if (refresh) {\r\n        await this._refreshWithCallbackQuery(query);\r\n      } else {\r\n        await this._loginWithCallbackQuery(query);\r\n      }\r\n    } catch (error) {\r\n      console.error('oauth error: ', error);\r\n      let message;\r\n      switch (error.message) {\r\n        case 'invalid_request':\r\n        case 'unauthorized_client':\r\n        case 'access_denied':\r\n        case 'unsupported_response_type':\r\n        case 'invalid_scope':\r\n          message = oAuthMessages.accessDenied;\r\n          break;\r\n        case 'server_error':\r\n        case 'temporarily_unavailable':\r\n        default:\r\n          message = oAuthMessages.internalError;\r\n          break;\r\n      }\r\n      this._alert.danger({\r\n        message,\r\n        payload: error,\r\n      });\r\n    }\r\n  }\r\n\r\n  async _loginWithCallbackQuery(query) {\r\n    if (!(query.code || query.access_token)) {\r\n      return;\r\n    }\r\n    await this._auth.login({\r\n      code: query.code,\r\n      accessToken: query.access_token,\r\n      expiresIn: query.expires_in,\r\n      endpointId: query.endpoint_id,\r\n      redirectUri: this.redirectUri,\r\n      tokenType: query.token_type,\r\n    });\r\n  }\r\n\r\n  async _refreshWithCallbackQuery(query) {\r\n    if (!query.access_token) {\r\n      return;\r\n    }\r\n    await this._auth.refreshImplicitToken({\r\n      tokenType: query.token_type,\r\n      accessToken: query.access_token,\r\n      expiresIn: query.expires_in,\r\n      endpointId: query.endpoint_id,\r\n    });\r\n  }\r\n\r\n  @required\r\n  async prepareOAuth() {}\r\n\r\n  @required\r\n  async destroyOAuth() {}\r\n\r\n  @required\r\n  openOAuthPage() {}\r\n\r\n\r\n  get oAuthUri() {\r\n    const extendedQuery = qs.stringify({\r\n      force: true,\r\n      localeId: this._locale.currentLocale,\r\n      ui_options: 'hide_remember_me hide_tos',\r\n    });\r\n    return `${this._auth.getLoginUrl({\r\n      redirectUri: this.redirectUri,\r\n      brandId: this._brand.id,\r\n      state: btoa(Date.now()),\r\n      display: 'page',\r\n      implicit: this._auth.isImplicit,\r\n    })}&${extendedQuery}`;\r\n  }\r\n\r\n  get implictRefreshOAuthUri() {\r\n    return `${this._auth.getLoginUrl({\r\n      redirectUri: this.redirectUri,\r\n      brandId: this._brand.id,\r\n      state: btoa(Date.now()),\r\n      display: 'page',\r\n      prompt: 'none',\r\n      implicit: this._auth.isImplicit,\r\n    })}`;\r\n  }\r\n\r\n  get status() {\r\n    return this.state.status;\r\n  }\r\n\r\n  get oAuthReady() {\r\n    return this.state.oAuthReady;\r\n  }\r\n\r\n  get redirectUri() {\r\n    return url.resolve(window.location.href, this._redirectUri);\r\n  }\r\n}\r\n"]}