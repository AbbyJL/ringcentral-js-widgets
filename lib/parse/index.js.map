{"version":3,"sources":["lib/parse/index.js"],"names":["parse","invalidCharsRegExp","cleanRegex","plusRegex","extensionDelimiter","input","countryCode","result","country","isValid","hasInvalidChars","test","isExtension","isServiceNumber","hasPlus","phoneNumber","extension","cleanInput","replace","startWithPlus","withoutPlus","startWithStar","tokens","split","length"],"mappings":";;;;;kBAOwBA,K;;AAPxB;;AAEA,IAAMC,qBAAqB,gBAA3B;AACA,IAAMC,aAAa,WAAnB;AACA,IAAMC,YAAY,KAAlB;AACA,IAAMC,qBAAqB,OAA3B;;AAEe,SAASJ,KAAT,OAA8C;AAAA,MAA7BK,KAA6B,QAA7BA,KAA6B;AAAA,8BAAtBC,WAAsB;AAAA,MAAtBA,WAAsB,oCAAR,IAAQ;;AAC3D,MAAMC,SAAS;AACbF,gBADa;AAEbG,aAAS,IAFI;AAGbC,aAAS,IAHI;AAIbC,qBAAiBT,mBAAmBU,IAAnB,CAAwBN,KAAxB,CAJJ;AAKbO,iBAAa,KALA;AAMbC,qBAAiB,KANJ;AAObC,aAAS,KAPI;AAQbC,iBAAa,IARA;AASbC,eAAW;AATE,GAAf;AAWA,MAAMC,aAAaZ,MAAMa,OAAN,CAAchB,UAAd,EAA0B,EAA1B,CAAnB;AACA,MAAMiB,gBAAgBF,WAAW,CAAX,MAAkB,GAAxC;AACA,MAAMG,cAAcH,WAAWC,OAAX,CAAmBf,SAAnB,EAA8B,EAA9B,CAApB;AACA,MAAMkB,gBAAgBD,YAAY,CAAZ,MAAmB,GAAzC;AACA,MAAID,iBAAiBE,aAArB,EAAoC;AAClCd,WAAOE,OAAP,GAAiB,KAAjB;AACD,GAFD,MAEO;AACL,QAAMa,SAASF,YAAYG,KAAZ,CAAkBnB,kBAAlB,CAAf;AACA,QAAIiB,aAAJ,EAAmB;AACjB,UAAIC,OAAO,CAAP,KAAaA,OAAO,CAAP,EAAUE,MAA3B,EAAmC;AACjCjB,eAAOM,eAAP,GAAyB,IAAzB;AACAN,eAAOQ,WAAP,SAAyBO,OAAO,CAAP,CAAzB;AACD,OAHD,MAGO;AACLf,eAAOE,OAAP,GAAiB,KAAjB;AACD;AACF,KAPD,MAOO,IAAIU,aAAJ,EAAmB;AACxB,UAAIG,OAAO,CAAP,KAAaA,OAAO,CAAP,EAAUE,MAA3B,EAAmC;AACjCjB,eAAOO,OAAP,GAAiB,IAAjB;AACAP,eAAOQ,WAAP,SAAyBO,OAAO,CAAP,CAAzB;AACAf,eAAOC,OAAP,GAAiB,mCAAYD,OAAOQ,WAAnB,EAAgCT,WAAhC,EAA6CE,OAA7C,IAAwD,IAAzE;AACA,YAAIc,OAAO,CAAP,KAAaA,OAAO,CAAP,EAAUE,MAA3B,EAAmC;AACjCjB,iBAAOS,SAAP,GAAmBM,OAAO,CAAP,CAAnB;AACD;AACF,OAPD,MAOO;AACLf,eAAOE,OAAP,GAAiB,KAAjB;AACD;AACF,KAXM,MAWA,IAAIa,OAAO,CAAP,KAAaA,OAAO,CAAP,EAAUE,MAA3B,EAAmC;AACxC,UAAIF,OAAO,CAAP,EAAUE,MAAV,GAAmB,CAAvB,EAA0B;AACxBjB,eAAOQ,WAAP,GAAqBO,OAAO,CAAP,CAArB;AACAf,eAAOC,OAAP,GAAiB,mCAAYD,OAAOQ,WAAnB,EAAgCT,WAAhC,EAA6CE,OAA7C,IAAwD,IAAzE;AACA,YAAIc,OAAO,CAAP,KAAaA,OAAO,CAAP,EAAUE,MAA3B,EAAmC;AACjCjB,iBAAOS,SAAP,GAAmBM,OAAO,CAAP,CAAnB;AACD;AACF,OAND,MAMO;AACLf,eAAOK,WAAP,GAAqB,IAArB;AACAL,eAAOQ,WAAP,GAAqBO,OAAO,CAAP,CAArB;AACD;AACF,KAXM,MAWA;AACLf,aAAOE,OAAP,GAAiB,KAAjB;AACD;AACF;AACD,SAAOF,MAAP;AACD","file":"index.js","sourcesContent":["import { parseNumber } from 'libphonenumber-js';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst cleanRegex = /[^\\d*+#]/g;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\nexport default function parse({ input, countryCode = 'US' }) {\n  const result = {\n    input,\n    country: null,\n    isValid: true,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n  };\n  const cleanInput = input.replace(cleanRegex, '');\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n  if (startWithPlus && startWithStar) {\n    result.isValid = false;\n  } else {\n    const tokens = withoutPlus.split(extensionDelimiter);\n    if (startWithStar) {\n      if (tokens[1] && tokens[1].length) {\n        result.isServiceNumber = true;\n        result.phoneNumber = `*${tokens[1]}`;\n      } else {\n        result.isValid = false;\n      }\n    } else if (startWithPlus) {\n      if (tokens[0] && tokens[0].length) {\n        result.hasPlus = true;\n        result.phoneNumber = `+${tokens[0]}`;\n        result.country = parseNumber(result.phoneNumber, countryCode).country || null;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isValid = false;\n      }\n    } else if (tokens[0] && tokens[0].length) {\n      if (tokens[0].length > 6) {\n        result.phoneNumber = tokens[0];\n        result.country = parseNumber(result.phoneNumber, countryCode).country || null;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isExtension = true;\n        result.phoneNumber = tokens[0];\n      }\n    } else {\n      result.isValid = false;\n    }\n  }\n  return result;\n}\n"]}