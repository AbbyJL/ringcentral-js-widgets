{"version":3,"sources":["lib/format/index.js"],"names":["format","formatTypes","local","international","e164","phoneNumber","countryCode","areaCode","type","removeExtension","extensionDelimeter","input","number","extension","country","isExtension","isServiceNumber","isValid","hasPlus","isUSCA","withAreaCode","finalType","formattedNumber"],"mappings":";;;;;;kBAWwBA,M;;AAXxB;;AACA;;;;;;AAEA,IAAMC,cAAc;AAClBC,SAAO,OADW;AAElBC,iBAAe,eAFG;AAGlBC,QAAM;AAHY,CAApB;;QAMSH,W,GAAAA,W;AAEM,SAASD,MAAT,OAOZ;AAAA,MANDK,WAMC,QANDA,WAMC;AAAA,8BALDC,WAKC;AAAA,MALDA,WAKC,oCALa,IAKb;AAAA,2BAJDC,QAIC;AAAA,MAJDA,QAIC,iCAJU,EAIV;AAAA,uBAHDC,IAGC;AAAA,MAHDA,IAGC,6BAHMP,YAAYC,KAGlB;AAAA,kCAFDO,eAEC;AAAA,MAFDA,eAEC,wCAFiB,KAEjB;AAAA,mCADDC,kBACC;AAAA,MADDA,kBACC,yCADoB,KACpB;;AAAA,eASG,qBAAM,EAAEC,OAAON,WAAT,EAAsBC,wBAAtB,EAAN,CATH;AAAA,MAEcM,MAFd,UAECP,WAFD;AAAA,MAGCQ,SAHD,UAGCA,SAHD;AAAA,MAICC,OAJD,UAICA,OAJD;AAAA,MAKCC,WALD,UAKCA,WALD;AAAA,MAMCC,eAND,UAMCA,eAND;AAAA,MAOCC,OAPD,UAOCA,OAPD;AAAA,MAQCC,OARD,UAQCA,OARD;;AAWD,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;AACD,MACED,mBACAD,WAFF,EAGE;AACA,WAAOH,MAAP;AACD;AACD,MAAMO,SAASb,gBAAgB,IAAhB,IAAwBA,gBAAgB,IAAvD;AACA,MAAMc,eAAgB,CAACF,OAAD,IAAYC,MAAZ,IAAsBb,WAAtB,IAAqCA,gBAAgB,EAAtD,QAChBC,QADgB,GACLK,MADK,GAEnBA,MAFF;;AAIA,MAAIS,kBAAJ;AACA,MAAIb,SAASP,YAAYG,IAAzB,EAA+B;AAC7BiB,gBAAY,OAAZ;AACD,GAFD,MAEO,IAAIb,SAASP,YAAYE,aAAzB,EAAwC;AAC7CkB,gBAAY,eAAZ;AACD,GAFM,MAEA;AACLA;AACE;AACA,KAACP,OAAD;AACA;AACAK,eAAWL,YAAY,IAAZ,IAAoBA,YAAY,IAA3C,CAFA,IAGAA,YAAYR,WALF,GAOV,UAPU,GAQV,eARF;AASD;;AAED,MAAMgB,kBAAkB,oCACtBF,YADsB,EAEtBN,WAAWR,WAFW,EAGtBe,SAHsB,CAAxB;AAKA,SAAOR,aAAa,CAACJ,eAAd,QACFa,eADE,GACgBZ,kBADhB,GACqCG,SADrC,GAELS,eAFF;AAGD","file":"index.js","sourcesContent":["import { formatNumber } from 'libphonenumber-js';\nimport parse from '../parse';\n\nconst formatTypes = {\n  local: 'local',\n  international: 'international',\n  e164: 'e164'\n};\n\nexport { formatTypes };\n\nexport default function format({\n  phoneNumber,\n  countryCode = 'US',\n  areaCode = '',\n  type = formatTypes.local,\n  removeExtension = false,\n  extensionDelimeter = ' * ',\n}) {\n  const {\n    phoneNumber: number,\n    extension,\n    country,\n    isExtension,\n    isServiceNumber,\n    isValid,\n    hasPlus,\n  } = parse({ input: phoneNumber, countryCode });\n\n  if (!isValid) {\n    return '';\n  }\n  if (\n    isServiceNumber ||\n    isExtension\n  ) {\n    return number;\n  }\n  const isUSCA = countryCode === 'CA' || countryCode === 'US';\n  const withAreaCode = (!hasPlus && isUSCA && countryCode && countryCode !== '') ?\n    `${areaCode}${number}` :\n    number;\n\n  let finalType;\n  if (type === formatTypes.e164) {\n    finalType = 'E.164';\n  } else if (type === formatTypes.international) {\n    finalType = 'International';\n  } else {\n    finalType = (\n      // assume local\n      !country ||\n      // ignore US/CA difference\n      isUSCA && (country === 'US' || country === 'CA') ||\n      country === countryCode\n    ) ?\n      'National' :\n      'International';\n  }\n\n  const formattedNumber = formatNumber(\n    withAreaCode,\n    country || countryCode,\n    finalType,\n  );\n  return extension && !removeExtension ?\n    `${formattedNumber}${extensionDelimeter}${extension}` :\n    formattedNumber;\n}\n"]}