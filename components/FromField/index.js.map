{"version":3,"sources":["components/FromField/index.js"],"names":["PhoneNumber","formatPhone","usageType","currentLocale","phoneNumber","usageTypeDom","getString","propTypes","func","isRequired","string","defaultProps","FromField","className","fromNumber","fromNumbers","onChange","hidden","showAnonymous","options","push","root","selectIcon","value","option","arrayOf","shape","bool","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DropdownSelect from '../DropdownSelect';\nimport styles from './styles.scss';\n\nimport i18n from './i18n';\n\nfunction PhoneNumber({\n  formatPhone,\n  usageType,\n  currentLocale,\n  phoneNumber,\n}) {\n  const usageTypeDom = usageType ?\n    (\n      <span className={styles.usageType}>\n        {i18n.getString(usageType, currentLocale)}\n      </span>\n    ) : null;\n  return (\n    <span className={styles.phoneNumber}>\n      {usageTypeDom}\n      <span>\n        {formatPhone(phoneNumber)}\n      </span>\n    </span>\n  );\n}\n\nPhoneNumber.propTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  phoneNumber: PropTypes.string,\n  usageType: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nPhoneNumber.defaultProps = {\n  phoneNumber: null,\n  usageType: null,\n};\nfunction FromField({\n  className,\n  fromNumber,\n  fromNumbers,\n  onChange,\n  formatPhone,\n  hidden,\n  showAnonymous,\n  currentLocale,\n}) {\n  if (hidden) {\n    return null;\n  }\n  const options = [\n    ...fromNumbers,\n  ];\n  if (showAnonymous) {\n    options.push({\n      phoneNumber: 'anonymous',\n    });\n  }\n  return (\n    <DropdownSelect\n      className={classnames(styles.root, className)}\n      iconClassName={styles.selectIcon}\n      value={fromNumber}\n      label={`${i18n.getString('from', currentLocale)}:`}\n      onChange={onChange}\n      options={options}\n      renderValue={(value) => {\n        if (value === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={value}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n      valueFunction={option => option.phoneNumber}\n      renderFunction={(option) => {\n        if (option.phoneNumber === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={option.phoneNumber}\n            usageType={option.usageType}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n    />\n  );\n}\n\nFromField.propTypes = {\n  fromNumber: PropTypes.string,\n  formatPhone: PropTypes.func.isRequired,\n  fromNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    usageType: PropTypes.string,\n  })).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  hidden: PropTypes.bool.isRequired,\n  showAnonymous: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nFromField.defaultProps = {\n  fromNumber: null,\n  className: undefined,\n  showAnonymous: true,\n};\n\nexport default FromField;\n"]}