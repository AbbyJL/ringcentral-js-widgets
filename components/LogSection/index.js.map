{"version":3,"sources":["components/LogSection/index.js"],"names":["LogSection","props","state","mainCtrlOverlapped","window","addEventListener","checkOverlap","removeEventListener","mainCtrl","scrollHeight","clientHeight","scrollTop","overlappedHeight","setState","renderEditLogSection","currentLocale","onUpdateCallLog","currentLog","isInnerMask","call","showSpinner","currentLogCall","spinner","editLogSection","buttonPanelClassName","buttonPanel","overlapped","buttonClassName","primaryButton","isSaving","disabled","section","formatPhone","ref","editSection","onSaveCallLog","getString","innerMask","propTypes","object","string","isRequired","func","bool","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport LogBasicInfo from '../LogBasicInfo';\nimport i18n from './i18n';\n\nexport default class LogSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainCtrlOverlapped: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.checkOverlap, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.checkOverlap, false);\n  }\n\n  checkOverlap() {\n    if (!this.mainCtrl) {\n      return;\n    }\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = this.mainCtrl;\n    const overlappedHeight = scrollHeight - clientHeight - scrollTop;\n    const mainCtrlOverlapped = overlappedHeight > 1;\n    if (mainCtrlOverlapped !== this.state.mainCtrlOverlapped) {\n      this.setState({ mainCtrlOverlapped });\n    }\n  }\n\n  render() {\n    const {\n      renderEditLogSection,\n      currentLocale,\n      onUpdateCallLog,\n      currentLog,\n      isInnerMask,\n    } = this.props;\n    const {\n      call,\n      showSpinner,\n      currentLogCall,\n    } = currentLog;\n    if (showSpinner) {\n      return (<SpinnerOverlay className={styles.spinner} />);\n    }\n    const editLogSection = renderEditLogSection({\n      currentLocale,\n      onUpdateCallLog,\n      currentLog,\n    });\n    const buttonPanelClassName = classnames(\n      styles.buttonPanel,\n      this.state.mainCtrlOverlapped && styles.overlapped\n    );\n    const buttonClassName = classnames(\n      styles.primaryButton,\n      currentLogCall.isSaving && styles.disabled\n    );\n    return (\n      <div className={styles.section}>\n        <LogBasicInfo\n          currentLog={this.props.currentLog}\n          currentLocale={this.props.currentLocale}\n          formatPhone={this.props.formatPhone}\n        />\n        <div\n          ref={(ref) => { this.mainCtrl = ref; }}\n          onScroll={() => this.checkOverlap()}\n          className={styles.editSection}>\n          {editLogSection}\n        </div>\n        <div\n          className={buttonPanelClassName}>\n          <Button\n            disabled={currentLogCall.isSaving}\n            className={buttonClassName}\n            onClick={() => this.props.onSaveCallLog(call)}>\n            {i18n.getString('saveLog', currentLocale)}\n          </Button>\n        </div>\n        {\n          isInnerMask ? (\n            <div className={styles.innerMask} />\n          ) : null\n        }\n      </div>);\n  }\n}\n\nLogSection.propTypes = {\n  currentLog: PropTypes.object,\n  currentLocale: PropTypes.string.isRequired,\n  formatPhone: PropTypes.func,\n  onUpdateCallLog: PropTypes.func,\n  onSaveCallLog: PropTypes.func,\n  renderEditLogSection: PropTypes.func,\n  isInnerMask: PropTypes.bool,\n};\n\nLogSection.defaultProps = {\n  currentLog: {},\n  formatPhone: undefined,\n  onUpdateCallLog: undefined,\n  onSaveCallLog: undefined,\n  renderEditLogSection: undefined,\n  isInnerMask: undefined,\n};\n"]}