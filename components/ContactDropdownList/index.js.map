{"version":3,"sources":["components/ContactDropdownList/index.js"],"names":["ContactItem","props","className","contactItem","active","onHover","onClick","name","spliter","label","getString","entityType","phoneNumberSection","formatContactPhone","phoneNumber","phoneType","propTypes","func","isRequired","string","bool","ContactDropdownList","nextProps","visibility","scrollDirection","selectedIndex","items","length","node","scrollTop","Math","floor","listClassName","hiddenClassName","hidden","dropdownList","c","map","item","index","setSelectedIndex","addToRecipients","arrayOf","shape","number","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAMC,YAAY,0BAChB,iBAAOC,WADS,EAEhBF,MAAMG,MAAN,GAAe,iBAAOA,MAAtB,GAA+B,IAFf,CAAlB;AAIA,SACE;AAAA;AAAA,MAAI,WAAWF,SAAf,EAA0B,aAAaD,MAAMI,OAA7C;AACE;AAAA;AAAA,QAAG,MAAK,sBAAR,EAA+B,SAASJ,MAAMK,OAA9C;AACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAM,WAAW,iBAAOC,IAAxB;AACGN,gBAAMM;AADT,SADF;AAIE;AAAA;AAAA,YAAM,WAAW,iBAAOC,OAAxB;AAAA;AAAA,SAJF;AAKE;AAAA;AAAA,YAAM,WAAW,iBAAOC,KAAxB;AACG,+BAAWC,SAAX,kBAAoCT,MAAMU,UAA1C;AADH;AALF,OADF;AAUE;AAAA;AAAA,UAAK,WAAW,iBAAOC,kBAAvB;AACE;AAAA;AAAA;AACGX,gBAAMY,kBAAN,CAAyBZ,MAAMa,WAA/B;AADH,SADF;AAIE;AAAA;AAAA,YAAM,WAAW,iBAAON,OAAxB;AAAA;AAAA,SAJF;AAKE;AAAA;AAAA,YAAM,WAAW,iBAAOC,KAAxB;AACIR,gBAAMc,SAAN,KAAoB,SAApB,GACA,qBAAWL,SAAX,gBAAkCT,MAAMc,SAAxC,CADA,GACuDd,MAAMc;AAFjE;AALF;AAVF;AADF,GADF;AAyBD;;AAEDf,YAAYgB,SAAZ,GAAwB;AACtBV,WAAS,iBAAUW,IAAV,CAAeC,UADF;AAEtBL,sBAAoB,iBAAUI,IAAV,CAAeC,UAFb;AAGtBX,QAAM,iBAAUY,MAAV,CAAiBD,UAHD;AAItBP,cAAY,iBAAUQ,MAAV,CAAiBD,UAJP;AAKtBH,aAAW,iBAAUI,MAAV,CAAiBD,UALN;AAMtBJ,eAAa,iBAAUK,MAAV,CAAiBD,UANR;AAOtBd,UAAQ,iBAAUgB,IAAV,CAAeF,UAPD;AAQtBb,WAAS,iBAAUY,IAAV,CAAeC;AARF,CAAxB;;IAWMG,mB;;;;;;;;;;8CACsBC,S,EAAW;AACnC,UAAIA,UAAUC,UAAd,EAA0B;AACxB,YAAID,UAAUE,eAAV,KAA8B,WAAlC,EAA+C;AAC7C,cAAIF,UAAUG,aAAV,GAA0BH,UAAUI,KAAV,CAAgBC,MAA9C,EAAsD;AACpD,gBAAIL,UAAUG,aAAV,GAA0B,CAA9B,EAAiC;AAC/B,mBAAKG,IAAL,CAAUC,SAAV,IAAuB,EAAvB;AACA,mBAAKD,IAAL,CAAUC,SAAV,GAAsBC,KAAKC,KAAL,CAAW,KAAKH,IAAL,CAAUC,SAAV,GAAsB,EAAjC,IAAuC,EAA7D;AACD;AACF;AACF;AACD,YAAIP,UAAUE,eAAV,KAA8B,SAAlC,EAA6C;AAC3C,cAAIF,UAAUG,aAAV,GAA0B,CAAC,CAA/B,EAAkC;AAChC,gBAAIH,UAAUG,aAAV,GAA0BH,UAAUI,KAAV,CAAgBC,MAAhB,GAAyB,CAAvD,EAA0D;AACxD,mBAAKC,IAAL,CAAUC,SAAV,IAAuB,EAAvB;AACA,mBAAKD,IAAL,CAAUC,SAAV,GAAsBC,KAAKC,KAAL,CAAW,KAAKH,IAAL,CAAUC,SAAV,GAAsB,EAAjC,IAAuC,EAA7D;AACD;AACF;AACF;AACF;AACF;;;6BACQ;AAAA;;AACP,UAAM5B,QAAQ,KAAKA,KAAnB;AACA,UAAMyB,QAAQzB,MAAMyB,KAApB;AACA,UAAIM,gBAAgB,IAApB;AACA,UAAIC,kBAAkB,IAAtB;AACA,UAAIP,MAAMC,MAAN,KAAiB,CAArB,EAAwB;AACtBM,0BAAkB,iBAAOC,MAAzB;AACD;AACDF,sBAAgB,0BAAW,iBAAOG,YAAlB,EAAgClC,MAAMC,SAAtC,EAAiD+B,eAAjD,CAAhB;;AAEA,aACE;AAAA;AAAA,UAAI,WAAWD,aAAf,EAA8B,KAAK,aAACI,CAAD,EAAO;AAAE,mBAAKR,IAAL,GAAYQ,CAAZ;AAAgB,WAA5D;AAEIV,cAAMW,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP;AAAA,iBACR,8BAAC,WAAD;AACE,oBAAQtC,MAAMwB,aAAN,KAAwBc,KADlC;AAEE,kBAAMD,KAAK/B,IAFb;AAGE,wBAAY+B,KAAK3B,UAHnB;AAIE,uBAAW2B,KAAKvB,SAJlB;AAKE,yBAAauB,KAAKxB,WALpB;AAME,gCAAoBb,MAAMY,kBAN5B;AAOE,qBAAS;AAAA,qBAAMZ,MAAMuC,gBAAN,CAAuBD,KAAvB,CAAN;AAAA,aAPX;AAQE,qBAAS;AAAA,qBAAMtC,MAAMwC,eAAN,CAAsB;AACnClC,sBAAM+B,KAAK/B,IADwB;AAEnCO,6BAAawB,KAAKxB;AAFiB,eAAtB,CAAN;AAAA,aARX;AAYE,sBAAQwB,KAAKxB,WAAb,GAA2BwB,KAAK/B,IAAhC,GAAuC+B,KAAKvB;AAZ9C,YADQ;AAAA,SAAV;AAFJ,OADF;AAsBD;;;;;AAGHM,oBAAoBL,SAApB,GAAgC;AAC9BQ,mBAAiB,iBAAUL,MADG;AAE9BI,cAAY,iBAAUH,IAAV,CAAeF,UAFG;AAG9BhB,aAAW,iBAAUiB,MAHS;AAI9BO,SAAO,iBAAUgB,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AACvCpC,UAAM,iBAAUY,MAAV,CAAiBD,UADgB;AAEvCP,gBAAY,iBAAUQ,MAAV,CAAiBD,UAFU;AAGvCH,eAAW,iBAAUI,MAAV,CAAiBD,UAHW;AAIvCJ,iBAAa,iBAAUK,MAAV,CAAiBD;AAJS,GAAhB,CAAlB,EAKHA,UAT0B;AAU9BL,sBAAoB,iBAAUI,IAAV,CAAeC,UAVL;AAW9BuB,mBAAiB,iBAAUxB,IAAV,CAAeC,UAXF;AAY9BsB,oBAAkB,iBAAUvB,IAAV,CAAeC,UAZH;AAa9BO,iBAAe,iBAAUmB,MAAV,CAAiB1B;AAbF,CAAhC;;AAgBAG,oBAAoBwB,YAApB,GAAmC;AACjC3C,aAAW,IADsB;AAEjCsB,mBAAiB;AAFgB,CAAnC;;kBAKeH,mB","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\nimport phoneTypes from '../../lib/phoneTypes';\n\nfunction ContactItem(props) {\n  const className = classnames(\n    styles.contactItem,\n    props.active ? styles.active : null,\n  );\n  return (\n    <li className={className} onMouseOver={props.onHover}>\n      <a href=\"#select-contact-item\" onClick={props.onClick}>\n        <div>\n          <span className={styles.name}>\n            {props.name}\n          </span>\n          <span className={styles.spliter}>|</span>\n          <span className={styles.label}>\n            {phoneTypes.getString(`phoneSource.${props.entityType}`)}\n          </span>\n        </div>\n        <div className={styles.phoneNumberSection}>\n          <span>\n            {props.formatContactPhone(props.phoneNumber)}\n          </span>\n          <span className={styles.spliter}>|</span>\n          <span className={styles.label}>\n            { props.phoneType === 'unknown' ?\n              phoneTypes.getString(`phoneType.${props.phoneType}`) : props.phoneType }\n          </span>\n        </div>\n      </a>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  formatContactPhone: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  entityType: PropTypes.string.isRequired,\n  phoneType: PropTypes.string.isRequired,\n  phoneNumber: PropTypes.string.isRequired,\n  active: PropTypes.bool.isRequired,\n  onHover: PropTypes.func.isRequired,\n};\n\nclass ContactDropdownList extends Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.visibility) {\n      if (nextProps.scrollDirection === 'ArrowDown') {\n        if (nextProps.selectedIndex < nextProps.items.length) {\n          if (nextProps.selectedIndex > 4) {\n            this.node.scrollTop += 53;\n            this.node.scrollTop = Math.floor(this.node.scrollTop / 53) * 53;\n          }\n        }\n      }\n      if (nextProps.scrollDirection === 'ArrowUp') {\n        if (nextProps.selectedIndex > -1) {\n          if (nextProps.selectedIndex < nextProps.items.length - 4) {\n            this.node.scrollTop -= 53;\n            this.node.scrollTop = Math.floor(this.node.scrollTop / 53) * 53;\n          }\n        }\n      }\n    }\n  }\n  render() {\n    const props = this.props;\n    const items = props.items;\n    let listClassName = null;\n    let hiddenClassName = null;\n    if (items.length === 0) {\n      hiddenClassName = styles.hidden;\n    }\n    listClassName = classnames(styles.dropdownList, props.className, hiddenClassName);\n\n    return (\n      <ul className={listClassName} ref={(c) => { this.node = c; }}>\n        {\n          items.map((item, index) => (\n            <ContactItem\n              active={props.selectedIndex === index}\n              name={item.name}\n              entityType={item.entityType}\n              phoneType={item.phoneType}\n              phoneNumber={item.phoneNumber}\n              formatContactPhone={props.formatContactPhone}\n              onHover={() => props.setSelectedIndex(index)}\n              onClick={() => props.addToRecipients({\n                name: item.name,\n                phoneNumber: item.phoneNumber,\n              })}\n              key={`${item.phoneNumber}${item.name}${item.phoneType}`}\n            />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nContactDropdownList.propTypes = {\n  scrollDirection: PropTypes.string,\n  visibility: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    entityType: PropTypes.string.isRequired,\n    phoneType: PropTypes.string.isRequired,\n    phoneNumber: PropTypes.string.isRequired,\n  })).isRequired,\n  formatContactPhone: PropTypes.func.isRequired,\n  addToRecipients: PropTypes.func.isRequired,\n  setSelectedIndex: PropTypes.func.isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n};\n\nContactDropdownList.defaultProps = {\n  className: null,\n  scrollDirection: null,\n};\n\nexport default ContactDropdownList;\n"]}