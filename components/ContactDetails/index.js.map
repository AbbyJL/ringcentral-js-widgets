{"version":3,"sources":["components/ContactDetails/index.js"],"names":["getPresenceStatusName","presence","currentLocale","presenceStatus","dndStatus","DndStatus","doNotAcceptAnyCalls","i18n","getString","AvatarNode","name","avatarUrl","styles","avatarNode","propTypes","PropTypes","string","defaultProps","undefined","ContactDetails","onClickToDial","contact","phoneNumber","props","onClickToSMS","onClickMailTo","email","contactType","contactItem","sourceNodeRenderer","profileImageUrl","type","sourceNode","sourceType","presenceName","contactProfile","avatar","avatarNodeContainer","sourceNodeContainer","info","nameWithoutPresence","presenceNodeContainer","presenceNode","extensionNumber","textBtn","internalSmsPermission","dynamicsFont","composeText","callBtn","call","item","label","number","menu","phoneNumbers","phoneNumberListView","map","index","phoneType","formattedPhoneNumber","formatNumber","outboundSmsPermission","filter","v","length","emails","hasMailToHandler","emailListView","underline","extensionCellView","renderExtensionCell","directNumberCellView","renderDirectNumberCell","root","profile","renderProfile","contacts","renderEmailCell","PureComponent","contactItemPropTypes","id","oneOfType","isRequired","firstName","lastName","arrayOf","shape","func","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYgBA,qB,GAAAA,qB;;AAZhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;AAHA;AAKO,SAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,aAAzC,EAAwD;AAAA,MACrDC,cADqD,GACvBF,QADuB,CACrDE,cADqD;AAAA,MACrCC,SADqC,GACvBH,QADuB,CACrCG,SADqC;;AAE7D,MAAIA,cAAcC,oBAAUC,mBAA5B,EAAiD;AAC/C,WAAOC,eAAKC,SAAL,CAAeJ,SAAf,EAA0BF,aAA1B,CAAP;AACD;AACD,SAAOK,eAAKC,SAAL,CAAeL,cAAf,EAA+BD,aAA/B,CAAP;AACD;;AAED,SAASO,UAAT,OAAyC;AAAA,MAAnBC,IAAmB,QAAnBA,IAAmB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AACvC,SAAOA,YAEH;AACE,eAAWC,iBAAOC,UADpB;AAEE,SAAKH,IAFP;AAGE,SAAKC;AAHP,IAFG,GASH,8BAAC,uBAAD;AACE,eAAWC,iBAAOC;AADpB,IATJ;AAaD;AACDJ,WAAWK,SAAX,GAAuB;AACrBJ,QAAMK,oBAAUC,MADK;AAErBL,aAAWI,oBAAUC;AAFA,CAAvB;AAIAP,WAAWQ,YAAX,GAA0B;AACxBP,QAAMQ,SADkB;AAExBP,aAAWO;AAFa,CAA1B;;IAKqBC,c;;;;;;;;;;;;;;8NACnBC,a,GAAgB,UAACC,OAAD,EAAUC,WAAV,EAA0B;AACxC,YAAKC,KAAL,CAAWH,aAAX,4BACKC,OADL;AAEEC;AAFF;AAID,K,QAEDE,Y,GAAe,UAACH,OAAD,EAAUC,WAAV,EAA0B;AACvC,YAAKC,KAAL,CAAWC,YAAX,4BACKH,OADL;AAEEC;AAFF;AAID,K,QAEDG,a,GAAgB,UAACC,KAAD,EAAQC,WAAR,EAAwB;AACtC,UAAI,OAAO,MAAKJ,KAAL,CAAWE,aAAlB,KAAoC,UAAxC,EAAoD;AAClD,cAAKF,KAAL,CAAWE,aAAX,CAAyBC,KAAzB,EAAgCC,WAAhC;AACD;AACF,K;;;;;oCAEe;AAAA,mBAC6C,KAAKJ,KADlD;AAAA,UACNK,WADM,UACNA,WADM;AAAA,UACOC,kBADP,UACOA,kBADP;AAAA,UAC2B3B,aAD3B,UAC2BA,aAD3B;AAAA,UAGZQ,IAHY,GAIVkB,WAJU,CAGZlB,IAHY;AAAA,UAGNT,QAHM,GAIV2B,WAJU,CAGN3B,QAHM;AAAA,UAGI6B,eAHJ,GAIVF,WAJU,CAGIE,eAHJ;AAAA,UAGqBC,IAHrB,GAIVH,WAJU,CAGqBG,IAHrB;;AAKd,UAAMC,aAAaH,mBAAmB,EAAEI,YAAYF,IAAd,EAAnB,CAAnB;AACA,UAAMG,eAAejC,WACjBD,sBAAsBC,QAAtB,EAAgCC,aAAhC,CADiB,GAEjB,IAFJ;AAGA,aACE;AAAA;AAAA,UAAK,WAAWU,iBAAOuB,cAAvB;AACE;AAAA;AAAA,YAAK,WAAWvB,iBAAOwB,MAAvB;AACE;AAAA;AAAA,cAAK,WAAWxB,iBAAOyB,mBAAvB;AACE,0CAAC,UAAD;AACE,oBAAM3B,IADR;AAEE,yBAAWoB;AAFb,cADF;AAMIE,yBAEI;AAAA;AAAA,gBAAK,WAAWpB,iBAAO0B,mBAAvB;AACGN;AADH,aAFJ,GAKM;AAXV;AADF,SADF;AAiBE;AAAA;AAAA,YAAK,WAAWpB,iBAAO2B,IAAvB;AACE;AAAA;AAAA,cAAK,WAAW,0BAAW3B,iBAAOF,IAAlB,EAAwB,CAACT,QAAD,GAAYW,iBAAO4B,mBAAnB,GAAyC,IAAjE,CAAhB;AACE;AAAA;AAAA,gBAAM,OAAO9B,IAAb;AAAoBA;AAApB;AADF,WADF;AAKIT,qBAEI;AAAA;AAAA,cAAK,WAAWW,iBAAOX,QAAvB;AACE;AAAA;AAAA,gBAAK,WAAWW,iBAAO6B,qBAAvB;AACE,4CAAC,4BAAD;AACE,2BAAW7B,iBAAO8B;AADpB,iBAEMzC,QAFN;AADF,aADF;AAOE;AAAA;AAAA,gBAAM,WAAWW,iBAAOT,cAAxB;AACG+B;AADH;AAPF,WAFJ,GAaM;AAlBV;AAjBF,OADF;AAyCD;;;0CAEqB;AAAA;;AAAA,oBACmB,KAAKX,KADxB;AAAA,UACZK,WADY,WACZA,WADY;AAAA,UACC1B,aADD,WACCA,aADD;AAAA,UAEZyC,eAFY,GAEQf,WAFR,CAEZe,eAFY;;AAGpB,UAAI,CAACA,eAAL,EAAsB,OAAO,IAAP;AACtB,UAAMC,UAAU,KAAKrB,KAAL,CAAWsB,qBAAX,GACd;AAAA;AAAA,UAAQ,OAAOtC,eAAKC,SAAL,CAAe,MAAf,EAAuBN,aAAvB,CAAf,EAAsD,SAAS;AAAA,mBAAM,OAAKsB,YAAL,CAAkBI,WAAlB,EAA+Be,eAA/B,CAAN;AAAA,WAA/D;AACE,6CAAG,WAAWG,uBAAaC,WAA3B;AADF,OADc,GAGD,IAHf;AAIA,UAAMC,UAAU,KAAKzB,KAAL,CAAWH,aAAX,GACd;AAAA;AAAA;AACE,iBAAOb,eAAKC,SAAL,CAAe,MAAf,EAAuBN,aAAvB,CADT;AAEE,mBAAS;AAAA,mBAAM,OAAKkB,aAAL,CAAmBQ,WAAnB,EAAgCe,eAAhC,CAAN;AAAA;AAFX;AAIE,6CAAG,WAAWG,uBAAaG,IAA3B;AAJF,OADc,GAOZ,IAPJ;AAQA,aACE;AAAA;AAAA,UAAK,WAAWrC,iBAAOsC,IAAvB;AACE;AAAA;AAAA,YAAK,WAAWtC,iBAAOuC,KAAvB;AACE;AAAA;AAAA;AAAQ5C,2BAAKC,SAAL,CAAe,gBAAf,EAAiCN,aAAjC;AAAR;AADF,SADF;AAIE;AAAA;AAAA;AACE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAK,WAAWU,iBAAOwC,MAAvB;AACE;AAAA;AAAA,kBAAM,OAAOT,eAAb;AAA+BA;AAA/B;AADF,aADF;AAIE;AAAA;AAAA,gBAAK,WAAW/B,iBAAOyC,IAAvB;AACGL,qBADH;AAEGJ;AAFH;AAJF;AADF;AAJF,OADF;AAkBD;;;6CAEwB;AAAA;;AAAA,oBACgB,KAAKrB,KADrB;AAAA,UACfK,WADe,WACfA,WADe;AAAA,UACF1B,aADE,WACFA,aADE;AAAA,UAEfoD,YAFe,GAEE1B,WAFF,CAEf0B,YAFe;;AAGvB,UAAMC,sBAAsBD,aAAaE,GAAb,CAAiB,iBAA6BC,KAA7B,EAAuC;AAAA,YAApCC,SAAoC,SAApCA,SAAoC;AAAA,YAAzBpC,WAAyB,SAAzBA,WAAyB;;AAClF,YAAIoC,cAAc,WAAlB,EAA+B,OAAO,IAAP;AAC/B,YAAMC,uBAAuB,OAAKpC,KAAL,CAAWqC,YAAX,CAAwBtC,WAAxB,CAA7B;AACA,YAAMsB,UAAU,OAAKrB,KAAL,CAAWsC,qBAAX,GACd;AAAA;AAAA,YAAQ,OAAOtD,eAAKC,SAAL,CAAe,MAAf,EAAuBN,aAAvB,CAAf,EAAsD,SAAS;AAAA,qBAAM,OAAKsB,YAAL,CAAkBI,WAAlB,EAA+BN,WAA/B,CAAN;AAAA,aAA/D;AACE,+CAAG,WAAWwB,uBAAaC,WAA3B;AADF,SADc,GAGD,IAHf;AAIA,YAAMC,UAAU,OAAKzB,KAAL,CAAWH,aAAX,GACd;AAAA;AAAA;AACE,mBAAOb,eAAKC,SAAL,CAAe,MAAf,EAAuBN,aAAvB,CADT;AAEE,qBAAS;AAAA,qBAAM,OAAKkB,aAAL,CAAmBQ,WAAnB,EAAgCN,WAAhC,CAAN;AAAA;AAFX;AAIE,+CAAG,WAAWwB,uBAAaG,IAA3B;AAJF,SADc,GAOZ,IAPJ;AAQA,eACE;AAAA;AAAA,YAAI,KAAKQ,KAAT;AACE;AAAA;AAAA,cAAK,WAAW7C,iBAAOwC,MAAvB;AACE;AAAA;AAAA,gBAAM,OAAOO,oBAAb;AAAoCA;AAApC;AADF,WADF;AAIE;AAAA;AAAA,cAAK,WAAW/C,iBAAOyC,IAAvB;AACGL,mBADH;AAEGJ;AAFH;AAJF,SADF;AAgBD,OA/B2B,EA+BzBkB,MA/ByB,CA+BlB;AAAA,eAAK,CAAC,CAACC,CAAP;AAAA,OA/BkB,CAA5B;AAgCA,UAAIR,oBAAoBS,MAApB,IAA8B,CAAlC,EAAqC,OAAO,IAAP;AACrC,aACE;AAAA;AAAA,UAAK,WAAWpD,iBAAOsC,IAAvB;AACE;AAAA;AAAA,YAAK,WAAWtC,iBAAOuC,KAAvB;AACE;AAAA;AAAA;AAAO5C,2BAAKC,SAAL,CAAe,aAAf,EAA8BN,aAA9B;AAAP;AADF,SADF;AAIE;AAAA;AAAA;AACGqD;AADH;AAJF,OADF;AAUD;;;sCAEiB;AAAA;;AAAA,UACR9B,aADQ,GACU,KAAKF,KADf,CACRE,aADQ;AAAA,+BAES,KAAKF,KAAL,CAAWK,WAFpB;AAAA,UAERqC,MAFQ,sBAERA,MAFQ;AAAA,UAEAlC,IAFA,sBAEAA,IAFA;;AAGhB,UAAI,CAACkC,MAAD,IAAWA,OAAOD,MAAP,IAAiB,CAAhC,EAAmC,OAAO,IAAP;AACnC,UAAME,mBAAmB,OAAOzC,aAAP,KAAyB,UAAlD;AACA,UAAM0C,gBAAgBF,OAAOT,GAAP,CAAW,UAAC9B,KAAD,EAAQ+B,KAAR;AAAA,eAC/B;AAAA;AAAA,YAAI,KAAKA,KAAT;AACE;AAAA;AAAA;AACE,qBAAO/B,KADT;AAEE,yBAAWwC,mBAAmBtD,iBAAOwD,SAA1B,GAAsC,IAFnD;AAGE,uBAAS;AAAA,uBAAM,OAAK3C,aAAL,CAAmBC,KAAnB,EAA0BK,IAA1B,CAAN;AAAA;AAHX;AAKGL;AALH;AADF,SAD+B;AAAA,OAAX,CAAtB;AAWA,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAWd,iBAAOuC,KAAvB;AACE;AAAA;AAAA;AAAO5C,2BAAKC,SAAL,CAAe,YAAf,EAA6B,KAAKe,KAAL,CAAWrB,aAAxC;AAAP;AADF,SADF;AAIE;AAAA;AAAA;AAAKiE;AAAL;AAJF,OADF;AAQD;;;6BAEQ;AACP,UAAME,oBAAoB,KAAKC,mBAAL,EAA1B;AACA,UAAMC,uBAAuB,KAAKC,sBAAL,EAA7B;AACA,aACE;AAAA;AAAA,UAAK,WAAW5D,iBAAO6D,IAAvB;AACE;AAAA;AAAA,YAAK,WAAW7D,iBAAO8D,OAAvB;AACG,eAAKC,aAAL;AADH,SADF;AAKIN,6BAAqBE,oBAArB,GAEI;AAAA;AAAA,YAAK,WAAW3D,iBAAOgE,QAAvB;AACGP,2BADH;AAEGE;AAFH,SAFJ,GAMM,IAXV;AAaE;AAAA;AAAA,YAAK,WAAW3D,iBAAOc,KAAvB;AACG,eAAKmD,eAAL;AADH;AAbF,OADF;AAmBD;;;EA7MyCC,oB;;kBAAvB3D,c;AAgNd,IAAM4D,sDAAuB;AAClCC,MAAIjE,oBAAUkE,SAAV,CAAoB,CAAClE,oBAAUC,MAAX,EAAmBD,oBAAUqC,MAA7B,CAApB,EAA0D8B,UAD5B;AAElCnD,QAAMhB,oBAAUC,MAAV,CAAiBkE,UAFW;AAGlCC,aAAWpE,oBAAUC,MAHa;AAIlCoE,YAAUrE,oBAAUC,MAJc;AAKlCU,SAAOX,oBAAUC,MALiB;AAMlCc,mBAAiBf,oBAAUC,MANO;AAOlCsC,gBAAcvC,oBAAUsE,OAAV,CAAkBtE,oBAAUuE,KAAV,CAAgB;AAC9ChE,iBAAaP,oBAAUC,MADuB;AAE9C0C,eAAW3C,oBAAUC;AAFyB,GAAhB,CAAlB;AAPoB,CAA7B;;AAaPG,eAAeL,SAAf,GAA2B;AACzBZ,iBAAea,oBAAUC,MAAV,CAAiBkE,UADP;AAEzBtD,eAAab,oBAAUuE,KAAV,CAAgBP,oBAAhB,EAAsCG,UAF1B;AAGzBrD,sBAAoBd,oBAAUwE,IAHL;AAIzB/D,gBAAcT,oBAAUwE,IAJC;AAKzBnE,iBAAeL,oBAAUwE,IALA;AAMzB9D,iBAAeV,oBAAUwE,IANA;AAOzB3B,gBAAc7C,oBAAUwE,IAAV,CAAeL,UAPJ;AAQzBrB,yBAAuB9C,oBAAUyE,IARR;AASzB3C,yBAAuB9B,oBAAUyE;AATR,CAA3B;;AAYArE,eAAeF,YAAf,GAA8B;AAC5BO,gBAAcN,SADc;AAE5BE,iBAAeF,SAFa;AAG5BO,iBAAeP,SAHa;AAI5BW,sBAAoB;AAAA,WAAM,IAAN;AAAA,GAJQ;AAK5BgC,yBAAuB,KALK;AAM5BhB,yBAAuB;AANK,CAA9B","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\nimport PresenceStatusIcon from '../PresenceStatusIcon';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport DefaultAvatar from '../../assets/images/DefaultAvatar.svg';\n// import FaxIcon from '../../assets/images/Fax.svg';\nimport i18n from './i18n';\n\nimport styles from './styles.scss';\n\nexport function getPresenceStatusName(presence, currentLocale) {\n  const { presenceStatus, dndStatus } = presence;\n  if (dndStatus === DndStatus.doNotAcceptAnyCalls) {\n    return i18n.getString(dndStatus, currentLocale);\n  }\n  return i18n.getString(presenceStatus, currentLocale);\n}\n\nfunction AvatarNode({ name, avatarUrl }) {\n  return avatarUrl ?\n    (\n      <img\n        className={styles.avatarNode}\n        alt={name}\n        src={avatarUrl}\n      />\n    ) :\n    (\n      <DefaultAvatar\n        className={styles.avatarNode}\n      />\n    );\n}\nAvatarNode.propTypes = {\n  name: PropTypes.string,\n  avatarUrl: PropTypes.string,\n};\nAvatarNode.defaultProps = {\n  name: undefined,\n  avatarUrl: undefined,\n};\n\nexport default class ContactDetails extends PureComponent {\n  onClickToDial = (contact, phoneNumber) => {\n    this.props.onClickToDial({\n      ...contact,\n      phoneNumber,\n    });\n  }\n\n  onClickToSMS = (contact, phoneNumber) => {\n    this.props.onClickToSMS({\n      ...contact,\n      phoneNumber\n    });\n  }\n\n  onClickMailTo = (email, contactType) => {\n    if (typeof this.props.onClickMailTo === 'function') {\n      this.props.onClickMailTo(email, contactType);\n    }\n  }\n\n  renderProfile() {\n    const { contactItem, sourceNodeRenderer, currentLocale } = this.props;\n    const {\n      name, presence, profileImageUrl, type\n    } = contactItem;\n    const sourceNode = sourceNodeRenderer({ sourceType: type });\n    const presenceName = presence\n      ? getPresenceStatusName(presence, currentLocale)\n      : null;\n    return (\n      <div className={styles.contactProfile}>\n        <div className={styles.avatar}>\n          <div className={styles.avatarNodeContainer}>\n            <AvatarNode\n              name={name}\n              avatarUrl={profileImageUrl}\n            />\n            {\n              sourceNode\n                ? (\n                  <div className={styles.sourceNodeContainer}>\n                    {sourceNode}\n                  </div>\n                ) : null\n            }\n          </div>\n        </div>\n        <div className={styles.info}>\n          <div className={classnames(styles.name, !presence ? styles.nameWithoutPresence : null)}>\n            <span title={name}>{name}</span>\n          </div>\n          {\n            presence\n              ? (\n                <div className={styles.presence}>\n                  <div className={styles.presenceNodeContainer}>\n                    <PresenceStatusIcon\n                      className={styles.presenceNode}\n                      {...presence}\n                    />\n                  </div>\n                  <span className={styles.presenceStatus}>\n                    {presenceName}\n                  </span>\n                </div>\n              ) : null\n          }\n        </div>\n      </div>\n    );\n  }\n\n  renderExtensionCell() {\n    const { contactItem, currentLocale } = this.props;\n    const { extensionNumber } = contactItem;\n    if (!extensionNumber) return null;\n    const textBtn = this.props.internalSmsPermission ? (\n      <button title={i18n.getString('text', currentLocale)} onClick={() => this.onClickToSMS(contactItem, extensionNumber)}>\n        <i className={dynamicsFont.composeText} />\n      </button>) : null;\n    const callBtn = this.props.onClickToDial ? (\n      <button\n        title={i18n.getString('call', currentLocale)}\n        onClick={() => this.onClickToDial(contactItem, extensionNumber)}\n      >\n        <i className={dynamicsFont.call} />\n      </button>\n    ) : null;\n    return (\n      <div className={styles.item}>\n        <div className={styles.label}>\n          <span>{ i18n.getString('extensionLabel', currentLocale) }</span>\n        </div>\n        <ul>\n          <li>\n            <div className={styles.number}>\n              <span title={extensionNumber}>{extensionNumber}</span>\n            </div>\n            <div className={styles.menu}>\n              {callBtn}\n              {textBtn}\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderDirectNumberCell() {\n    const { contactItem, currentLocale } = this.props;\n    const { phoneNumbers } = contactItem;\n    const phoneNumberListView = phoneNumbers.map(({ phoneType, phoneNumber }, index) => {\n      if (phoneType === 'extension') return null;\n      const formattedPhoneNumber = this.props.formatNumber(phoneNumber);\n      const textBtn = this.props.outboundSmsPermission ? (\n        <button title={i18n.getString('text', currentLocale)} onClick={() => this.onClickToSMS(contactItem, phoneNumber)}>\n          <i className={dynamicsFont.composeText} />\n        </button>) : null;\n      const callBtn = this.props.onClickToDial ? (\n        <button\n          title={i18n.getString('call', currentLocale)}\n          onClick={() => this.onClickToDial(contactItem, phoneNumber)}\n        >\n          <i className={dynamicsFont.call} />\n        </button>\n      ) : null;\n      return (\n        <li key={index}>\n          <div className={styles.number}>\n            <span title={formattedPhoneNumber}>{formattedPhoneNumber}</span>\n          </div>\n          <div className={styles.menu}>\n            {callBtn}\n            {textBtn}\n            {\n              // <button>\n              //   <FaxIcon className={styles.faxIcon} />\n              // </button>\n            }\n          </div>\n        </li>\n      );\n    }).filter(v => !!v);\n    if (phoneNumberListView.length <= 0) return null;\n    return (\n      <div className={styles.item}>\n        <div className={styles.label}>\n          <span>{i18n.getString('directLabel', currentLocale)}</span>\n        </div>\n        <ul>\n          {phoneNumberListView}\n        </ul>\n      </div>\n    );\n  }\n\n  renderEmailCell() {\n    const { onClickMailTo } = this.props;\n    const { emails, type } = this.props.contactItem;\n    if (!emails || emails.length <= 0) return null;\n    const hasMailToHandler = typeof onClickMailTo === 'function';\n    const emailListView = emails.map((email, index) => (\n      <li key={index}>\n        <a\n          title={email}\n          className={hasMailToHandler ? styles.underline : null}\n          onClick={() => this.onClickMailTo(email, type)}\n        >\n          {email}\n        </a>\n      </li>\n    ));\n    return (\n      <div>\n        <div className={styles.label}>\n          <span>{i18n.getString('emailLabel', this.props.currentLocale)}</span>\n        </div>\n        <ul>{emailListView}</ul>\n      </div>\n    );\n  }\n\n  render() {\n    const extensionCellView = this.renderExtensionCell();\n    const directNumberCellView = this.renderDirectNumberCell();\n    return (\n      <div className={styles.root}>\n        <div className={styles.profile}>\n          {this.renderProfile()}\n        </div>\n        {\n          extensionCellView || directNumberCellView\n            ? (\n              <div className={styles.contacts}>\n                {extensionCellView}\n                {directNumberCellView}\n              </div>\n            ) : null\n        }\n        <div className={styles.email}>\n          {this.renderEmailCell()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const contactItemPropTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  email: PropTypes.string,\n  profileImageUrl: PropTypes.string,\n  phoneNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    phoneType: PropTypes.string,\n  })),\n};\n\nContactDetails.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactItem: PropTypes.shape(contactItemPropTypes).isRequired,\n  sourceNodeRenderer: PropTypes.func,\n  onClickToSMS: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  onClickMailTo: PropTypes.func,\n  formatNumber: PropTypes.func.isRequired,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool,\n};\n\nContactDetails.defaultProps = {\n  onClickToSMS: undefined,\n  onClickToDial: undefined,\n  onClickMailTo: undefined,\n  sourceNodeRenderer: () => null,\n  outboundSmsPermission: false,\n  internalSmsPermission: false,\n};\n"]}