{"version":3,"sources":["components/DropdownNavigationView/index.js"],"names":["DropdownNavigationView","props","removeChildNavBar","bind","removeListener","el","setTimeout","childNavigationElement","addListener","window","addEventListener","removeEventListener","ev","target","contains","goTo","virtualPath","tabs","currentPath","currentVirtualPath","length","root","setChildNavigationElement","map","tab","index","Icon","icon","ActiveIcon","activeIcon","isActive","path","propTypes","isRequired","func","string","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqBA,sB;;;AACnB,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA,sKACXA,KADW;;AAEjB,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,OAAzB;AAFiB;AAGlB;;;;2CAEsB;AACrB,WAAKC,cAAL;AACD;;;8CAEyBC,E,EAAI;AAAA;;AAC5BC,iBAAW,YAAM;AACf,eAAKC,sBAAL,GAA8BF,EAA9B;AACA,YAAI,OAAKE,sBAAT,EAAiC;AAC/B,iBAAKC,WAAL;AACD,SAFD,MAEO;AACL,iBAAKJ,cAAL;AACD;AACF,OAPD,EAOG,CAPH;AAQD;;;kCAEa;AACZK,aAAOC,gBAAP,CAAwB,OAAxB,EAAiC,KAAKR,iBAAtC;AACD;;;qCAEgB;AACfO,aAAOE,mBAAP,CAA2B,OAA3B,EAAoC,KAAKT,iBAAzC;AACD;;;sCAEiBU,E,EAAI;AACpB,UACE,CAAC,KAAKL,sBAAN,IACA,KAAKA,sBAAL,KAAgCK,GAAGC,MADnC,IAEA,KAAKN,sBAAL,CAA4BO,QAA5B,CAAqCF,GAAGC,MAAxC,CAHF,EAIE;AACA;AACD;AACD,WAAKT,cAAL;AACA,WAAKH,KAAL,CAAWc,IAAX,CAAgB;AACdC,qBAAa;AADC,OAAhB;AAGD;;;6BAEQ;AAAA;;AAAA,mBAMH,KAAKf,KANF;AAAA,UAELgB,IAFK,UAELA,IAFK;AAAA,UAGLF,IAHK,UAGLA,IAHK;AAAA,UAILG,WAJK,UAILA,WAJK;AAAA,UAKLC,kBALK,UAKLA,kBALK;;;AAQP,aACEF,KAAKG,MAAL,GACE;AAAA;AAAA;AACE,qBAAW,iBAAOC,IADpB;AAEE,eAAK,aAAChB,EAAD,EAAQ;AAAE,mBAAKiB,yBAAL,CAA+BjB,EAA/B;AAAqC;AAFtD;AAKIY,aAAKM,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvB,cAAMC,OAAOF,IAAIG,IAAjB;AACA,cAAMC,aAAaJ,IAAIK,UAAvB;AACA,iBACE,2FACML,GADN;AAEE,iBAAKC,KAFP;AAGE,qBAAS,mBAAM;AACbV,mBAAKS,GAAL;AACD,aALH;AAME,oBACGA,IAAIM,QAAJ,IAAgBN,IAAIM,QAAJ,CAAaZ,WAAb,EAA0BC,kBAA1B,CAAjB,IACCK,IAAIO,IAAJ,IAAYP,IAAIO,IAAJ,KAAab,WAD1B,IAECM,IAAIR,WAAJ,IAAmBQ,IAAIR,WAAJ,KAAoBG,kBAT5C;AAWE,kBAAM,OAAOO,IAAP,KAAgB,UAAhB,GAA6B,8BAAC,IAAD,OAA7B,GAAwCA,IAXhD;AAYE,wBAAY,OAAOE,UAAP,KAAsB,UAAtB,GAAmC,8BAAC,UAAD,OAAnC,GAAoDA;AAZlE,aADF;AAgBD,SAnBD;AALJ,OADF,GA4BI,IA7BN;AA+BD;;;;;kBAlFkB5B,sB;;;AAqFrBA,uBAAuBgC,SAAvB,GAAmC;AACjCf,QAAM,wBAAce,SAAd,CAAwBf,IAAxB,CAA6BgB,UADF;AAEjClB,QAAM,oBAAUmB,IAAV,CAAeD,UAFY;AAGjCf,eAAa,oBAAUiB,MAAV,CAAiBF,UAHG;AAIjCd,sBAAoB,oBAAUgB;AAJG,CAAnC;;AAOAnC,uBAAuBoC,YAAvB,GAAsC;AACpCjB,sBAAoBkB;AADgB,CAAtC","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationBar from '../NavigationBar';\nimport DropdownNavigationItem from '../DropdownNavigationItem';\nimport styles from './styles.scss';\n\nexport default class DropdownNavigationView extends Component {\n  constructor(props) {\n    super(props);\n    this.removeChildNavBar = this.removeChildNavBar.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.removeListener();\n  }\n\n  setChildNavigationElement(el) {\n    setTimeout(() => {\n      this.childNavigationElement = el;\n      if (this.childNavigationElement) {\n        this.addListener();\n      } else {\n        this.removeListener();\n      }\n    }, 0);\n  }\n\n  addListener() {\n    window.addEventListener('click', this.removeChildNavBar);\n  }\n\n  removeListener() {\n    window.removeEventListener('click', this.removeChildNavBar);\n  }\n\n  removeChildNavBar(ev) {\n    if (\n      !this.childNavigationElement ||\n      this.childNavigationElement === ev.target ||\n      this.childNavigationElement.contains(ev.target)\n    ) {\n      return;\n    }\n    this.removeListener();\n    this.props.goTo({\n      virtualPath: '',\n    });\n  }\n\n  render() {\n    const {\n      tabs,\n      goTo,\n      currentPath,\n      currentVirtualPath,\n    } = this.props;\n\n    return (\n      tabs.length ? (\n        <div\n          className={styles.root}\n          ref={(el) => { this.setChildNavigationElement(el); }}\n        >\n          {\n            tabs.map((tab, index) => {\n              const Icon = tab.icon;\n              const ActiveIcon = tab.activeIcon;\n              return (\n                <DropdownNavigationItem\n                  {...tab}\n                  key={index}\n                  onClick={() => {\n                    goTo(tab);\n                  }}\n                  active={\n                    (tab.isActive && tab.isActive(currentPath, currentVirtualPath)) ||\n                    (tab.path && tab.path === currentPath) ||\n                    (tab.virtualPath && tab.virtualPath === currentVirtualPath)\n                  }\n                  icon={typeof Icon === 'function' ? <Icon /> : Icon}\n                  activeIcon={typeof ActiveIcon === 'function' ? <ActiveIcon /> : ActiveIcon}\n                />\n              );\n            })\n          }\n        </div>\n      ) : null\n    );\n  }\n}\n\nDropdownNavigationView.propTypes = {\n  tabs: NavigationBar.propTypes.tabs.isRequired,\n  goTo: PropTypes.func.isRequired,\n  currentPath: PropTypes.string.isRequired,\n  currentVirtualPath: PropTypes.string,\n};\n\nDropdownNavigationView.defaultProps = {\n  currentVirtualPath: undefined,\n};\n"]}