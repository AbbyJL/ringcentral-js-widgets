{"version":3,"sources":["components/ConversationMessageList/index.js"],"names":["Message","subject","time","direction","sender","SubjectRenderer","subjectRenderer","styles","message","messageBody","outbound","inbound","length","big","clear","propTypes","PropTypes","string","isRequired","func","defaultProps","undefined","ConversationMessageList","scrollToLastMessage","conversationBody","scrollTop","scrollHeight","previousProps","messages","props","className","dateTimeFormatter","showSender","height","messageSubjectRenderer","lastDate","messageList","map","from","name","context","formatPhone","extensionNumber","phoneNumber","date","Date","creationTime","getHours","utcTimestamp","type","id","root","body","Component","arrayOf","shape","number","bool","oneOfType","contextTypes"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\n\nexport function Message({\n  subject,\n  time,\n  direction,\n  sender,\n  subjectRenderer: SubjectRenderer,\n}) {\n  return (\n    <div className={styles.message}>\n      {\n        time ?\n          (\n            <div className={styles.time}>\n              {time}\n            </div>\n          ) :\n          null\n      }\n      {\n        (sender && direction === 'Inbound') ?\n          (\n            <div className={styles.sender}>\n              {sender}\n            </div>\n          ) :\n          null\n      }\n      <div\n        className={classnames(\n          styles.messageBody,\n          direction === 'Outbound' ? styles.outbound : styles.inbound,\n          (subject && subject.length > 500) && styles.big,\n        )}>\n        {\n          SubjectRenderer ? <SubjectRenderer subject={subject} /> : subject\n        }\n      </div>\n      <div className={styles.clear} />\n    </div>\n  );\n}\n\nMessage.propTypes = {\n  direction: PropTypes.string.isRequired,\n  subject: PropTypes.string,\n  time: PropTypes.string,\n  sender: PropTypes.string,\n  subjectRenderer: PropTypes.func,\n};\n\nMessage.defaultProps = {\n  subject: '',\n  sender: undefined,\n  time: undefined,\n  subjectRenderer: undefined,\n};\n\nclass ConversationMessageList extends Component {\n  componentDidMount() {\n    this.scrollToLastMessage();\n  }\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.messages.length !== this.props.messages.length) {\n      this.scrollToLastMessage();\n    }\n  }\n  scrollToLastMessage = () => {\n    if (this.conversationBody) {\n      this.conversationBody.scrollTop = this.conversationBody.scrollHeight;\n    }\n  }\n  render() {\n    const {\n      className,\n      dateTimeFormatter,\n      messages,\n      showSender,\n      height,\n      messageSubjectRenderer,\n    } = this.props;\n\n    let lastDate = 0;\n    const messageList = messages.map((message) => {\n      const sender = showSender ?\n        (\n          message.from.name ||\n          this.context.formatPhone(message.from.extensionNumber || message.from.phoneNumber)\n        ) :\n        null;\n      const date = new Date(message.creationTime);\n      const time = (date - lastDate < 60 * 60 * 1000 && date.getHours() === lastDate.getHours()) ?\n        null :\n        dateTimeFormatter({ utcTimestamp: message.creationTime, type: 'long' });\n      lastDate = date;\n      return (\n        <Message\n          key={message.id}\n          sender={sender}\n          time={time}\n          direction={message.direction}\n          subject={message.subject}\n          subjectRenderer={messageSubjectRenderer}\n        />\n      );\n    });\n    return (\n      <div\n        className={classnames(styles.root, className)}\n        style={{ height }}\n        ref={(body) => { this.conversationBody = body; }}\n      >\n        {messageList}\n      </div>\n    );\n  }\n}\n\nConversationMessageList.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    creationTime: PropTypes.string,\n    id: PropTypes.number,\n    direction: PropTypes.string,\n    subject: PropTypes.string,\n  })).isRequired,\n  className: PropTypes.string,\n  showSender: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  messageSubjectRenderer: PropTypes.func,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nConversationMessageList.defaultProps = {\n  className: null,\n  showSender: false,\n  messageSubjectRenderer: undefined,\n  height: '100%',\n};\n\nConversationMessageList.contextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n};\n\nexport default ConversationMessageList;\n"]}