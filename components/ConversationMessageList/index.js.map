{"version":3,"sources":["components/ConversationMessageList/index.js"],"names":["MessageItem","props","messageClassName","direction","messageBody","outbound","showDate","messageItem","subject","clear","messsageTime","creationTime","propTypes","string","isRequired","bool","ConversationMessageList","lastMessagesLength","scrollToLastMessage","conversationBody","messages","length","scrollTop","scrollHeight","lastFormatedTime","messageList","map","message","formatedTime","context","formatDateTime","id","root","body","PropTypes","arrayOf","shape","number","contextTypes","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\n\nfunction MessageItem(props) {\n  let messageClassName = null;\n  if (props.direction === 'Outbound') {\n    messageClassName = classnames(styles.messageBody, styles.outbound);\n  } else {\n    messageClassName = styles.messageBody;\n  }\n  if (!props.showDate) {\n    return (\n      <div className={styles.messageItem}>\n        <div className={messageClassName}>\n          {props.subject}\n        </div>\n        <div className={styles.clear} />\n      </div>\n    );\n  }\n  return (\n    <div className={styles.messageItem}>\n      <div className={styles.messsageTime}>\n        {props.creationTime}\n      </div>\n      <div className={messageClassName}>\n        {props.subject}\n      </div>\n      <div className={styles.clear} />\n    </div>\n  );\n}\n\nMessageItem.propTypes = {\n  direction: PropTypes.string.isRequired,\n  subject: PropTypes.string.isRequired,\n  creationTime: PropTypes.string.isRequired,\n  showDate: PropTypes.bool.isRequired,\n};\n\nclass ConversationMessageList extends Component {\n  constructor(props) {\n    super(props);\n    let lastMessagesLength = 0;\n    this.scrollToLastMessage = () => {\n      const conversationBody = this.conversationBody;\n      if (!conversationBody) {\n        return;\n      }\n      if (this.props.messages.length === lastMessagesLength) {\n        return;\n      }\n      lastMessagesLength = props.messages.length;\n      conversationBody.scrollTop = conversationBody.scrollHeight;\n    };\n  }\n\n  componentDidMount() {\n    this.scrollToLastMessage();\n  }\n\n  componentDidUpdate() {\n    this.scrollToLastMessage();\n  }\n\n  render() {\n    const messages = this.props.messages;\n    let lastFormatedTime = null;\n    const messageList = messages.map((message) => {\n      const formatedTime = this.context.formatDateTime(message.creationTime);\n      let showDate = true;\n      if (lastFormatedTime === formatedTime) {\n        showDate = false;\n      }\n      lastFormatedTime = formatedTime;\n      return (\n        <MessageItem\n          key={message.id}\n          direction={message.direction}\n          subject={message.subject}\n          creationTime={formatedTime}\n          showDate={showDate}\n        />\n      );\n    });\n    return (\n      <div\n        className={styles.root}\n        ref={(body) => { this.conversationBody = body; }}\n      >\n        {messageList}\n      </div>\n    );\n  }\n}\n\nConversationMessageList.propTypes = {\n  messages: React.PropTypes.arrayOf(PropTypes.shape({\n    creationTime: PropTypes.string,\n    id: PropTypes.number,\n    direction: PropTypes.string,\n    subject: PropTypes.string,\n  })).isRequired,\n};\n\nConversationMessageList.contextTypes = {\n  formatDateTime: PropTypes.func.isRequired,\n};\n\nexport default ConversationMessageList;\n"]}