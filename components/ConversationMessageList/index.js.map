{"version":3,"sources":["components/ConversationMessageList/index.js"],"names":["Message","subject","time","direction","sender","SubjectRenderer","subjectRenderer","message","messageBody","outbound","inbound","length","big","clear","propTypes","string","isRequired","func","defaultProps","undefined","ConversationMessageList","scrollToLastMessage","conversationBody","scrollTop","scrollHeight","previousProps","messages","props","className","dateTimeFormatter","showSender","height","messageSubjectRenderer","lastDate","messageList","map","from","name","context","formatPhone","extensionNumber","phoneNumber","date","Date","creationTime","getHours","utcTimestamp","type","id","root","body","arrayOf","shape","number","bool","oneOfType","contextTypes"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\n\nexport function Message({\n  subject,\n  time,\n  direction,\n  sender,\n  subjectRenderer: SubjectRenderer,\n}) {\n  return (\n    <div className={styles.message}>\n      {\n        time ?\n          (\n            <div className={styles.time}>\n              {time}\n            </div>\n          ) :\n          null\n      }\n      {\n        (sender && direction === 'Inbound') ?\n          (\n            <div className={styles.sender}>\n              {sender}\n            </div>\n          ) :\n          null\n      }\n      <div\n        className={classnames(\n          styles.messageBody,\n          direction === 'Outbound' ? styles.outbound : styles.inbound,\n          (subject && subject.length > 500) && styles.big,\n        )}>\n        {\n          SubjectRenderer ? <SubjectRenderer subject={subject} /> : subject\n        }\n      </div>\n      <div className={styles.clear} />\n    </div>\n  );\n}\n\nMessage.propTypes = {\n  direction: PropTypes.string.isRequired,\n  subject: PropTypes.string,\n  time: PropTypes.string,\n  sender: PropTypes.string,\n  subjectRenderer: PropTypes.func,\n};\n\nMessage.defaultProps = {\n  subject: '',\n  sender: undefined,\n  time: undefined,\n  subjectRenderer: undefined,\n};\n\nclass ConversationMessageList extends Component {\n  componentDidMount() {\n    this.scrollToLastMessage();\n  }\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.messages.length !== this.props.messages.length) {\n      this.scrollToLastMessage();\n    }\n  }\n  scrollToLastMessage = () => {\n    if (this.conversationBody) {\n      this.conversationBody.scrollTop = this.conversationBody.scrollHeight;\n    }\n  }\n  render() {\n    const {\n      className,\n      dateTimeFormatter,\n      messages,\n      showSender,\n      height,\n      messageSubjectRenderer,\n    } = this.props;\n\n    let lastDate = 0;\n    const messageList = messages.map((message) => {\n      const sender = showSender ?\n        (\n          message.from.name ||\n          this.context.formatPhone(message.from.extensionNumber || message.from.phoneNumber)\n        ) :\n        null;\n      const date = new Date(message.creationTime);\n      const time = (date - lastDate < 60 * 60 * 1000 && date.getHours() === lastDate.getHours()) ?\n        null :\n        dateTimeFormatter({ utcTimestamp: message.creationTime, type: 'long' });\n      lastDate = date;\n      return (\n        <Message\n          key={message.id}\n          sender={sender}\n          time={time}\n          direction={message.direction}\n          subject={message.subject}\n          subjectRenderer={messageSubjectRenderer}\n        />\n      );\n    });\n    return (\n      <div\n        className={classnames(styles.root, className)}\n        style={{ height }}\n        ref={(body) => { this.conversationBody = body; }}\n      >\n        {messageList}\n      </div>\n    );\n  }\n}\n\nConversationMessageList.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    creationTime: PropTypes.string,\n    id: PropTypes.number,\n    direction: PropTypes.string,\n    subject: PropTypes.string,\n  })).isRequired,\n  className: PropTypes.string,\n  showSender: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  messageSubjectRenderer: PropTypes.func,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nConversationMessageList.defaultProps = {\n  className: null,\n  showSender: false,\n  messageSubjectRenderer: undefined,\n  height: '100%',\n};\n\nConversationMessageList.contextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n};\n\nexport default ConversationMessageList;\n"]}