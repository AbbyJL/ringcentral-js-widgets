{"version":3,"sources":["components/TransferPanel/index.js"],"names":["TransferPanel","props","onButtonOutput","key","state","recipient","setState","preState","value","toNumber","onTransfer","_getTransferNumber","onToNumberChange","clearToNumber","setRecipient","clearRecipient","phoneNumber","root","toggleTransferPanel","backButton","arrow","backIcon","getString","currentLocale","dialInput","searchContact","searchContactList","formatPhone","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","autoFocus","padContainer","dialPad","buttonRow","button","isOnTransfer","disabled","undefined","propTypes","func","isRequired","string","array","bool","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DialPad from '../DialPad';\nimport RecipientsInput from '../RecipientsInput';\nimport BackHeader from '../BackHeader';\nimport CircleButton from '../CircleButton';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport TransferIcon from '../../assets/images/Transfer.svg';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nexport default class TransferPanel extends PureComponent {\n  static propTypes = {\n    onTransfer: PropTypes.func.isRequired,\n    currentLocale: PropTypes.string.isRequired,\n    toggleTransferPanel: PropTypes.func.isRequired,\n    searchContactList: PropTypes.array.isRequired,\n    searchContact: PropTypes.func.isRequired,\n    formatPhone: PropTypes.func.isRequired,\n    phoneTypeRenderer: PropTypes.func,\n    recipientsContactInfoRenderer: PropTypes.func,\n    recipientsContactPhoneRenderer: PropTypes.func,\n    isOnTransfer: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    phoneTypeRenderer: undefined,\n    recipientsContactInfoRenderer: undefined,\n    recipientsContactPhoneRenderer: undefined,\n    isOnTransfer: false,\n    autoFocus: true,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      toNumber: '',\n      recipient: null,\n    };\n  }\n\n  _getTransferNumber() {\n    return (\n      (this.state.recipient && this.state.recipient.phoneNumber) ||\n      this.state.toNumber\n    );\n  }\n\n  onButtonOutput = (key) => {\n    if (this.state.recipient) {\n      return;\n    }\n    this.setState((preState) => {\n      const value = preState.toNumber + key;\n      return { toNumber: value };\n    });\n  }\n\n  onTransfer = () => {\n    this.props.onTransfer(this._getTransferNumber());\n  }\n\n  onToNumberChange = (toNumber) => {\n    this.setState({\n      toNumber\n    });\n  }\n\n  clearToNumber = () => {\n    this.setState({\n      toNumber: '',\n    });\n  }\n\n  setRecipient = (recipient) => {\n    this.setState({\n      recipient,\n      toNumber: '',\n    });\n  }\n\n  clearRecipient = () => {\n    this.setState({ recipient: null });\n  }\n\n  render() {\n    return (\n      <div className={styles.root}>\n        <BackHeader\n          onBackClick={this.props.toggleTransferPanel}\n          backButton={(\n            <span className={styles.backButton}>\n              <i className={classnames(dynamicsFont.arrow, styles.backIcon)} />\n            </span>\n          )}\n        >\n          {i18n.getString('transferTo', this.props.currentLocale)}\n        </BackHeader>\n        <RecipientsInput\n          className={styles.dialInput}\n          value={this.state.toNumber}\n          onChange={this.onToNumberChange}\n          onClean={this.clearToNumber}\n          recipient={this.state.recipient}\n          addToRecipients={this.setRecipient}\n          removeFromRecipients={this.clearRecipient}\n          searchContact={this.props.searchContact}\n          searchContactList={this.props.searchContactList}\n          formatContactPhone={this.props.formatPhone}\n          currentLocale={this.props.currentLocale}\n          phoneTypeRenderer={this.props.phoneTypeRenderer}\n          contactInfoRenderer={this.props.recipientsContactInfoRenderer}\n          contactPhoneRenderer={this.props.recipientsContactPhoneRenderer}\n          titleEnabled\n          autoFocus={this.props.autoFocus}\n        />\n        <div className={styles.padContainer}>\n          <DialPad\n            className={styles.dialPad}\n            onButtonOutput={this.onButtonOutput}\n          />\n          <div className={styles.buttonRow}>\n            <div className={styles.button}>\n              <CircleButton\n                className={this.props.isOnTransfer ? styles.disabled : undefined}\n                onClick={this.onTransfer}\n                icon={TransferIcon}\n                disabled={this.props.isOnTransfer}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}