{"version":3,"sources":["components/MessagesPanel/index.js"],"names":["TabTitle","type","currentLocale","tabTitle","getString","propTypes","string","isRequired","MessagesPanel","props","onTabChanged","updateTypeFilter","tabs","icon","all","label","path","isActive","voiceMail","noticeCounts","voiceUnreadCounts","text","textUnreadCounts","tabBar","typeFilter","showSpinner","showTitle","showComposeText","composeText","buttons","push","onClick","placement","header","tabsHeader","renderTabs","content","contentWithHeader","root","bool","showContactDisplayPlaceholder","sourceIcons","object","func","showConversationDetail","number","showGroupNumberName","onClickToDial","onClickToSms","markVoicemail","readVoicemail","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport messageTypes from 'ringcentral-integration/enums/messageTypes';\r\nimport Header from '../../components/Header';\r\nimport SpinnerOverlay from '../../components/SpinnerOverlay';\r\nimport MessageList from '../../components/MessageList';\r\nimport MessageTabButton from '../../components/MessageTabButton';\r\nimport NavigationBar from '../../components/NavigationBar';\r\nimport ComposeText from '../../assets/images/ComposeText.svg';\r\nimport styles from './styles.scss';\r\nimport i18n from './i18n';\r\n\r\nfunction TabTitle({\r\n  type,\r\n  currentLocale,\r\n}) {\r\n  return (\r\n    <span className={styles.tabTitle}>\r\n      {i18n.getString(type, currentLocale)}\r\n    </span>\r\n  );\r\n}\r\n\r\nTabTitle.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  currentLocale: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default class MessagesPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onTabChanged = (type) => {\r\n      if (typeof this.props.updateTypeFilter === 'function') {\r\n        this.props.updateTypeFilter(type);\r\n      }\r\n    };\r\n  }\r\n\r\n  renderTabs() {\r\n    const tabs = [\r\n      {\r\n        icon: <TabTitle type={messageTypes.all} currentLocale={this.props.currentLocale} />,\r\n        label: i18n.getString(messageTypes.all, this.props.currentLocale),\r\n        path: messageTypes.all,\r\n        isActive: path => path === messageTypes.all,\r\n      },\r\n      {\r\n        icon: <TabTitle type={messageTypes.voiceMail} currentLocale={this.props.currentLocale} />,\r\n        label: i18n.getString(messageTypes.voiceMail, this.props.currentLocale),\r\n        path: messageTypes.voiceMail,\r\n        isActive: path => path === messageTypes.voiceMail,\r\n        noticeCounts: this.props.voiceUnreadCounts,\r\n      },\r\n      {\r\n        icon: <TabTitle type={messageTypes.text} currentLocale={this.props.currentLocale} />,\r\n        label: i18n.getString(messageTypes.text, this.props.currentLocale),\r\n        path: messageTypes.text,\r\n        isActive: path => path === messageTypes.text,\r\n        noticeCounts: this.props.textUnreadCounts,\r\n      },\r\n    ];\r\n    return (\r\n      <NavigationBar\r\n        button={MessageTabButton}\r\n        className={styles.tabBar}\r\n        currentPath={this.props.typeFilter}\r\n        goTo={this.onTabChanged}\r\n        tabs={tabs}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      currentLocale,\r\n      showSpinner,\r\n      showTitle,\r\n      showComposeText,\r\n      composeText,\r\n      ...props,\r\n    } = this.props;\r\n    const buttons = [];\r\n    if (showComposeText) {\r\n      buttons.push({\r\n        label: <ComposeText className={styles.composeText} />,\r\n        onClick: composeText,\r\n        placement: 'right',\r\n      });\r\n    }\r\n    const header = showTitle ?\r\n      (\r\n        <Header buttons={buttons}>\r\n          {i18n.getString('title', currentLocale)}\r\n        </Header>\r\n      ) :\r\n      null;\r\n    const tabsHeader = this.renderTabs();\r\n    const content = showSpinner ?\r\n      <SpinnerOverlay /> :\r\n      (\r\n        <MessageList\r\n          className={classnames(\r\n            styles.content,\r\n            showTitle && styles.contentWithHeader\r\n          )}\r\n          {...props}\r\n          currentLocale={currentLocale}\r\n        />\r\n      );\r\n    return (\r\n      <div className={styles.root}>\r\n        {header}\r\n        {tabsHeader}\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMessagesPanel.propTypes = {\r\n  currentLocale: PropTypes.string.isRequired,\r\n  showSpinner: PropTypes.bool,\r\n  showTitle: PropTypes.bool,\r\n  showContactDisplayPlaceholder: PropTypes.bool,\r\n  sourceIcons: PropTypes.object,\r\n  showComposeText: PropTypes.bool,\r\n  composeText: PropTypes.func.isRequired,\r\n  typeFilter: PropTypes.string,\r\n  updateTypeFilter: PropTypes.func,\r\n  showConversationDetail: PropTypes.func.isRequired,\r\n  textUnreadCounts: PropTypes.number.isRequired,\r\n  voiceUnreadCounts: PropTypes.number.isRequired,\r\n  showGroupNumberName: PropTypes.bool,\r\n  onClickToDial: PropTypes.func,\r\n  onClickToSms: PropTypes.func,\r\n  markVoicemail: PropTypes.func.isRequired,\r\n  readVoicemail: PropTypes.func.isRequired,\r\n};\r\n\r\nMessagesPanel.defaultProps = {\r\n  showSpinner: false,\r\n  showTitle: false,\r\n  showContactDisplayPlaceholder: true,\r\n  sourceIcons: undefined,\r\n  showComposeText: false,\r\n  typeFilter: messageTypes.all,\r\n  updateTypeFilter: undefined,\r\n  showGroupNumberName: false,\r\n  onClickToDial: undefined,\r\n  onClickToSms: undefined,\r\n};\r\n"]}