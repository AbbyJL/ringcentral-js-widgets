{"version":3,"sources":["components/SettingsPanel/index.js"],"names":["SettingsPanel","children","showRegion","className","onLogoutButtonClick","loginNumber","version","currentLocale","brandId","EulaRenderer","region","getString","root","content","RC_Logout","eulaContainer","eula","propTypes","bool","isRequired","string","func","callingSettingsUrl","defaultProps"],"mappings":";;;;;kBAgBwBA,a;;AAhBxB;;;;AACA;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,aAAT,OAUV;AAAA,MATDC,QASC,QATDA,QASC;AAAA,MARDC,UAQC,QARDA,UAQC;AAAA,MAPDC,SAOC,QAPDA,SAOC;AAAA,MANDC,mBAMC,QANDA,mBAMC;AAAA,MALDC,WAKC,QALDA,WAKC;AAAA,MAJDC,OAIC,QAJDA,OAIC;AAAA,MAHDC,aAGC,QAHDA,aAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADDC,YACC,QADDA,YACC;;AACH,MAAMC,SAASR,aAEX;AAAA;AAAA;AACE,UAAG;AADL;AAGG,mBAAKS,SAAL,CAAe,QAAf;AAHH,GAFW,GAQb,IARF;AASA,SACE;AAAA;AAAA,MAAK,WAAW,0BAAW,iBAAOC,IAAlB,EAAwBT,SAAxB,CAAhB;AACE;AAAA;AAAA;AACG,qBAAKQ,SAAL,CAAe,UAAf;AADH,KADF;AAIE;AAAA;AAAA,QAAO,WAAW,iBAAOE,OAAzB;AACE;AAAA;AAAA;AACE,cAAG;AADL;AAGG,uBAAKF,SAAL,CAAe,SAAf;AAHH,OADF;AAMGD,YANH;AAOGT,cAPH;AAQE;AAAA;AAAA;AACE,mBAASG,mBADX;AAEE,gBAAM,wCAAM,WAAW,iBAAOU,SAAxB;AAFR;AAIG,uBAAKH,SAAL,CAAe,QAAf,CAJH;AAAA;AAI8BN;AAJ9B,OARF;AAcE;AAAA;AAAA;AACG,uBAAKM,SAAL,CAAe,SAAf,CADH;AAAA;AAC+BL;AAD/B,OAdF;AAiBE;AAAA;AAAA,UAAK,WAAW,iBAAOS,aAAvB;AACE,sCAAC,YAAD;AACE,qBAAW,iBAAOC,IADpB;AAEE,yBAAeT,aAFjB;AAGE,mBAASC;AAHX;AADF;AAjBF;AAJF,GADF;AAgCD;;AAEDR,cAAciB,SAAd,GAA0B;AACxBf,cAAY,iBAAUgB,IAAV,CAAeC,UADH;AAExBhB,aAAW,iBAAUiB,MAFG;AAGxBf,eAAa,iBAAUe,MAAV,CAAiBD,UAHN;AAIxBf,uBAAqB,iBAAUiB,IAAV,CAAeF,UAJZ;AAKxBb,WAAS,iBAAUc,MAAV,CAAiBD,UALF;AAMxBX,WAAS,iBAAUY,MAAV,CAAiBD,UANF;AAOxBZ,iBAAe,iBAAUa,MAAV,CAAiBD,UAPR;AAQxBV,gBAAc,iBAAUY,IARA;AASxBC,sBAAoB,iBAAUF,MAAV,CAAiBD;AATb,CAA1B;AAWAnB,cAAcuB,YAAd,GAA6B;AAC3Bd;AAD2B,CAA7B","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\nimport classnames from 'classnames';\n\nimport rcFont from '../../../src/assets/RcFont/RcFont.scss';\nimport Header from '../../../src/components/Header';\nimport Panel from '../../../src/components/Panel';\nimport Line from '../../../src/components/Line';\nimport LinkLine from '../../../src/components/LinkLine';\nimport IconLine from '../../../src/components/IconLine';\nimport Eula from '../../../src/components/Eula';\nimport styles from './styles.scss';\nimport Switch from '../../../src/components/Switch';\nimport i18n from './i18n';\n\nexport default function SettingsPanel({\n    children,\n    showRegion,\n    className,\n    onLogoutButtonClick,\n    loginNumber,\n    version,\n    currentLocale,\n    brandId,\n    EulaRenderer,\n  }) {\n  const region = showRegion ?\n    (\n      <LinkLine\n        to=\"/settings/region\"\n        >\n        {i18n.getString('region')}\n      </LinkLine>\n    ) :\n    null;\n  return (\n    <div className={classnames(styles.root, className)}>\n      <Header>\n        {i18n.getString('settings')}\n      </Header>\n      <Panel className={styles.content}>\n        <LinkLine\n          to=\"/settings/calling\"\n          >\n          {i18n.getString('calling')}\n        </LinkLine>\n        {region}\n        {children}\n        <IconLine\n          onClick={onLogoutButtonClick}\n          icon={<span className={rcFont.RC_Logout} />}\n          >\n          {i18n.getString('logout')} {loginNumber}\n        </IconLine>\n        <Line>\n          {i18n.getString('version')} {version}\n        </Line>\n        <div className={styles.eulaContainer} >\n          <EulaRenderer\n            className={styles.eula}\n            currentLocale={currentLocale}\n            brandId={brandId}\n            />\n        </div>\n      </Panel>\n    </div>\n  );\n}\n\nSettingsPanel.propTypes = {\n  showRegion: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n  loginNumber: PropTypes.string.isRequired,\n  onLogoutButtonClick: PropTypes.func.isRequired,\n  version: PropTypes.string.isRequired,\n  brandId: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  EulaRenderer: PropTypes.func,\n  callingSettingsUrl: PropTypes.string.isRequired,\n};\nSettingsPanel.defaultProps = {\n  EulaRenderer: Eula,\n};\n"]}