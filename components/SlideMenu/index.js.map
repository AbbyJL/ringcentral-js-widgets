{"version":3,"sources":["components/SlideMenu/index.js"],"names":["ToggleButton","onClick","toggleButton","toggleButtonInner","toggleButtonIcon","arrow","propTypes","func","defaultProps","undefined","ExtendIcon","extendIconClassName","extendIcon","extendInner","extendInnerIcon","SlideMenu","props","onToggle","e","stopPropagation","setState","extended","prevState","state","nextProps","_mounted","className","minHeight","maxHeight","children","wrapperStyles","height","root","wrapper","content","node","bool","string","number"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport dynamicsFonts from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\n\nfunction ToggleButton({\n  onClick,\n}) {\n  return (\n    <div\n      className={styles.toggleButton}\n      onClick={onClick}\n    >\n      <div className={styles.toggleButtonInner} />\n      <div className={styles.toggleButtonIcon} >\n        <span className={classnames(dynamicsFonts.arrow)} />\n      </div>\n    </div>\n  );\n}\nToggleButton.propTypes = {\n  onClick: PropTypes.func,\n};\nToggleButton.defaultProps = {\n  onClick: undefined,\n};\n\nfunction ExtendIcon({ onClick, extendIconClassName }) {\n  return (\n    <div className={styles.extendIcon} onClick={onClick}>\n      <div className={classnames(extendIconClassName, styles.extendInner)} />\n      <div className={styles.extendInnerIcon} />\n    </div>\n  );\n}\n\nexport default class SlideMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extended: false,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.extended !== this.props.extended) {\n      this.setState({\n        extended: nextProps.extended\n      });\n    }\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onToggle = (e) => {\n    e.stopPropagation();\n    this.setState(prevState => ({ extended: !prevState.extended }));\n    if (this.props.onToggle) {\n      this.props.onToggle(e);\n    }\n  }\n  render() {\n    const {\n      className,\n      minHeight,\n      maxHeight,\n      children,\n    } = this.props;\n    const {\n      extended,\n    } = this.state;\n\n    const wrapperStyles = {\n      height: extended ?\n        maxHeight :\n        minHeight,\n    };\n\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          className\n        )}\n      >\n        <div className={styles.wrapper} style={wrapperStyles}>\n          <div\n            className={styles.content}\n          >\n            {children}\n          </div>\n        </div>\n        <ExtendIcon extendIconClassName={this.props.extendIconClassName} onClick={this.onToggle} />\n      </div>\n    );\n  }\n}\n\nSlideMenu.propTypes = {\n  children: PropTypes.node,\n  extended: PropTypes.bool,\n  onToggle: PropTypes.func,\n  className: PropTypes.string,\n  extendIconClassName: PropTypes.string,\n  minHeight: PropTypes.number,\n  maxHeight: PropTypes.number,\n};\nSlideMenu.defaultProps = {\n  className: undefined,\n  extendIconClassName: undefined,\n  children: undefined,\n  minHeight: 0,\n  maxHeight: 100,\n};\n"]}