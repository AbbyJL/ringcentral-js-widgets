{"version":3,"sources":["components/MessageItem/index.js"],"names":["ConversationIcon","group","conversationTitle","groupConversationTitle","title","conversationIcon","groupConversation","composeText","propTypes","bool","string","defaultProps","undefined","MessageItem","props","onSelectContact","value","idx","selected","showContactDisplayPlaceholder","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","viewSelectedContact","onViewContact","phoneNumber","getPhoneNumber","contact","createSelectedContact","bind","clickToDial","onClickToDial","showConversationDetail","e","contactDisplay","contains","target","conversationId","getInitialContactIndex","isLogging","isCreating","_mounted","nextProps","lastMatchedCorrespondentEntity","index","findIndex","id","correspondents","extensionNumber","groupNumbers","map","correspondent","name","entityType","onCreateContact","enableContactFallback","getFallbackContactName","onLogConversation","correspondentEntity","areaCode","brand","countryCode","currentLocale","unreadCounts","creationTime","subject","disableLinks","disableClickToDial","dateTimeFormatter","getGroupPhoneNumbers","fallbackName","root","wrapper","unread","getString","ref","dropdownSelect","details","utcTimestamp","extendIcon","shape","isRequired","arrayOf","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ContactDisplay from '../ContactDisplay';\nimport ActionMenu from '../ActionMenu';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction ConversationIcon({\n  group,\n  conversationTitle,\n  groupConversationTitle,\n}) {\n  const title = group ? groupConversationTitle : conversationTitle;\n  return (\n    <div className={styles.conversationIcon}>\n      <span\n        className={classnames(\n          group ? dynamicsFont.groupConversation : dynamicsFont.composeText\n        )}\n        title={title}\n      />\n    </div>\n  );\n}\nConversationIcon.propTypes = {\n  group: PropTypes.bool,\n  conversationTitle: PropTypes.string,\n  groupConversationTitle: PropTypes.string,\n};\nConversationIcon.defaultProps = {\n  group: false,\n  conversationTitle: undefined,\n  groupConversationTitle: undefined,\n};\n\nexport default class MessageItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      isCreating: false,\n    };\n    this._userSelection = false;\n    /* [RCINT-4301] onSelection would trigger some state changes that would push new\n     * properties before the state has been changed. Which would reset the selected value.\n     */\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = this.props.showContactDisplayPlaceholder\n      ? parseInt(idx, 10) - 1 : parseInt(idx, 10);\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  viewSelectedContact = () => {\n    if (typeof this.props.onViewContact === 'function') {\n      this.props.onViewContact({\n        phoneNumber: this.getPhoneNumber(),\n        contact: this.getSelectedContact(),\n      });\n    }\n  }\n  async createSelectedContact(entityType) {\n    // console.log('click createSelectedContact!!', entityType);\n    if (typeof this.props.onCreateContact === 'function' &&\n      this._mounted &&\n      !this.state.isCreating) {\n      this.setState({\n        isCreating: true,\n      });\n      // console.log('start to create: isCreating...', this.state.isCreating);\n      const phoneNumber = this.getPhoneNumber();\n      await this.props.onCreateContact({\n        phoneNumber,\n        name: this.props.enableContactFallback ? this.getFallbackContactName() : '',\n        entityType,\n      });\n\n      if (this._mounted) {\n        this.setState({\n          isCreating: false,\n        });\n        // console.log('created: isCreating...', this.state.isCreating);\n      }\n    }\n  }\n  createSelectedContact = this.createSelectedContact.bind(this);\n\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n  logConversation = this.logConversation.bind(this)\n\n  clickToDial = () => {\n    if (this.props.onClickToDial) {\n      this.props.onClickToDial(this.getPhoneNumber());\n    }\n  }\n  showConversationDetail = (e) => {\n    if ((\n      this.contactDisplay &&\n      this.contactDisplay.contains(e.target))\n    ) {\n      return;\n    }\n    this.props.showConversationDetail(this.props.conversation.conversationId);\n  }\n\n  render() {\n    const {\n      areaCode,\n      brand,\n      countryCode,\n      currentLocale,\n      conversation: {\n        unreadCounts,\n        correspondents,\n        correspondentMatches,\n        creationTime,\n        subject,\n        isLogging,\n        conversationMatches,\n      },\n      disableLinks,\n      disableClickToDial,\n      onClickToDial,\n      onLogConversation,\n      onViewContact,\n      onCreateContact,\n      dateTimeFormatter,\n      enableContactFallback,\n      showContactDisplayPlaceholder\n    } = this.props;\n\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    return (\n      <div className={styles.root} onClick={this.showConversationDetail}>\n        <div\n          className={classnames(\n            styles.wrapper,\n            unreadCounts && styles.unread\n          )}\n        >\n          <ConversationIcon\n            group={correspondents.length > 1}\n            conversationTitle={i18n.getString('conversation', currentLocale)}\n            groupConversationTitle={i18n.getString('groupConversation', currentLocale)}\n          />\n          <ContactDisplay\n            reference={(ref) => { this.contactDisplay = ref; }}\n            className={classnames(\n              styles.contactDisplay,\n              unreadCounts && styles.unread\n            )}\n            selectClassName={styles.dropdownSelect}\n            brand={brand}\n            contactMatches={correspondentMatches}\n            selected={this.state.selected}\n            onSelectContact={this.onSelectContact}\n            disabled={disableLinks}\n            isLogging={isLogging || this.state.isLogging}\n            fallBackName={fallbackName}\n            areaCode={areaCode}\n            countryCode={countryCode}\n            phoneNumber={phoneNumber}\n            groupNumbers={groupNumbers}\n            currentLocale={currentLocale}\n            enableContactFallback={enableContactFallback}\n            stopPropagation={false}\n            showType={false}\n            showPlaceholder={showContactDisplayPlaceholder}\n          />\n          <div className={styles.details}>\n            {dateTimeFormatter({ utcTimestamp: creationTime })} | {subject}\n          </div>\n        </div>\n        <ActionMenu\n          extendIconClassName={styles.extendIcon}\n          currentLocale={currentLocale}\n          onLog={onLogConversation && this.logConversation}\n          onViewEntity={onViewContact && this.viewSelectedContact}\n          onCreateEntity={onCreateContact && this.createSelectedContact}\n          hasEntity={correspondents.length === 1 && !!correspondentMatches.length}\n          onClickToDial={onClickToDial && this.clickToDial}\n          phoneNumber={phoneNumber}\n          disableLinks={disableLinks}\n          disableClickToDial={disableClickToDial}\n          isLogging={isLogging || this.state.isLogging}\n          isLogged={conversationMatches.length > 0}\n          isCreating={this.state.isCreating}\n          addLogTitle={i18n.getString('addLog', currentLocale)}\n          editLogTitle={i18n.getString('editLog', currentLocale)}\n          callTitle={i18n.getString('call', currentLocale)}\n          createEntityTitle={i18n.getString('addEntity', currentLocale)}\n          viewEntityTitle={i18n.getString('viewDetails', currentLocale)}\n          stopPropagation={false}\n        />\n      </div>\n    );\n  }\n}\n\nMessageItem.propTypes = {\n  conversation: PropTypes.shape({\n    conversationId: PropTypes.string.isRequired,\n    isLogging: PropTypes.bool,\n    correspondents: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      extensionNumber: PropTypes.string,\n    })),\n    correspondentMatches: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      entityType: PropTypes.string,\n    })),\n    conversationMatches: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string,\n    })),\n  }).isRequired,\n  areaCode: PropTypes.string.isRequired,\n  brand: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onLogConversation: PropTypes.func,\n  onViewContact: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  disableLinks: PropTypes.bool,\n  disableClickToDial: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  showConversationDetail: PropTypes.func.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  showContactDisplayPlaceholder: PropTypes.bool,\n};\n\nMessageItem.defaultProps = {\n  onLogConversation: undefined,\n  onClickToDial: undefined,\n  onViewContact: undefined,\n  onCreateContact: undefined,\n  disableClickToDial: false,\n  disableLinks: false,\n  autoLog: false,\n  enableContactFallback: undefined,\n  showContactDisplayPlaceholder: true,\n};\n"]}