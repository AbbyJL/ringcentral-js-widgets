{"version":3,"sources":["components/MessageItem/index.js"],"names":["MessageItem","props","className","unreadCounts","messageItem","unRead","contactList","map","contactName","slice","indexOf","conversationId","messageLink","typeIcon","composeText","messageContent","messageFrom","join","messageText","subject","messageInfo","messageTime","formatDateTime","creationTime","contactInfo","information","propTypes","type","string","isRequired","number","arrayOf","func","defaultProps"],"mappings":";;;;;kBAOwBA,W;;AAPxB;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACzC,MAAIC,YAAY,IAAhB;AACA,MAAID,MAAME,YAAN,GAAqB,CAAzB,EAA4B;AAC1BD,gBAAY,0BAAW,iBAAOE,WAAlB,EAA+B,iBAAOC,MAAtC,CAAZ;AACD,GAFD,MAEO;AACLH,gBAAY,iBAAOE,WAAnB;AACD;AACD,MAAME,cAAcL,MAAMK,WAAN,CAAkBC,GAAlB,CAClB;AAAA,WAAeC,YAAYC,KAAZ,CAAkB,CAAlB,EAAqBD,YAAYE,OAAZ,CAAoB,GAApB,CAArB,CAAf;AAAA,GADkB,CAApB;AAEA,SACE;AAAA;AAAA,MAAK,WAAWR,SAAhB;AACE;AAAA;AAAA;AACE,gCAAsBD,MAAMU,cAD9B;AAEE,mBAAW,iBAAOC;AAFpB;AAIE;AAAA;AAAA,UAAK,WAAW,iBAAOC,QAAvB;AACE,gDAAM,WAAW,uBAAaC,WAA9B;AADF,OAJF;AAOE;AAAA;AAAA,UAAK,WAAW,iBAAOC,cAAvB;AACE;AAAA;AAAA,YAAK,WAAW,iBAAOC,WAAvB;AACGV,sBAAYW,IAAZ,CAAiB,GAAjB;AADH,SADF;AAIE;AAAA;AAAA,YAAK,WAAW,iBAAOC,WAAvB;AAAqCjB,gBAAMkB;AAA3C,SAJF;AAKE;AAAA;AAAA,YAAK,WAAW,iBAAOC,WAAvB;AACE;AAAA;AAAA,cAAK,WAAW,iBAAOC,WAAvB;AAAqCpB,kBAAMqB,cAAN,CAAqBrB,MAAMsB,YAA3B;AAArC;AADF;AALF;AAPF,KADF;AAkBE;AAAA;AAAA;AACE,YAAI,WADN;AAEE,mBAAW,iBAAOX;AAFpB;AAIE;AAAA;AAAA,UAAK,WAAW,iBAAOY,WAAvB;AACE,gDAAM,WAAW,uBAAaC,WAA9B;AADF;AAJF;AAlBF,GADF;AA6BD;;AAEDzB,YAAY0B,SAAZ,GAAwB;AACtBC,QAAM,iBAAUC,MAAV,CAAiBC,UADD;AAEtB1B,gBAAc,iBAAU2B,MAFF;AAGtBnB,kBAAgB,iBAAUiB,MAAV,CAAiBC,UAHX;AAItBV,WAAS,iBAAUS,MAJG;AAKtBtB,eAAa,iBAAUyB,OAAV,CAAkB,iBAAUH,MAA5B,EAAoCC,UAL3B;AAMtBN,gBAAc,iBAAUK,MAAV,CAAiBC,UANT;AAOtBP,kBAAgB,iBAAUU,IAAV,CAAeH;AAPT,CAAxB;;AAUA7B,YAAYiC,YAAZ,GAA2B;AACzB9B,gBAAc,CADW;AAEzBgB,WAAS;AAFgB,CAA3B","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { Link } from 'react-router';\n\nimport classnames from 'classnames';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\n\nexport default function MessageItem(props) {\n  let className = null;\n  if (props.unreadCounts > 0) {\n    className = classnames(styles.messageItem, styles.unRead);\n  } else {\n    className = styles.messageItem;\n  }\n  const contactList = props.contactList.map(\n    contactName => contactName.slice(0, contactName.indexOf('|')));\n  return (\n    <div className={className}>\n      <Link\n        to={`/conversations/${props.conversationId}`}\n        className={styles.messageLink}\n      >\n        <div className={styles.typeIcon}>\n          <span className={dynamicsFont.composeText} />\n        </div>\n        <div className={styles.messageContent}>\n          <div className={styles.messageFrom}>\n            {contactList.join(',')}\n          </div>\n          <div className={styles.messageText}>{props.subject}</div>\n          <div className={styles.messageInfo}>\n            <div className={styles.messageTime}>{props.formatDateTime(props.creationTime)}</div>\n          </div>\n        </div>\n      </Link>\n      <Link\n        to={'/messages'}\n        className={styles.messageLink}\n      >\n        <div className={styles.contactInfo}>\n          <span className={dynamicsFont.information} />\n        </div>\n      </Link>\n    </div>\n  );\n}\n\nMessageItem.propTypes = {\n  type: PropTypes.string.isRequired,\n  unreadCounts: PropTypes.number,\n  conversationId: PropTypes.string.isRequired,\n  subject: PropTypes.string,\n  contactList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  creationTime: PropTypes.string.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n};\n\nMessageItem.defaultProps = {\n  unreadCounts: 0,\n  subject: '',\n};\n"]}