{"version":3,"sources":["components/MessageItem/index.js"],"names":["ConversationIcon","group","conversationTitle","groupConversationTitle","title","conversationIcon","groupConversation","composeText","propTypes","bool","string","defaultProps","undefined","MessageItem","props","onSelectContact","value","idx","selected","showContactDisplayPlaceholder","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","viewSelectedContact","onViewContact","phoneNumber","getPhoneNumber","contact","createSelectedContact","bind","clickToDial","onClickToDial","showConversationDetail","e","contactDisplay","contains","target","actionMenu","conversationId","getInitialContactIndex","isLogging","isCreating","_mounted","nextProps","lastMatchedCorrespondentEntity","index","findIndex","id","correspondents","extensionNumber","groupNumbers","map","correspondent","name","entityType","onCreateContact","enableContactFallback","getFallbackContactName","onLogConversation","correspondentEntity","areaCode","brand","countryCode","currentLocale","unreadCounts","creationTime","subject","disableLinks","disableClickToDial","dateTimeFormatter","getGroupPhoneNumbers","fallbackName","root","unread","getString","ref","dropdownSelect","details","utcTimestamp","shape","isRequired","arrayOf","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ContactDisplay from '../ContactDisplay';\nimport ActionMenu from '../ActionMenu';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction ConversationIcon({\n  group,\n  conversationTitle,\n  groupConversationTitle,\n}) {\n  const title = group ? groupConversationTitle : conversationTitle;\n  return (\n    <div className={styles.conversationIcon}>\n      <span\n        className={classnames(\n          group ? dynamicsFont.groupConversation : dynamicsFont.composeText\n        )}\n        title={title}\n      />\n    </div>\n  );\n}\nConversationIcon.propTypes = {\n  group: PropTypes.bool,\n  conversationTitle: PropTypes.string,\n  groupConversationTitle: PropTypes.string,\n};\nConversationIcon.defaultProps = {\n  group: false,\n  conversationTitle: undefined,\n  groupConversationTitle: undefined,\n};\n\nexport default class MessageItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      isCreating: false,\n    };\n    this._userSelection = false;\n    /* [RCINT-4301] onSelection would trigger some state changes that would push new\n     * properties before the state has been changed. Which would reset the selected value.\n     */\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = this.props.showContactDisplayPlaceholder\n      ? parseInt(idx, 10) - 1 : parseInt(idx, 10);\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  viewSelectedContact = () => {\n    if (typeof this.props.onViewContact === 'function') {\n      this.props.onViewContact({\n        phoneNumber: this.getPhoneNumber(),\n        contact: this.getSelectedContact(),\n      });\n    }\n  }\n  async createSelectedContact(entityType) {\n    // console.log('click createSelectedContact!!', entityType);\n    if (typeof this.props.onCreateContact === 'function' &&\n      this._mounted &&\n      !this.state.isCreating) {\n      this.setState({\n        isCreating: true,\n      });\n      // console.log('start to create: isCreating...', this.state.isCreating);\n      const phoneNumber = this.getPhoneNumber();\n      await this.props.onCreateContact({\n        phoneNumber,\n        name: this.props.enableContactFallback ? this.getFallbackContactName() : '',\n        entityType,\n      });\n\n      if (this._mounted) {\n        this.setState({\n          isCreating: false,\n        });\n        // console.log('created: isCreating...', this.state.isCreating);\n      }\n    }\n  }\n  createSelectedContact = this.createSelectedContact.bind(this);\n\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n  logConversation = this.logConversation.bind(this)\n\n  clickToDial = () => {\n    if (this.props.onClickToDial) {\n      this.props.onClickToDial(this.getPhoneNumber());\n    }\n  }\n  showConversationDetail = (e) => {\n    // if (e.captureClick === false) {\n    //   delete e.captureClick;\n    //   return;\n    // }\n    if ((\n      this.contactDisplay &&\n      this.contactDisplay.contains(e.target)) ||\n      this.actionMenu.contains(e.target)\n    ) {\n      return;\n    }\n    this.props.showConversationDetail(this.props.conversation.conversationId);\n  }\n\n  render() {\n    const {\n      areaCode,\n      brand,\n      countryCode,\n      currentLocale,\n      conversation: {\n        unreadCounts,\n        correspondents,\n        correspondentMatches,\n        creationTime,\n        subject,\n        isLogging,\n        conversationMatches,\n      },\n      disableLinks,\n      disableClickToDial,\n      onClickToDial,\n      onLogConversation,\n      onViewContact,\n      onCreateContact,\n      dateTimeFormatter,\n      enableContactFallback,\n      showContactDisplayPlaceholder\n    } = this.props;\n\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          unreadCounts && styles.unread\n        )}\n        onClick={this.showConversationDetail}\n      >\n        <ConversationIcon\n          group={correspondents.length > 1}\n          conversationTitle={i18n.getString('conversation', currentLocale)}\n          groupConversationTitle={i18n.getString('groupConversation', currentLocale)}\n        />\n        <ContactDisplay\n          reference={(ref) => { this.contactDisplay = ref; }}\n          className={classnames(\n            styles.contactDisplay,\n            unreadCounts && styles.unread\n          )}\n          selectClassName={styles.dropdownSelect}\n          brand={brand}\n          contactMatches={correspondentMatches}\n          selected={this.state.selected}\n          onSelectContact={this.onSelectContact}\n          disabled={disableLinks}\n          isLogging={isLogging || this.state.isLogging}\n          fallBackName={fallbackName}\n          areaCode={areaCode}\n          countryCode={countryCode}\n          phoneNumber={phoneNumber}\n          groupNumbers={groupNumbers}\n          currentLocale={currentLocale}\n          enableContactFallback={enableContactFallback}\n          stopPropagation={false}\n          showType={false}\n          showPlaceholder={showContactDisplayPlaceholder}\n        />\n        <div className={styles.details}>\n          {dateTimeFormatter({ utcTimestamp: creationTime })} | {subject}\n        </div>\n        <ActionMenu\n          reference={(ref) => { this.actionMenu = ref; }}\n          currentLocale={currentLocale}\n          onLog={onLogConversation && this.logConversation}\n          onViewEntity={onViewContact && this.viewSelectedContact}\n          onCreateEntity={onCreateContact && this.createSelectedContact}\n          hasEntity={correspondents.length === 1 && !!correspondentMatches.length}\n          onClickToDial={onClickToDial && this.clickToDial}\n          phoneNumber={phoneNumber}\n          disableLinks={disableLinks}\n          disableClickToDial={disableClickToDial}\n          isLogging={isLogging || this.state.isLogging}\n          isLogged={conversationMatches.length > 0}\n          isCreating={this.state.isCreating}\n          addLogTitle={i18n.getString('addLog', currentLocale)}\n          editLogTitle={i18n.getString('editLog', currentLocale)}\n          callTitle={i18n.getString('call', currentLocale)}\n          createEntityTitle={i18n.getString('addEntity', currentLocale)}\n          viewEntityTitle={i18n.getString('viewDetails', currentLocale)}\n          stopPropagation={false}\n        />\n      </div>\n    );\n  }\n}\n\nMessageItem.propTypes = {\n  conversation: PropTypes.shape({\n    conversationId: PropTypes.string.isRequired,\n    isLogging: PropTypes.bool,\n    correspondents: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      extensionNumber: PropTypes.string,\n    })),\n    correspondentMatches: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      entityType: PropTypes.string,\n    })),\n    conversationMatches: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string,\n    })),\n  }).isRequired,\n  areaCode: PropTypes.string.isRequired,\n  brand: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onLogConversation: PropTypes.func,\n  onViewContact: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  disableLinks: PropTypes.bool,\n  disableClickToDial: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  showConversationDetail: PropTypes.func.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  showContactDisplayPlaceholder: PropTypes.bool,\n};\n\nMessageItem.defaultProps = {\n  onLogConversation: undefined,\n  onClickToDial: undefined,\n  onViewContact: undefined,\n  onCreateContact: undefined,\n  disableClickToDial: false,\n  disableLinks: false,\n  autoLog: false,\n  enableContactFallback: undefined,\n  showContactDisplayPlaceholder: true,\n};\n"]}