{"version":3,"sources":["components/CallingSettingsPanel/index.js"],"names":["CallingSettingsPanel","props","onSave","state","callWith","myLocation","ringoutPrompt","onReset","setState","onCallWithChange","availableNumbers","defaultRingoutPrompt","onMyLocationChange","onMyLocationTextChange","e","target","value","onRingoutPromptChange","checked","renderHandler","option","brand","getString","currentLocale","newProps","contentKeys","browser","softphone","map","contentKey","callWithOptions","onBackButtonClick","className","disabled","hasChanges","ringout","ringoutHint","select","iconField","toolTip","getTooltipContent","root","content","offset","tooltipContainner","information","infoIcon","propTypes","string","isRequired","arrayOf","bool","object","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport formatMessage from 'format-message';\n\nimport callingOptions from 'ringcentral-integration/modules/CallingSettings/callingOptions';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap_white.css';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport IconField from '../IconField';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\nimport SaveButton from '../SaveButton';\n\nexport default class CallingSettingsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.defaultRingoutPrompt = props.ringoutPrompt;\n    this.state = {\n      callWith: props.callWith,\n      ringoutPrompt: props.ringoutPrompt,\n      myLocation: props.myLocation,\n    };\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.callWith !== this.props.callWith) {\n      this.setState({\n        callWith: newProps.callWith,\n      });\n    }\n    if (newProps.ringoutPrompt !== this.props.ringoutPrompt) {\n      this.setState({\n        ringoutPrompt: newProps.ringoutPrompt,\n      });\n    }\n    if (newProps.myLocation !== this.props.myLocation) {\n      this.setState({\n        myLocation: newProps.myLocation,\n      });\n    }\n  }\n  onSave = () => {\n    if (typeof this.props.onSave === 'function') {\n      const {\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      } = this.state;\n      this.props.onSave({\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      });\n    }\n  }\n  onReset = () => {\n    const {\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    } = this.props;\n    this.setState({\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    });\n  }\n  onCallWithChange = (callWith) => {\n    this.setState({\n      callWith,\n      myLocation: (this.props.availableNumbers[callWith] &&\n        this.props.availableNumbers[callWith][0]) ||\n        '',\n      ringoutPrompt: this.defaultRingoutPrompt,\n    });\n  }\n  onMyLocationChange = (myLocation) => {\n    this.setState({\n      myLocation\n    });\n  }\n  onMyLocationTextChange = (e) => {\n    const myLocation = e.target.value;\n    this.setState({\n      myLocation\n    });\n  }\n  onRingoutPromptChange = (checked) => {\n    this.setState({\n      ringoutPrompt: checked,\n    });\n  }\n\n  getTooltipContent() {\n    let contentKeys;\n    if (this.state.callWith === callingOptions.browser\n      || this.state.callWith === callingOptions.softphone\n    ) {\n      contentKeys = [`${this.state.callWith}Tooltip`];\n    } else {\n      contentKeys = [`${this.state.callWith}Tooltip`, `${this.state.callWith}Tooltip1`];\n    }\n    return (\n      <div>\n        {\n          contentKeys.map(contentKey => (\n            <div key={contentKey}>\n              {formatMessage(\n                i18n.getString(contentKey, this.props.currentLocale),\n                { brand: this.props.brand }\n              )}\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n\n  renderHandler = (option) => {\n    const brand = this.props.brand;\n    return formatMessage(i18n.getString(option, this.props.currentLocale), { brand });\n  }\n\n  render() {\n    const {\n      currentLocale,\n      callWith,\n      callWithOptions,\n      myLocation,\n      ringoutPrompt,\n      onBackButtonClick,\n      availableNumbers,\n      className,\n      disabled,\n    } = this.props;\n    const hasChanges = this.state.callWith !== callWith ||\n      this.state.myLocation !== myLocation ||\n      this.state.ringoutPrompt !== ringoutPrompt;\n    const ringout =\n      (\n        this.state.callWith !== callingOptions.softphone &&\n        this.state.callWith !== callingOptions.browser\n      ) ? (\n        <div>\n          <div className={styles.ringoutHint}>\n            {i18n.getString('ringoutHint', currentLocale)}\n          </div>\n          <InputField\n            label={i18n.getString('myLocationLabel', currentLocale)}>\n            {\n              availableNumbers[this.state.callWith] ? (\n                <Select\n                  className={styles.select}\n                  value={this.state.myLocation}\n                  onChange={this.onMyLocationChange}\n                  options={availableNumbers[this.state.callWith]}\n                  disabled={disabled}\n                  dropdownAlign=\"left\"\n                  titleEnabled\n                />\n              ) : (\n                <TextInput\n                  value={this.state.myLocation}\n                  maxLength={30}\n                  onChange={this.onMyLocationTextChange} />\n              )\n            }\n          </InputField>\n          <IconField\n            className={styles.iconField}\n            icon={\n              <Switch\n                checked={this.state.ringoutPrompt}\n                onChange={this.onRingoutPromptChange}\n                />\n            }\n            >\n            {i18n.getString('press1ToStartCallLabel', currentLocale)}\n          </IconField>\n        </div>\n        ) : null;\n\n    const toolTip = this.getTooltipContent();\n    return (\n      <div className={classnames(styles.root, className)}>\n        <BackHeader\n          onBackClick={onBackButtonClick}\n          >\n          {i18n.getString('title', currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <InputField\n            label={\n              <span>\n                {i18n.getString('makeCallsWith', currentLocale)}\n                <Tooltip\n                  placement=\"bottom\"\n                  trigger=\"click\"\n                  overlay={toolTip}\n                  align={{\n                    offset: [0, 47],\n                  }}\n                  arrowContent={<div className=\"rc-tooltip-arrow-inner\" />}\n                  getTooltipContainer={() => this.tooltipContainner}\n                >\n                  <i className={classnames(dynamicsFont.information, styles.infoIcon)} />\n                </Tooltip>\n              </span>\n            }\n            noBorder\n          >\n            <Select\n              className={styles.select}\n              value={this.state.callWith}\n              onChange={this.onCallWithChange}\n              options={callWithOptions}\n              dropdownAlign=\"left\"\n              renderFunction={this.renderHandler}\n              renderValue={this.renderHandler}\n              disabled={disabled}\n              titleEnabled\n            />\n            <div\n              className={styles.tooltipContainner}\n              ref={(tooltipContainner) => {\n                this.tooltipContainner = tooltipContainner;\n              }}\n            />\n          </InputField>\n          {ringout}\n          <SaveButton\n            currentLocale={currentLocale}\n            onClick={this.onSave}\n            disabled={!hasChanges}\n          />\n        </Panel>\n      </div>\n    );\n  }\n}\n\nCallingSettingsPanel.propTypes = {\n  brand: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  callWithOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  callWith: PropTypes.string.isRequired,\n  myLocation: PropTypes.string.isRequired,\n  ringoutPrompt: PropTypes.bool.isRequired,\n  availableNumbers: PropTypes.object.isRequired,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nCallingSettingsPanel.defaultProps = {\n  className: null,\n  disabled: false,\n};\n"]}