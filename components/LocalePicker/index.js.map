{"version":3,"sources":["components/LocalePicker/index.js"],"names":["renderFunction","locale","split","lang","tokens","region","join","getString","LocalePicker","mounted","all","props","options","reduce","promises","l","push","_load","forceUpdate","propTypes","value","string","isRequired","arrayOf","onChange","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAAA,sBACJA,OAAOC,KAAP,CAAa,MAAb,CADI;AAAA;AAAA,MACvBC,IADuB;AAAA,MACdC,MADc;;AAE9B,MAAMC,SAASD,OAAOE,IAAP,CAAY,GAAZ,CAAf;AACA,SAAU,eAAKC,SAAL,CAAeJ,IAAf,EAAqBF,MAArB,CAAV,UAA2C,uBAAaM,SAAb,CAAuBF,MAAvB,EAA+BJ,MAA/B,CAA3C;AACD;;IACoBO,Y;;;;;;;;;;wCACC;AAAA;;AAClB,WAAKC,OAAL,GAAe,IAAf;AACA,iEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACO,kBAAQC,GAAR,CACJ,OAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA0B,UAACC,QAAD,EAAWC,CAAX,EAAiB;AACzCD,2BAASE,IAAT,CAAc,eAAKC,KAAL,CAAWF,CAAX,CAAd;AACAD,2BAASE,IAAT,CAAc,uBAAaC,KAAb,CAAmBF,CAAnB,CAAd;AACA,yBAAOD,QAAP;AACD,iBAJD,EAIG,EAJH,CADI,CADP;;AAAA;AAQC,oBAAI,OAAKL,OAAT,EAAkB,OAAKS,WAAL;;AARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAUD;;;2CACsB;AACrB,WAAKT,OAAL,GAAe,KAAf;AACD;;;6BACQ;AACP,aACE,mFACM,KAAKE,KADX;AAEE,uBAAc,MAFhB;AAGE,qBAAaX,cAHf;AAIE,wBAAgBA;AAJlB,SADF;AAQD;;;;;kBA1BkBQ,Y;;AA4BrBA,aAAaW,SAAb,GAAyB;AACvBC,SAAO,oBAAUC,MAAV,CAAiBC,UADD;AAEvBV,WAAS,oBAAUW,OAAV,CAAkB,oBAAUF,MAA5B,EAAoCC,UAFtB;AAGvBE,YAAU,oBAAUC,IAAV,CAAeH;AAHF,CAAzB","file":"index.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DropdownSelect from '../DropdownSelect';\r\nimport i18n from './i18n';\r\nimport countryNames from '../../lib/countryNames';\r\n\r\nfunction renderFunction(locale) {\r\n  const [lang, ...tokens] = locale.split(/[-_]/);\r\n  const region = tokens.join('-');\r\n  return `${i18n.getString(lang, locale)} (${countryNames.getString(region, locale)})`;\r\n}\r\nexport default class LocalePicker extends Component {\r\n  componentDidMount() {\r\n    this.mounted = true;\r\n    (async () => {\r\n      await Promise.all(\r\n        this.props.options.reduce((promises, l) => {\r\n          promises.push(i18n._load(l));\r\n          promises.push(countryNames._load(l));\r\n          return promises;\r\n        }, [])\r\n      );\r\n      if (this.mounted) this.forceUpdate();\r\n    })();\r\n  }\r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n  }\r\n  render() {\r\n    return (\r\n      <DropdownSelect\r\n        {...this.props}\r\n        dropdownAlign=\"left\"\r\n        renderValue={renderFunction}\r\n        renderFunction={renderFunction}\r\n      />\r\n    );\r\n  }\r\n}\r\nLocalePicker.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n"]}