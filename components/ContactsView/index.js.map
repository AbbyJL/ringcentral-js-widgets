{"version":3,"sources":["components/ContactsView/index.js"],"names":["AddContact","className","onClick","addContact","iconContainer","iconNode","propTypes","string","func","isRequired","defaultProps","undefined","ContactsView","props","doSearchByText","bind","doSearchBySource","loadNextPage","_restSearch","_applySearch","searchSource","searchText","pageNumber","ev","target","value","args","onSearchContact","onRestSearch","currentLocale","contactGroups","contactSourceNames","showSpinner","getAvatarUrl","getPresence","currentPage","onItemSelect","content","root","actionBar","searchInput","getString","actionButton","arrayOf","shape","id","caption","contacts","contact","bool","number"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Panel from '../Panel';\nimport SearchInput from '../SearchInput';\nimport SpinnerOverlay from '../SpinnerOverlay';\n\nimport ContactSourceFilter from '../ContactSourceFilter';\nimport ContactList from '../ContactList';\nimport ContactItem from '../ContactItem';\nimport styles from './styles.scss';\nimport i18n from './i18n';\nimport AddContactIcon from '../../assets/images/ContactAdd.svg';\n\nfunction AddContact({\n  className,\n  onClick,\n }) {\n  return (\n    <div\n      className={classnames(styles.addContact, className)}\n      onClick={onClick}\n    >\n      <div className={styles.iconContainer}>\n        <AddContactIcon\n          className={styles.iconNode}\n        />\n      </div>\n    </div>\n  );\n}\nAddContact.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\nAddContact.defaultProps = {\n  className: undefined,\n};\n\nexport default class ContactsView extends Component {\n  constructor(props) {\n    super(props);\n    this.doSearchByText = this.doSearchByText.bind(this);\n    this.doSearchBySource = this.doSearchBySource.bind(this);\n    this.loadNextPage = this.loadNextPage.bind(this);\n  }\n\n  componentDidMount() {\n    this._restSearch();\n    this._applySearch({\n      searchSource: this.props.searchSource,\n      searchText: this.props.searchText,\n      pageNumber: 1,\n    });\n  }\n\n  doSearchByText(ev) {\n    const searchText = ev.target.value;\n    this._applySearch({\n      searchSource: this.props.searchSource,\n      searchText,\n      pageNumber: 1,\n    });\n  }\n\n  doSearchBySource(searchSource) {\n    this._applySearch({\n      searchSource,\n      searchText: this.props.searchText,\n      pageNumber: 1,\n    });\n  }\n\n  loadNextPage(pageNumber) {\n    this._applySearch({\n      searchSource: this.props.searchSource,\n      searchText: this.props.searchText,\n      pageNumber,\n    });\n  }\n\n  _applySearch(args) {\n    if (this.props.onSearchContact) {\n      this.props.onSearchContact(args);\n    }\n  }\n\n  _restSearch() {\n    if (this.props.onRestSearch) {\n      this.props.onRestSearch();\n    }\n  }\n\n  render() {\n    const {\n      currentLocale,\n      contactGroups,\n      contactSourceNames,\n      searchSource,\n      searchText,\n      showSpinner,\n      getAvatarUrl,\n      getPresence,\n      currentPage,\n      onItemSelect,\n    } = this.props;\n\n    const content = showSpinner ?\n      <SpinnerOverlay /> :\n      (\n        <ContactList\n          currentLocale={currentLocale}\n          contactGroups={contactGroups}\n          getAvatarUrl={getAvatarUrl}\n          getPresence={getPresence}\n          currentPage={currentPage}\n          onNextPage={this.loadNextPage}\n          onItemSelect={onItemSelect}\n        />\n      );\n\n    return (\n      <div className={styles.root}>\n        <div className={styles.actionBar}>\n          <SearchInput\n            className={styles.searchInput}\n            value={searchText || ''}\n            onChange={this.doSearchByText}\n            placeholder={i18n.getString('searchPlaceholder', currentLocale)}\n          />\n          <AddContact\n            className={styles.actionButton}\n            onClick={() => { }}\n          />\n          <ContactSourceFilter\n            className={styles.actionButton}\n            currentLocale={currentLocale}\n            onSourceSelect={this.doSearchBySource}\n            selectedSourceName={searchSource}\n            contactSourceNames={contactSourceNames}\n          />\n        </div>\n        <Panel className={styles.content}>\n          {content}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nContactsView.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactGroups: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    caption: PropTypes.string.isRequired,\n    contacts: PropTypes.arrayOf(ContactItem.propTypes.contact).isRequired,\n  })).isRequired,\n  contactSourceNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  getPresence: PropTypes.func.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  searchSource: PropTypes.string,\n  searchText: PropTypes.string,\n  currentPage: PropTypes.number,\n  onItemSelect: PropTypes.func,\n  onSearchContact: PropTypes.func,\n  onRestSearch: PropTypes.func,\n};\n\nContactsView.defaultProps = {\n  searchSource: undefined,\n  searchText: undefined,\n  currentPage: undefined,\n  onItemSelect: undefined,\n  onSearchContact: undefined,\n  onRestSearch: undefined,\n};\n"]}