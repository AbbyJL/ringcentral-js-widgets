{"version":3,"sources":["components/AnimationAlert/index.js"],"names":["ANIMATION_DURATION","ANIMATION_DELAY","ENTRANCE_ANIMATION","EXIT_ANIMATION","AnimationMessage","animation","duration","props","second","animationDuration","animationDelay","propTypes","string","number","defaultProps","undefined","AnimationAlert","state","messages","mounted","nextProps","entranceAnimation","exitAnimation","currentMessagesIDs","map","message","id","nextMessagesIDs","addedMessagesIDs","filter","includes","removedMessagesIDs","allMessagesIDs","concat","allMessages","isAddedMessage","isRemovedMessage","stateWithAnimation","setState","isCurrentEmpty","length"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport 'animate.css/animate.min.css';\nimport sleep from 'ringcentral-integration/lib/sleep';\n\nimport Message from '../Message';\nimport AlertDisplay from '../AlertDisplay';\n\nconst ANIMATION_DURATION = 500;\nconst ANIMATION_DELAY = '0.3s';\nconst ENTRANCE_ANIMATION = 'fadeInDown';\nconst EXIT_ANIMATION = 'fadeOutUp';\n\nfunction AnimationMessage({ animation, duration, ...props }) {\n  const second = duration / 1000;\n  return (\n    <div\n      className={classnames([animation, 'animated'])}\n      style={{\n        animationDuration: `${second}s`,\n        animationDelay: ANIMATION_DELAY,\n      }}>\n      <Message {...props} />\n    </div>\n  );\n}\n\nAnimationMessage.propTypes = {\n  ...Message.propTypes,\n  animation: PropTypes.string,\n  duration: PropTypes.number,\n};\nAnimationMessage.defaultProps = {\n  animation: undefined,\n  duration: ANIMATION_DURATION,\n};\n\nclass AnimationAlert extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages,\n    };\n  }\n  componentDidMount() {\n    this.mounted = true;\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n  componentWillReceiveProps(nextProps) {\n    (async () => {\n      const {\n        duration,\n        entranceAnimation,\n        exitAnimation,\n      } = this.props;\n      const currentMessagesIDs = this.props.messages.map(message => message.id);\n      const nextMessagesIDs = nextProps.messages.map(message => message.id);\n      const addedMessagesIDs = nextMessagesIDs.filter(id => !currentMessagesIDs.includes(id));\n      const removedMessagesIDs = currentMessagesIDs.filter(id => !nextMessagesIDs.includes(id));\n      const allMessagesIDs = [...new Set(currentMessagesIDs.concat(nextMessagesIDs))];\n      const allMessages = {};\n      this.props.messages.concat(nextProps.messages).map((message) => {\n        allMessages[message.id] = message;\n        return message;\n      });\n      const messages = allMessagesIDs\n        .map((id) => {\n          const message = allMessages[id];\n          const isAddedMessage = addedMessagesIDs.includes(id);\n          const isRemovedMessage = removedMessagesIDs.includes(id);\n          let animation;\n          if (isAddedMessage) {\n            animation = entranceAnimation;\n          } else if (isRemovedMessage) {\n            animation = exitAnimation;\n          }\n          return {\n            ...message,\n            ...animation ? { animation } : {},\n            duration,\n          };\n        });\n      const stateWithAnimation = {\n        messages,\n      };\n      this.setState(stateWithAnimation);\n      await sleep(duration);\n\n      if (!this.mounted) return;\n\n      const isCurrentEmpty = currentMessagesIDs.length === 0;\n      this.setState({\n        messages: isCurrentEmpty ? messages : nextProps.messages,\n      });\n    })();\n  }\n  render() {\n    return (\n      <AlertDisplay {...this.props} component={AnimationMessage} messages={this.state.messages} />\n    );\n  }\n}\n\nAnimationAlert.propTypes = {\n  ...AlertDisplay.propTypes,\n  entranceAnimation: PropTypes.string,\n  exitAnimation: PropTypes.string,\n  duration: PropTypes.number,\n};\n\nAnimationAlert.defaultProps = {\n  ...AlertDisplay.defaultProps,\n  entranceAnimation: ENTRANCE_ANIMATION,\n  exitAnimation: EXIT_ANIMATION,\n  duration: ANIMATION_DURATION,\n};\n\nexport default AnimationAlert;\n"]}