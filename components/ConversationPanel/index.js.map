{"version":3,"sources":["components/ConversationPanel/index.js"],"names":["ConversationPanel","props","onInputHeightChange","value","setState","inputHeight","onSend","replyToReceivers","messageText","onSelectContact","idx","selected","showContactDisplayPlaceholder","parseInt","_userSelection","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","bind","getInitialContactIndex","isLogging","headerHeight","_mounted","nextProps","lastMatchedCorrespondentEntity","index","findIndex","contact","id","correspondents","phoneNumber","extensionNumber","undefined","groupNumbers","map","correspondent","name","onLogConversation","correspondentEntity","conversationId","conversationBody","loading","showSpinner","recipients","messageSubjectRenderer","goBack","spinerContainer","getMessageListHeight","messages","dateTimeFormatter","getGroupPhoneNumbers","getPhoneNumber","fallbackName","getFallbackContactName","logButton","disableLinks","currentLocale","root","header","brand","contactDisplay","contactDisplaySelect","areaCode","countryCode","enableContactFallback","sourceIcons","showGroupNumberName","backButton","arrow","updateMessageText","sendButtonDisabled","propTypes","string","isRequired","func","arrayOf","shape","bool","object","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport Spinner from '../Spinner';\nimport ConversationMessageList from '../ConversationMessageList';\nimport LogButton from '../LogButton';\nimport ContactDisplay from '../ContactDisplay';\nimport MessageInput from '../MessageInput';\n\nimport styles from './styles.scss';\n\nclass ConversationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      inputHeight: 63,\n    };\n    this._userSelection = false;\n  }\n  getMessageListHeight() {\n    const headerHeight = 41;\n    return `calc(100% - ${this.state.inputHeight + headerHeight}px)`;\n  }\n  onInputHeightChange = (value) => {\n    this.setState({\n      inputHeight: value,\n    });\n  }\n  onSend = () => {\n    this.props.replyToReceivers(this.props.messageText);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      this.props.conversation &&\n      nextProps.conversation &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  onSelectContact = (value, idx) => {\n    const selected = this.showContactDisplayPlaceholder\n      ? parseInt(idx, 10) - 1 : parseInt(idx, 10);\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation &&\n      this.props.conversation.conversationMatches &&\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    if (!this.props.conversation) {\n      return null;\n    }\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n\n  getPhoneNumber() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n\n  getGroupPhoneNumbers() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n\n  getFallbackContactName() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted && !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n\n  logConversation = this.logConversation.bind(this)\n\n  render() {\n    let conversationBody = null;\n    const loading = this.props.showSpinner;\n    const { recipients, messageSubjectRenderer, conversation } = this.props;\n    if (!conversation) {\n      this.props.goBack();\n      return null;\n    }\n    if (loading) {\n      conversationBody = (\n        <div className={styles.spinerContainer}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      conversationBody = (\n        <ConversationMessageList\n          height={this.getMessageListHeight()}\n          messages={this.props.messages}\n          dateTimeFormatter={this.props.dateTimeFormatter}\n          showSender={recipients && recipients.length > 1}\n          messageSubjectRenderer={messageSubjectRenderer}\n        />\n      );\n    }\n    const {\n      isLogging,\n      conversationMatches,\n      correspondentMatches,\n    } = this.props.conversation;\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    const logButton = this.props.onLogConversation ?\n      (\n        <LogButton\n          className={styles.logButton}\n          onLog={this.logConversation}\n          disableLinks={this.props.disableLinks}\n          isLogged={conversationMatches.length > 0}\n          isLogging={isLogging || this.state.isLogging}\n          currentLocale={this.props.currentLocale}\n        />\n      ) :\n      null;\n    return (\n      <div className={styles.root}>\n        <div className={styles.header}>\n          <ContactDisplay\n            brand={this.props.brand}\n            className={styles.contactDisplay}\n            selectClassName={styles.contactDisplaySelect}\n            contactMatches={correspondentMatches}\n            selected={this.state.selected}\n            onSelectContact={this.onSelectContact}\n            disabled={this.props.disableLinks}\n            isLogging={isLogging || this.state.isLogging}\n            fallBackName={fallbackName}\n            areaCode={this.props.areaCode}\n            countryCode={this.props.countryCode}\n            phoneNumber={phoneNumber}\n            groupNumbers={groupNumbers}\n            showType={false}\n            currentLocale={this.props.currentLocale}\n            enableContactFallback={this.props.enableContactFallback}\n            showPlaceholder={this.props.showContactDisplayPlaceholder}\n            sourceIcons={this.props.sourceIcons}\n            showGroupNumberName={this.props.showGroupNumberName}\n          />\n          <a\n            onClick={() => this.props.goBack()}\n            className={styles.backButton}\n          >\n            <span className={dynamicsFont.arrow} />\n          </a>\n          {logButton}\n        </div>\n        {conversationBody}\n        <MessageInput\n          value={this.props.messageText}\n          onChange={this.props.updateMessageText}\n          disabled={this.props.sendButtonDisabled}\n          currentLocale={this.props.currentLocale}\n          onSend={this.onSend}\n          onHeightChange={this.onInputHeightChange}\n        />\n      </div>\n    );\n  }\n}\n\nConversationPanel.propTypes = {\n  brand: PropTypes.string.isRequired,\n  replyToReceivers: PropTypes.func.isRequired,\n  messages: ConversationMessageList.propTypes.messages,\n  updateMessageText: PropTypes.func,\n  messageText: PropTypes.string,\n  recipients: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    extensionNumber: PropTypes.string,\n    name: PropTypes.string,\n  })).isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  disableLinks: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  onLogConversation: PropTypes.func,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  goBack: PropTypes.func.isRequired,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  showGroupNumberName: PropTypes.bool,\n  messageSubjectRenderer: PropTypes.func,\n};\nConversationPanel.defaultProps = {\n  disableLinks: false,\n  onLogConversation: undefined,\n  autoLog: false,\n  enableContactFallback: undefined,\n  showContactDisplayPlaceholder: true,\n  sourceIcons: undefined,\n  showGroupNumberName: false,\n  messageText: '',\n  updateMessageText: () => { },\n  messageSubjectRenderer: undefined,\n};\n\nexport default ConversationPanel;\n"]}