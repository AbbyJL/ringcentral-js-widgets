{"version":3,"sources":["components/RecentActivityView/index.js"],"names":["RecentActivityView","props","onTabChanged","tabName","defaultTab","currentTab","getCurrentTab","getData","setState","state","tabs","tab","path","prevProps","currentContact","cleanUp","currentTabPath","view","find","showSpinner","currentPath","goTo","recentActivityView","navigationBar","listView","getCurrentTabPanel","propTypes","bool","isRequired","object","array","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqBA,kB;;;AACnB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,8JACXA,KADW;;AAAA,UA8BnBC,YA9BmB,GA8BJ,YAAqC;AAAA,UAApCC,OAAoC,uEAA1B,MAAKF,KAAL,CAAWG,UAAe;;AAClD,UAAMC,aAAa,MAAKC,aAAL,CAAmBH,OAAnB,CAAnB;AACA,UAAIE,UAAJ,EAAgBA,WAAWE,OAAX;AAChB,YAAKC,QAAL,CAAc;AACZH,oBAAYF;AADA,OAAd;AAGD,KApCkB;;AAEjB,UAAKM,KAAL,GAAa;AACXJ,kBAAYJ,MAAMG;AADP,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAAA;AAAA;AAAA;;AAAA;AAClB,wDAAkB,KAAKH,KAAL,CAAWS,IAA7B,4GAAmC;AAAA,cAAxBC,GAAwB;;AACjC;AACA,cAAIA,IAAIC,IAAJ,KAAa,KAAKX,KAAL,CAAWG,UAA5B,EAAwC;AACtCO,gBAAIJ,OAAJ,CAAY,IAAZ;AACD;AACF;AACD;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQlB,WAAKL,YAAL;AACD;;;uCAEkBW,S,EAAW;AAC5B,UAAIA,UAAUC,cAAV,KAA6B,KAAKb,KAAL,CAAWa,cAA5C,EAA4D;AAC1D,aAAKZ,YAAL,CAAkB,KAAKO,KAAL,CAAWJ,UAA7B;AACD;AACF;;;2CAEsB;AAAA;AAAA;AAAA;;AAAA;AACrB,yDAAkB,KAAKJ,KAAL,CAAWS,IAA7B,iHAAmC;AAAA,cAAxBC,GAAwB;;AACjCA,cAAII,OAAJ;AACD;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAItB;;;yCAUoB;AACnB,UAAMC,iBAAiB,KAAKP,KAAL,CAAWJ,UAAlC;AACA,UAAMA,aAAa,KAAKC,aAAL,CAAmBU,cAAnB,CAAnB;AACA,aAAOX,aAAaA,WAAWY,IAAxB,GAA+B,IAAtC;AACD;;;kCAEaD,c,EAAgB;AAC5B,UAAMN,OAAO,KAAKT,KAAL,CAAWS,IAAxB;AACA,aAAOA,KAAKQ,IAAL,CAAU;AAAA,eAAOP,IAAIC,IAAJ,KAAaI,cAApB;AAAA,OAAV,CAAP;AACD;;;6BAEQ;AAAA,UACCG,WADD,GACiB,KAAKlB,KADtB,CACCkB,WADD;;AAEP,UAAIA,WAAJ,EAAiB,OAAO,6DAAP;AACjB,UAAMlB,QAAQ;AACZmB,qBAAa,KAAKX,KAAL,CAAWJ,UADZ;AAEZgB,cAAM,KAAKnB,YAFC;AAGZQ,cAAM,KAAKT,KAAL,CAAWS;AAHL,OAAd;AAKA,aACE;AAAA;AAAA,UAAK,WAAW,iBAAOY,kBAAvB;AACE;AACE,0DADF;AAEE,qBAAW,iBAAOC;AAFpB,WAGMtB,KAHN,EADF;AAME;AAAA;AAAA,YAAK,WAAW,iBAAOuB,QAAvB;AACG,eAAKC,kBAAL;AADH;AANF,OADF;AAYD;;;;;kBAtEkBzB,kB;;;AAyErBA,mBAAmB0B,SAAnB,GAA+B;AAC7BP,eAAa,oBAAUQ,IAAV,CAAeC,UADC;AAE7Bd,kBAAgB,oBAAUe,MAAV,CAAiBD,UAFJ;AAG7BlB,QAAM,oBAAUoB,KAAV,CAAgBF,UAHO;AAI7BxB,cAAY,oBAAU2B,MAAV,CAAiBH;AAJA,CAA/B","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.scss';\nimport NavigationBar from '../NavigationBar';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport RecentActivityNavigationButton from '../RecentActivityNavigationButton';\n\nexport default class RecentActivityView extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: props.defaultTab\n    };\n  }\n\n  componentDidMount() {\n    for (const tab of this.props.tabs) {\n      // Preload data on unactivated tabs\n      if (tab.path !== this.props.defaultTab) {\n        tab.getData(true);\n      }\n    }\n    // Switch to default tab and load all data\n    this.onTabChanged();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentContact !== this.props.currentContact) {\n      this.onTabChanged(this.state.currentTab);\n    }\n  }\n\n  componentWillUnmount() {\n    for (const tab of this.props.tabs) {\n      tab.cleanUp();\n    }\n  }\n\n  onTabChanged = (tabName = this.props.defaultTab) => {\n    const currentTab = this.getCurrentTab(tabName);\n    if (currentTab) currentTab.getData();\n    this.setState({\n      currentTab: tabName\n    });\n  }\n\n  getCurrentTabPanel() {\n    const currentTabPath = this.state.currentTab;\n    const currentTab = this.getCurrentTab(currentTabPath);\n    return currentTab ? currentTab.view : null;\n  }\n\n  getCurrentTab(currentTabPath) {\n    const tabs = this.props.tabs;\n    return tabs.find(tab => tab.path === currentTabPath);\n  }\n\n  render() {\n    const { showSpinner } = this.props;\n    if (showSpinner) return <SpinnerOverlay />;\n    const props = {\n      currentPath: this.state.currentTab,\n      goTo: this.onTabChanged,\n      tabs: this.props.tabs\n    };\n    return (\n      <div className={styles.recentActivityView}>\n        <NavigationBar\n          button={RecentActivityNavigationButton}\n          className={styles.navigationBar}\n          {...props}\n        />\n        <div className={styles.listView}>\n          {this.getCurrentTabPanel()}\n        </div>\n      </div>\n    );\n  }\n}\n\nRecentActivityView.propTypes = {\n  showSpinner: PropTypes.bool.isRequired,\n  currentContact: PropTypes.object.isRequired,\n  tabs: PropTypes.array.isRequired,\n  defaultTab: PropTypes.string.isRequired\n};\n"]}