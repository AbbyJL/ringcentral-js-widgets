{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["WebphoneAlert","props","message","view","getString","currentLocale","recordError","payload","errorCode","requestTimeout","serverTimeout","internalServerError","sipProvisionError","webphoneForbidden","unknownError","statusCode","stub","error","brandName","brand","name","propTypes","string","isRequired","object","shape","handleMessage","browserNotSupported","webphoneCountOverLimit","notOutboundCallWithoutDL","toVoiceMailError","connected","muteError","holdError","flipError","recordDisabled","transferError"],"mappings":";;;;;kBAMwBA,a;;AANxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MACnCC,OADmC,GACvBD,MAAMC,OADiB,CACnCA,OADmC;;AAE3C,MAAIC,OAAQ;AAAA;AAAA;AAAO,mBAAKC,SAAL,CAAeF,OAAf,EAAwBD,MAAMI,aAA9B;AAAP,GAAZ;AACA;AACA,MAAIH,YAAY,yBAAeI,WAA/B,EAA4C;AAAA,gCACFL,MAAMC,OADJ,CAClCK,OADkC;AAAA,kEACT,EADS;AAAA,QACvBC,SADuB,yBACvBA,SADuB;;AAE1CL,WACE;AACE,eAAS,eAAKC,SAAL,CAAeF,OAAf,EAAwBD,MAAMI,aAA9B,CADX;AAEE,cAAQ,EAAEG,oBAAF;AAFV,MADF;AAMD;AACD,MACEN,YAAY,yBAAeO,cAA3B,IACAP,YAAY,yBAAeQ,aAD3B,IAEAR,YAAY,yBAAeS,mBAF3B,IAGAT,YAAY,yBAAeU,iBAH3B,IAIAV,YAAY,yBAAeW,iBAJ3B,IAKAX,YAAY,yBAAeY,YAN7B,EAOE;AAAA,iCACyCb,MAAMC,OAD/C,CACQK,OADR;AAAA,oEACkC,EADlC;AAAA,QACmBQ,UADnB,0BACmBA,UADnB;AAEA;;AACA,QAAMC,OAAOD,aACX;AACE,eAAS,eAAKX,SAAL,CAAe,WAAf,EAA4BH,MAAMI,aAAlC,CADX;AAEE,cAAQ,EAAEG,WAAWO,UAAb;AAFV,MADW,GAKT,eAAKX,SAAL,CAAe,QAAf,EAAyBH,MAAMI,aAA/B,CALJ;AAMAF,WACE;AACE,eAAS,eAAKC,SAAL,CAAe,qBAAf,EAAsCH,MAAMI,aAA5C,CADX;AAEE,cAAQ,EAAEY,OAAOD,IAAT,EAAeE,WAAWjB,MAAMkB,KAAN,CAAYC,IAAtC;AAFV,MADF;AAMD;AACD,SAAOjB,IAAP;AACD;;AAEDH,cAAcqB,SAAd,GAA0B;AACxBhB,iBAAe,oBAAUiB,MAAV,CAAiBC,UADR;AAExBJ,SAAO,oBAAUK,MAAV,CAAiBD,UAFA;AAGxBrB,WAAS,oBAAUuB,KAAV,CAAgB;AACvBvB,aAAS,oBAAUoB,MAAV,CAAiBC;AADH,GAAhB,EAENA;AALqB,CAA1B;;AAQAvB,cAAc0B,aAAd,GAA8B;AAAA,MAAGxB,OAAH,QAAGA,OAAH;AAAA,SAC3BA,YAAY,yBAAeyB,mBAA5B,IACCzB,YAAY,yBAAe0B,sBAD5B,IAEC1B,YAAY,yBAAeW,iBAF5B,IAGCX,YAAY,yBAAe2B,wBAH5B,IAIC3B,YAAY,yBAAe4B,gBAJ5B,IAKC5B,YAAY,yBAAe6B,SAL5B,IAMC7B,YAAY,yBAAe8B,SAN5B,IAOC9B,YAAY,yBAAe+B,SAP5B,IAQC/B,YAAY,yBAAegC,SAR5B,IASChC,YAAY,yBAAeI,WAT5B,IAUCJ,YAAY,yBAAeiC,cAV5B,IAWCjC,YAAY,yBAAekC,aAX5B,IAYClC,YAAY,yBAAeO,cAZ5B,IAaCP,YAAY,yBAAeQ,aAb5B,IAcCR,YAAY,yBAAeS,mBAd5B,IAeCT,YAAY,yBAAeU,iBAf5B,IAgBCV,YAAY,yBAAeY,YAjBA;AAAA,CAA9B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  }\n  if (\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode } = {} } = props.message;\n    // sipProvisionError does not have statusCode\n    const stub = statusCode ? (\n      <FormattedMessage\n        message={i18n.getString('errorCode', props.currentLocale)}\n        values={{ errorCode: statusCode }}\n      />\n    ) : i18n.getString('occurs', props.currentLocale);\n    view = (\n      <FormattedMessage\n        message={i18n.getString('webphoneUnavailable', props.currentLocale)}\n        values={{ error: stub, brandName: props.brand.name }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  (message === webphoneErrors.browserNotSupported) ||\n  (message === webphoneErrors.webphoneCountOverLimit) ||\n  (message === webphoneErrors.webphoneForbidden) ||\n  (message === webphoneErrors.notOutboundCallWithoutDL) ||\n  (message === webphoneErrors.toVoiceMailError) ||\n  (message === webphoneErrors.connected) ||\n  (message === webphoneErrors.muteError) ||\n  (message === webphoneErrors.holdError) ||\n  (message === webphoneErrors.flipError) ||\n  (message === webphoneErrors.recordError) ||\n  (message === webphoneErrors.recordDisabled) ||\n  (message === webphoneErrors.transferError) ||\n  (message === webphoneErrors.requestTimeout) ||\n  (message === webphoneErrors.serverTimeout) ||\n  (message === webphoneErrors.internalServerError) ||\n  (message === webphoneErrors.sipProvisionError) ||\n  (message === webphoneErrors.unknownError)\n);\n"]}