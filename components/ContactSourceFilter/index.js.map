{"version":3,"sources":["components/ContactSourceFilter/index.js"],"names":["ContactSourceItem","sourceName","sourceLabel","isSelected","onSelect","contactSourceItem","selected","propTypes","string","isRequired","bool","func","ContactSourceFilter","props","hideList","setState","unfold","window","removeEventListener","showList","addEventListener","togglePanel","evt","stopPropagation","state","emitSelect","onSourceSelect","key","locale","getString","className","currentLocale","contactSourceNames","selectedSourceName","isAllSource","contactSourceFilter","filterIconContainer","filterIconNode","contactSourceList","e","map","arrayOf","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;QASgBA,iB,GAAAA,iB;;AAThB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,SAASA,iBAAT,OAA8E;AAAA,MAAjDC,UAAiD,QAAjDA,UAAiD;AAAA,MAArCC,WAAqC,QAArCA,WAAqC;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACnF,SACE;AAAA;AAAA;AACE,eAAS;AAAA,eAAMA,SAASH,UAAT,CAAN;AAAA,OADX;AAEE,iBAAW,0BACT,iBAAOI,iBADE,EAETF,aAAa,iBAAOG,QAApB,GAA+B,EAFtB;AAFb;AAOGJ;AAPH,GADF;AAWD;AACDF,kBAAkBO,SAAlB,GAA8B;AAC5BN,cAAY,oBAAUO,MAAV,CAAiBC,UADD;AAE5BP,eAAa,oBAAUM,MAAV,CAAiBC,UAFF;AAG5BN,cAAY,oBAAUO,IAAV,CAAeD,UAHC;AAI5BL,YAAU,oBAAUO,IAAV,CAAeF;AAJG,CAA9B;;IAOqBG,mB;;;AACnB,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gKACXA,KADW;;AAAA,UAenBC,QAfmB,GAeR,YAAM;AACf,YAAKC,QAAL,CAAc;AAAA,eAAO;AACnBC,kBAAQ;AADW,SAAP;AAAA,OAAd;AAGAC,aAAOC,mBAAP,CAA2B,OAA3B,EAAoC,MAAKJ,QAAzC;AACD,KApBkB;;AAAA,UAsBnBK,QAtBmB,GAsBR,YAAM;AACf,YAAKJ,QAAL,CAAc;AAAA,eAAO;AACnBC,kBAAQ;AADW,SAAP;AAAA,OAAd;AAGAC,aAAOG,gBAAP,CAAwB,OAAxB,EAAiC,MAAKN,QAAtC;AACD,KA3BkB;;AAAA,UA6BnBO,WA7BmB,GA6BL,UAACC,GAAD,EAAS;AACrBA,UAAIC,eAAJ;AACA,UAAI,CAAC,MAAKC,KAAL,CAAWR,MAAhB,EAAwB;AACtB,cAAKG,QAAL;AACA;AACD;AACD,YAAKL,QAAL;AACD,KApCkB;;AAAA,UAsCnBW,UAtCmB,GAsCN,UAACxB,UAAD,EAAgB;AAAA,UACnByB,cADmB,GACA,MAAKb,KADL,CACnBa,cADmB;;AAE3B,UAAIA,cAAJ,EAAoB;AAClBA,uBAAezB,UAAf;AACD;AACD,YAAKa,QAAL;AACD,KA5CkB;;AAEjB,UAAKU,KAAL,GAAa;AACXR,cAAQ;AADG,KAAb;AAFiB;AAKlB;;;;2CAEsB;AACrBC,aAAOC,mBAAP,CAA2B,OAA3B,EAAoC,KAAKJ,QAAzC;AACD;;;8BAESa,G,EAAKC,M,EAAQ;AACrB,aAAO,eAAKC,SAAL,CAAeF,GAAf,EAAoBC,MAApB,CAAP;AACD;;;6BAiCQ;AAAA;;AAAA,mBAMH,KAAKf,KANF;AAAA,UAELiB,SAFK,UAELA,SAFK;AAAA,UAGLC,aAHK,UAGLA,aAHK;AAAA,UAILC,kBAJK,UAILA,kBAJK;AAAA,UAKLC,kBALK,UAKLA,kBALK;;;AAQP,UAAMC,cAAcD,uBAAuBD,mBAAmB,CAAnB,CAA3C;AACA,aACE;AAAA;AAAA;AACE,qBAAW,0BAAW,iBAAOG,mBAAlB,EAAuCL,SAAvC,CADb;AAEE,mBAAS,KAAKT;AAFhB;AAIE;AAAA;AAAA;AACE,uBAAW,iBAAOe,mBADpB;AAEE,mBAAO,KAAKP,SAAL,CAAeI,kBAAf,EAAmCF,aAAnC;AAFT;AAKIG,wBACI,yDAAmB,WAAW,iBAAOG,cAArC,GADJ,GAEI,8DAAwB,WAAW,iBAAOA,cAA1C;AAPR,SAJF;AAeI,SAAC,KAAKb,KAAL,CAAWR,MAAZ,GAAqB,IAArB,GACE;AAAA;AAAA;AACE,uBAAW,iBAAOsB,iBADpB;AAEE,qBAAS;AAAA,qBAAKC,EAAEhB,eAAF,EAAL;AAAA;AAFX;AAKIS,6BAAmBQ,GAAnB,CAAuB;AAAA,mBACrB,8BAAC,iBAAD;AACE,mBAAKvC,UADP;AAEE,0BAAYA,UAFd;AAGE,2BAAa,OAAK4B,SAAL,CAAe5B,UAAf,EAA2B8B,aAA3B,CAHf;AAIE,0BAAY9B,eAAegC,kBAJ7B;AAKE,wBAAU,OAAKR;AALjB,cADqB;AAAA,WAAvB;AALJ;AAhBN,OADF;AAoCD;;;;;kBA5FkBb,mB;;;AA+FrBA,oBAAoBL,SAApB,GAAgC;AAC9BuB,aAAW,oBAAUtB,MADS;AAE9BuB,iBAAe,oBAAUvB,MAAV,CAAiBC,UAFF;AAG9BiB,kBAAgB,oBAAUf,IAHI;AAI9BsB,sBAAoB,oBAAUzB,MAJA;AAK9BwB,sBAAoB,oBAAUS,OAAV,CAAkB,oBAAUjC,MAA5B,EAAoCC;AAL1B,CAAhC;;AAQAG,oBAAoB8B,YAApB,GAAmC;AACjCZ,aAAWa,SADsB;AAEjCV,sBAAoBU,SAFa;AAGjCjB,kBAAgBiB;AAHiB,CAAnC","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport i18n from './i18n';\nimport styles from './styles.scss';\nimport ContactFilterIcon from '../../assets/images/ContactFilter.svg';\nimport ContactFilterSolidIcon from '../../assets/images/ContactFilterSolid.svg';\n\nexport function ContactSourceItem({ sourceName, sourceLabel, isSelected, onSelect }) {\n  return (\n    <div\n      onClick={() => onSelect(sourceName)}\n      className={classnames(\n        styles.contactSourceItem,\n        isSelected ? styles.selected : ''\n      )}\n    >\n      {sourceLabel}\n    </div>\n  );\n}\nContactSourceItem.propTypes = {\n  sourceName: PropTypes.string.isRequired,\n  sourceLabel: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default class ContactSourceFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unfold: false\n    };\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.hideList);\n  }\n\n  getString(key, locale) {\n    return i18n.getString(key, locale);\n  }\n\n  hideList = () => {\n    this.setState(() => ({\n      unfold: false\n    }));\n    window.removeEventListener('click', this.hideList);\n  }\n\n  showList = () => {\n    this.setState(() => ({\n      unfold: true\n    }));\n    window.addEventListener('click', this.hideList);\n  }\n\n  togglePanel = (evt) => {\n    evt.stopPropagation();\n    if (!this.state.unfold) {\n      this.showList();\n      return;\n    }\n    this.hideList();\n  }\n\n  emitSelect = (sourceName) => {\n    const { onSourceSelect } = this.props;\n    if (onSourceSelect) {\n      onSourceSelect(sourceName);\n    }\n    this.hideList();\n  }\n\n  render() {\n    const {\n      className,\n      currentLocale,\n      contactSourceNames,\n      selectedSourceName,\n    } = this.props;\n\n    const isAllSource = selectedSourceName === contactSourceNames[0];\n    return (\n      <div\n        className={classnames(styles.contactSourceFilter, className)}\n        onClick={this.togglePanel}\n      >\n        <div\n          className={styles.filterIconContainer}\n          title={this.getString(selectedSourceName, currentLocale)}\n        >\n          {\n            isAllSource\n              ? <ContactFilterIcon className={styles.filterIconNode} />\n              : <ContactFilterSolidIcon className={styles.filterIconNode} />\n          }\n        </div>\n        {\n          !this.state.unfold ? null : (\n            <div\n              className={styles.contactSourceList}\n              onClick={e => e.stopPropagation()}\n            >\n              {\n                contactSourceNames.map(sourceName => (\n                  <ContactSourceItem\n                    key={sourceName}\n                    sourceName={sourceName}\n                    sourceLabel={this.getString(sourceName, currentLocale)}\n                    isSelected={sourceName === selectedSourceName}\n                    onSelect={this.emitSelect}\n                  />\n                ))\n              }\n            </div>\n        )}\n      </div>\n    );\n  }\n}\n\nContactSourceFilter.propTypes = {\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  onSourceSelect: PropTypes.func,\n  selectedSourceName: PropTypes.string,\n  contactSourceNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nContactSourceFilter.defaultProps = {\n  className: undefined,\n  selectedSourceName: undefined,\n  onSourceSelect: undefined,\n};\n"]}