{"version":3,"sources":["components/UserGuide/index.js"],"names":["controlStyles","entered","transform","UserGuide","props","slideTo","idx","guides","length","exit","setState","curIdx","updateCarousel","state","playing","onExited","nextProps","styles","intro","introBg","backgroundImage","buttonGroup","primaryButton","i18n","getString","currentLocale","secondaryButton","slice","imageView","map","guide","i","view","indicatorView","_","highlight","dot","onLastPage","skipButton","nextButton","controlView","control","indicator","carousel","carouselBox","getIntroView","showSpinner","getCarouselView","appear","enter","appearActive","enterActive","exitActive","root","React","Component","propTypes","PropTypes","number","bool","func","array","isRequired","string","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst controlStyles = {\n  entered: { transform: 'translateY(0)' }\n};\n\nexport default class UserGuide extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curIdx: props.curIdx || 0,\n      entered: props.entered || false,\n      playing: props.playing || false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { curIdx, entered, playing } = nextProps;\n    if (this.state.curIdx !== curIdx) {\n      this.setState({ curIdx });\n    }\n    if (this.state.entered !== entered) {\n      this.setState({ entered });\n    }\n    if (this.state.playing !== playing) {\n      this.setState({ playing });\n    }\n  }\n\n  slideTo = (idx) => {\n    if (idx > this.props.guides.length - 1) {\n      this.exit();\n      return;\n    }\n    this.setState({\n      curIdx: idx\n    });\n    this.props.updateCarousel({\n      curIdx: idx,\n      entered: this.state.entered,\n      playing: this.state.playing\n    });\n  }\n\n  exit = () => {\n    this.setState({\n      playing: false,\n    });\n    this.props.updateCarousel({\n      curIdx: this.state.curIdx,\n      entered: this.state.entered,\n      playing: false\n    });\n  }\n\n  onExited = () => {\n    this.setState({\n      entered: false\n    });\n    this.props.updateCarousel({\n      curIdx: 0,\n      entered: false,\n      playing: false\n    });\n  }\n\n  getIntroView() {\n    return (\n      <div className={styles.intro}>\n        <div\n          className={styles.introBg}\n          style={{ backgroundImage: `url(${this.props.guides[0]})` }}\n        >\n        </div>\n        <div className={styles.buttonGroup}>\n          <Button\n            className={styles.primaryButton}\n            onClick={() => { this.slideTo(1); }}\n          >\n            {i18n.getString('start', this.props.currentLocale)}\n          </Button>\n          <Button\n            onClick={() => { this.exit(); }}\n            className={styles.secondaryButton}\n          >\n            {i18n.getString('skip', this.props.currentLocale)}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  getCarouselView() {\n    const guides = this.props.guides.slice(1, this.props.guides.length);\n    const imageView = guides.map((guide, i) => (\n      <div\n        key={i}\n        className={styles.view}\n        style={{\n          backgroundImage: `url(${guide})`,\n          transform: `translateX(${(i + 1) * 100}vw)`\n        }}\n      >\n      </div>\n    ));\n    const indicatorView = guides.map((_, i) => {\n      const highlight = i + 1 === this.state.curIdx ? styles.highlight : null;\n      return (\n        <li\n          key={i}\n          className={classnames(styles.dot, highlight)}\n          onClick={() => { this.slideTo(i + 1); }}\n        >\n        </li>\n      );\n    });\n    const onLastPage = this.state.curIdx === this.props.guides.length - 1;\n    const skipButton = onLastPage\n      ? (<div className={styles.secondaryButton}></div>)\n      : (\n        <Button\n          onClick={() => { this.exit(); }}\n          className={classnames(styles.secondaryButton)}\n        >\n          { i18n.getString('skip', this.props.currentLocale) }\n        </Button>\n      );\n    const nextButton = (\n      <Button\n        onClick={() => { this.slideTo(this.state.curIdx + 1); }}\n        className={classnames(styles.primaryButton)}\n      >\n        { onLastPage\n        ? i18n.getString('finish', this.props.currentLocale)\n            : i18n.getString('next', this.props.currentLocale) }\n      </Button>\n    );\n    const controlView = (\n      <Transition\n        in={this.state.curIdx > 0}\n        timeout={300}\n      >\n        {state => (\n          <div className={styles.control} style={{ ...controlStyles[state] }}>\n            {skipButton}\n            <ul className={styles.indicator}>\n              {indicatorView}\n            </ul>\n            {nextButton}\n          </div>\n        )}\n      </Transition>\n    );\n    return (\n      <div className={styles.carousel}>\n        <div\n          className={styles.carouselBox}\n          style={{ transform: `translateX(-${this.state.curIdx * 100}vw)` }}\n        >\n          {this.getIntroView()}\n          {imageView}\n        </div>\n        {controlView}\n      </div>\n    );\n  }\n\n  render() {\n    if (!this.state.entered) return null;\n    if (this.props.showSpinner) {\n      return <SpinnerOverlay />;\n    }\n    const view = this.getCarouselView();\n    return (\n      <CSSTransition\n        in={this.state.playing}\n        timeout={400}\n        classNames={{\n          appear: styles.enter,\n          appearActive: styles.enterActive,\n          exit: styles.exit,\n          exitActive: styles.exitActive\n        }}\n        onExited={this.onExited}\n        appear\n      >\n        <div className={styles.root}>\n          {view}\n        </div>\n      </CSSTransition>\n    );\n  }\n}\n\nUserGuide.propTypes = {\n  curIdx: PropTypes.number,\n  entered: PropTypes.bool,\n  playing: PropTypes.bool,\n  updateCarousel: PropTypes.func,\n  guides: PropTypes.array.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nUserGuide.defaultProps = {\n  curIdx: 0,\n  entered: false,\n  playing: false,\n  updateCarousel: () => null\n};\n"]}